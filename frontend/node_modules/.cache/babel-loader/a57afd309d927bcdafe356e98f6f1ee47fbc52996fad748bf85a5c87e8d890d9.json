{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageEditor/ImageEditor.jsx\",\n  _s = $RefreshSig$();\n// ImageEditor.js\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageEditor({\n  images\n}) {\n  _s();\n  const containerRef = useRef(null);\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const [maxImageSize, setMaxImageSize] = useState(0);\n  const [selectedImageIndex, setSelectedImageIndex] = useState(null);\n  useEffect(() => {\n    const updateContainerSize = () => {\n      const container = containerRef.current;\n      if (container) {\n        setContainerWidth(container.offsetWidth);\n        setContainerHeight(container.offsetHeight);\n      }\n    };\n    window.addEventListener('resize', updateContainerSize);\n    updateContainerSize();\n    return () => {\n      window.removeEventListener('resize', updateContainerSize);\n    };\n  }, []);\n  useEffect(() => {\n    const calculateMaxImageSize = () => {\n      const numImages = images.length;\n      const maxRowImages = Math.floor(containerWidth / 300); // Adjust 300 as needed for desired image width\n      const maxColImages = Math.floor(containerHeight / 300); // Adjust 300 as needed for desired image height\n      const maxImagesPerPage = maxRowImages * maxColImages;\n      const numRows = Math.ceil(numImages / maxRowImages);\n      const width = containerWidth / maxRowImages;\n      const height = containerHeight / numRows;\n      return Math.min(width, height);\n    };\n    setMaxImageSize(calculateMaxImageSize());\n  }, [containerWidth, containerHeight, images]);\n  const handleImageClick = index => {\n    setSelectedImageIndex(index);\n  };\n  const handleCloseViewer = () => {\n    setSelectedImageIndex(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-editor\",\n    ref: containerRef,\n    children: [images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      style: {\n        width: maxImageSize,\n        height: maxImageSize\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(image),\n        alt: `Image ${index}`,\n        className: \"image-item\",\n        onClick: () => handleImageClick(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this)), selectedImageIndex !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected Image Index: \", selectedImageIndex]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCloseViewer,\n        children: \"Close Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageEditor, \"ICEQs8h7LAmHvEEBjqrDIPxy2dI=\");\n_c = ImageEditor;\nexport default ImageEditor;\nvar _c;\n$RefreshReg$(_c, \"ImageEditor\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","ImageEditor","images","_s","containerRef","containerWidth","setContainerWidth","containerHeight","setContainerHeight","maxImageSize","setMaxImageSize","selectedImageIndex","setSelectedImageIndex","updateContainerSize","container","current","offsetWidth","offsetHeight","window","addEventListener","removeEventListener","calculateMaxImageSize","numImages","length","maxRowImages","Math","floor","maxColImages","maxImagesPerPage","numRows","ceil","width","height","min","handleImageClick","index","handleCloseViewer","className","ref","children","map","image","style","src","URL","createObjectURL","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageEditor/ImageEditor.jsx"],"sourcesContent":["// ImageEditor.js\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageEditor.css';\n\nfunction ImageEditor({ images }) {\n    const containerRef = useRef(null);\n    const [containerWidth, setContainerWidth] = useState(0);\n    const [containerHeight, setContainerHeight] = useState(0);\n    const [maxImageSize, setMaxImageSize] = useState(0);\n    const [selectedImageIndex, setSelectedImageIndex] = useState(null);\n\n    useEffect(() => {\n        const updateContainerSize = () => {\n            const container = containerRef.current;\n            if (container) {\n                setContainerWidth(container.offsetWidth);\n                setContainerHeight(container.offsetHeight);\n            }\n        };\n\n        window.addEventListener('resize', updateContainerSize);\n        updateContainerSize();\n\n        return () => {\n            window.removeEventListener('resize', updateContainerSize);\n        };\n    }, []);\n\n    useEffect(() => {\n        const calculateMaxImageSize = () => {\n            const numImages = images.length;\n            const maxRowImages = Math.floor(containerWidth / 300); // Adjust 300 as needed for desired image width\n            const maxColImages = Math.floor(containerHeight / 300); // Adjust 300 as needed for desired image height\n            const maxImagesPerPage = maxRowImages * maxColImages;\n            const numRows = Math.ceil(numImages / maxRowImages);\n\n            const width = containerWidth / maxRowImages;\n            const height = containerHeight / numRows;\n            return Math.min(width, height);\n        };\n\n        setMaxImageSize(calculateMaxImageSize());\n    }, [containerWidth, containerHeight, images]);\n\n    const handleImageClick = (index) => {\n        setSelectedImageIndex(index);\n    };\n\n    const handleCloseViewer = () => {\n        setSelectedImageIndex(null);\n    };\n\n    return (\n        <div className=\"image-editor\" ref={containerRef}>\n            {images.map((image, index) => (\n                <div key={index} className=\"image-container\" style={{ width: maxImageSize, height: maxImageSize }}>\n                    <img\n                        src={URL.createObjectURL(image)}\n                        alt={`Image ${index}`}\n                        className=\"image-item\"\n                        onClick={() => handleImageClick(index)}\n                    />\n                </div>\n            ))}\n            {/* Optional: Display additional details about the selected image */}\n            {selectedImageIndex !== null && (\n                <div>\n                    <p>Selected Image Index: {selectedImageIndex}</p>\n                    <button onClick={handleCloseViewer}>Close Viewer</button>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default ImageEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}