{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const imageCanvasRef = useRef(null);\n  const drawingCanvasRef = useRef(null);\n  const [imageContext, setImageContext] = useState(null);\n  const [drawingContext, setDrawingContext] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeIndex, setResizeIndex] = useState(-1);\n  const [resizeStartX, setResizeStartX] = useState(0);\n  const [resizeStartY, setResizeStartY] = useState(0);\n  const [prevMouseX, setPrevMouseX] = useState(0);\n  const [prevMouseY, setPrevMouseY] = useState(0);\n  const [penMode, setPenMode] = useState(false);\n  const [rubberMode, setRubberMode] = useState(false);\n  const [penColor, setPenColor] = useState('#000000');\n  const [penThickness, setPenThickness] = useState(2);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const imageCanvas = imageCanvasRef.current;\n    const ctx = imageCanvas.getContext('2d');\n    setImageContext(ctx);\n  }, []);\n  useEffect(() => {\n    const drawingCanvas = drawingCanvasRef.current;\n    const ctx = drawingCanvas.getContext('2d');\n    setDrawingContext(ctx);\n  }, []);\n  useEffect(() => {\n    if (image && imageCanvasRef.current && drawingCanvasRef.current) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n        const img = new Image();\n        img.onload = () => {\n          const {\n            width,\n            height\n          } = img;\n          const imageCanvas = imageCanvasRef.current;\n          const drawingCanvas = drawingCanvasRef.current;\n          const imageCtx = imageCanvas.getContext('2d');\n          const drawingCtx = drawingCanvas.getContext('2d');\n\n          // Set the width and height of the canvases\n          imageCanvas.width = width;\n          imageCanvas.height = height;\n          drawingCanvas.width = width;\n          drawingCanvas.height = height;\n\n          // Set the context variables\n          setImageContext(imageCtx);\n          setDrawingContext(drawingCtx);\n\n          // Draw the image on the imageCanvas\n          imageCtx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n          imageCtx.drawImage(img, 0, 0, width, height);\n\n          // Redraw shapes on the drawingCanvas\n          shapes.forEach((shape, index) => {\n            drawShape(drawingCtx, shape, index === selectedShapeIndex, index === resizeIndex);\n          });\n        };\n        img.src = reader.result;\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n  const handleMouseDown = e => {\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    if (penMode) {\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n      const ctx = canvas.getContext('2d');\n      ctx.globalCompositeOperation = 'destination-out';\n      ctx.strokeStyle = 'rgba(0,0,0,0)';\n      ctx.lineWidth = penThickness;\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else {\n      let shapeSelected = false;\n      shapes.forEach((shape, index) => {\n        if (isPointInsideShape(mouseX, mouseY, shape)) {\n          setSelectedShapeIndex(index);\n          setIsDragging(true);\n          setDragStartX(mouseX - shape.x);\n          setDragStartY(mouseY - shape.y);\n          setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n          if (isResizing) {\n            setResizeIndex(index);\n            setResizeStartX(mouseX - shape.x);\n            setResizeStartY(mouseY - shape.y);\n          }\n          shapeSelected = true;\n        }\n      });\n      if (!shapeSelected) {\n        setSelectedShapeIndex(null);\n      }\n    }\n  };\n  const handleMouseMove = e => {\n    if (!isDragging || penMode && !rubberMode && !isDragging) return;\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    if (penMode) {\n      drawingContext.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n      drawingContext.lineWidth = penThickness;\n      drawingContext.lineCap = 'round';\n      drawingContext.beginPath();\n      drawingContext.moveTo(prevMouseX, prevMouseY);\n      drawingContext.lineTo(mouseX, mouseY);\n      drawingContext.stroke();\n      drawingContext.closePath();\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n      drawingContext.globalCompositeOperation = 'destination-out';\n      drawingContext.beginPath();\n      drawingContext.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n      drawingContext.fill();\n    } else {\n      const newShapes = [...shapes];\n      const shape = newShapes[selectedShapeIndex];\n      if (!isResizing) {\n        shape.x = mouseX - dragStartX;\n        shape.y = mouseY - dragStartY;\n      } else {\n        const dx = mouseX - shape.x - resizeStartX;\n        const dy = mouseY - shape.y - resizeStartY;\n        shape.width += dx;\n        shape.height += dy;\n        setResizeStartX(mouseX - shape.x);\n        setResizeStartY(mouseY - shape.y);\n      }\n      setShapes(newShapes);\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setIsResizing(false);\n  };\n  const isResizingHandle = (x, y, shape) => {\n    return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width && y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n  };\n  const drawShape = (ctx, shape, isSelected, isResizing) => {\n    ctx.beginPath();\n    ctx.rect(shape.x, shape.y, shape.width, shape.height);\n    ctx.strokeStyle = isSelected ? 'red' : shape.color;\n    ctx.lineWidth = shape.lineWidth;\n    ctx.stroke();\n  };\n  const handleDeleteShape = () => {\n    if (selectedShapeIndex !== null) {\n      const newShapes = [...shapes];\n      newShapes.splice(selectedShapeIndex, 1);\n      setShapes(newShapes);\n      setSelectedShapeIndex(null);\n    }\n  };\n  const handleSave = () => {\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    const mergedCanvas = document.createElement('canvas');\n    const mergedCtx = mergedCanvas.getContext('2d');\n\n    // Set the dimensions of the merged canvas\n    mergedCanvas.width = imageCanvas.width;\n    mergedCanvas.height = imageCanvas.height;\n\n    // Draw the image canvas onto the merged canvas\n    mergedCtx.drawImage(imageCanvas, 0, 0);\n\n    // Draw the drawing canvas onto the merged canvas\n    mergedCtx.drawImage(drawingCanvas, 0, 0);\n\n    // Convert the merged canvas to a blob\n    mergedCanvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n  const handleAddShape = type => {\n    const newShapes = [...shapes];\n    if (type === 'square') {\n      newShapes.push({\n        type: 'square',\n        x: 100,\n        y: 100,\n        width: 50,\n        height: 50,\n        color: 'red',\n        lineWidth: 2\n      });\n    } else if (type === 'rectangle') {\n      newShapes.push({\n        type: 'rectangle',\n        x: 200,\n        y: 200,\n        width: 80,\n        height: 40,\n        color: 'blue',\n        lineWidth: 2\n      });\n    }\n    setShapes(newShapes);\n  };\n  const handleZoomIn = () => {\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n\n    // Apply zoom in by adjusting the scale of the canvases\n    imageCanvas.style.transform = `scale(1.1)`;\n    drawingCanvas.style.transform = `scale(1.1)`;\n  };\n  const handleZoomOut = () => {\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n\n    // Apply zoom out by adjusting the scale of the canvases\n    imageCanvas.style.transform = `scale(0.9)`;\n    drawingCanvas.style.transform = `scale(0.9)`;\n  };\n  const togglePenMode = () => {\n    setPenMode(!penMode);\n    setRubberMode(false); // Ensure rubber mode is turned off when switching to pen mode\n  };\n  const clearCanvas = () => {\n    const canvas = drawingCanvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  };\n  const handleToggleRubberMode = () => {\n    setRubberMode(!rubberMode);\n    setPenMode(false); // Ensure pen mode is turned off when switching to rubber mode\n  };\n  const isPointInsideShape = (x, y, shape) => {\n    if (shape.type === 'square' || shape.type === 'rectangle') {\n      return x >= shape.x && x <= shape.x + shape.width && y >= shape.y && y <= shape.y + shape.height;\n    } else if (shape.type === 'circle') {\n      const dx = x - shape.x;\n      const dy = y - shape.y;\n      return dx * dx + dy * dy <= shape.radius * shape.radius;\n    }\n    return false;\n  };\n  const handleTogglePenMode = () => {\n    setPenMode(!penMode);\n    setRubberMode(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: imageCanvasRef,\n      style: {\n        position: 'absolute'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: drawingCanvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      style: {\n        position: 'absolute'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        children: \"Zoom In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        children: \"Zoom Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePenMode,\n        children: penMode ? 'Switch to Eraser' : 'Switch to Pen'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }, this), selectedShapeIndex !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteShape,\n        style: {\n          position: 'absolute',\n          top: shapes[selectedShapeIndex].y - 50,\n          left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast,\n      onAddRectangle: () => handleAddShape('rectangle'),\n      onTogglePenMode: handleTogglePenMode,\n      onToggleRubberMode: handleToggleRubberMode // Pass handleToggleRubberMode as a prop\n      ,\n      onPenColorChange: setPenColor,\n      onPenThicknessChange: setPenThickness,\n      penMode: penMode,\n      rubberMode: rubberMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"giE0lqGxjIKULgfsmhoLYUwPXW8=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","imageCanvasRef","drawingCanvasRef","imageContext","setImageContext","drawingContext","setDrawingContext","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDragging","setIsDragging","dragStartX","setDragStartX","dragStartY","setDragStartY","isResizing","setIsResizing","resizeIndex","setResizeIndex","resizeStartX","setResizeStartX","resizeStartY","setResizeStartY","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","penMode","setPenMode","rubberMode","setRubberMode","penColor","setPenColor","penThickness","setPenThickness","reader","FileReader","onload","result","readAsDataURL","imageCanvas","current","ctx","getContext","drawingCanvas","img","Image","width","height","imageCtx","drawingCtx","filter","drawImage","forEach","shape","index","drawShape","src","handleMouseDown","e","canvas","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","globalCompositeOperation","strokeStyle","lineWidth","shapeSelected","isPointInsideShape","x","y","isResizingHandle","handleMouseMove","lineCap","beginPath","moveTo","lineTo","stroke","closePath","arc","Math","PI","fill","newShapes","dx","dy","handleMouseUp","isSelected","color","handleDeleteShape","splice","handleSave","mergedCanvas","document","createElement","mergedCtx","toBlob","blob","handleAddShape","type","push","handleZoomIn","style","transform","handleZoomOut","togglePenMode","clearCanvas","clearRect","handleToggleRubberMode","radius","handleTogglePenMode","className","children","ref","position","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseMove","onMouseUp","onClick","onBrightnessChange","onContrastChange","onAddRectangle","onTogglePenMode","onToggleRubberMode","onPenColorChange","onPenThicknessChange","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const imageCanvasRef = useRef(null);\n    const drawingCanvasRef = useRef(null);\n    const [imageContext, setImageContext] = useState(null);\n    const [drawingContext, setDrawingContext] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [dragStartX, setDragStartX] = useState(0);\n    const [dragStartY, setDragStartY] = useState(0);\n    const [isResizing, setIsResizing] = useState(false);\n    const [resizeIndex, setResizeIndex] = useState(-1);\n    const [resizeStartX, setResizeStartX] = useState(0);\n    const [resizeStartY, setResizeStartY] = useState(0);\n    const [prevMouseX, setPrevMouseX] = useState(0);\n    const [prevMouseY, setPrevMouseY] = useState(0);\n\n    const [penMode, setPenMode] = useState(false);\n    const [rubberMode, setRubberMode] = useState(false);\n    const [penColor, setPenColor] = useState('#000000');\n    const [penThickness, setPenThickness] = useState(2);\n    \n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const imageCanvas = imageCanvasRef.current;\n        const ctx = imageCanvas.getContext('2d');\n        setImageContext(ctx);\n    }, []);\n\n    useEffect(() => {\n        const drawingCanvas = drawingCanvasRef.current;\n        const ctx = drawingCanvas.getContext('2d');\n        setDrawingContext(ctx);\n    }, []);\n\n    useEffect(() => {\n        if (image && imageCanvasRef.current && drawingCanvasRef.current) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n                const img = new Image();\n                img.onload = () => {\n                    const { width, height } = img;\n                    const imageCanvas = imageCanvasRef.current;\n                    const drawingCanvas = drawingCanvasRef.current;\n                    const imageCtx = imageCanvas.getContext('2d');\n                    const drawingCtx = drawingCanvas.getContext('2d');\n                    \n                    // Set the width and height of the canvases\n                    imageCanvas.width = width;\n                    imageCanvas.height = height;\n                    drawingCanvas.width = width;\n                    drawingCanvas.height = height;\n                    \n                    // Set the context variables\n                    setImageContext(imageCtx);\n                    setDrawingContext(drawingCtx);\n                    \n                    // Draw the image on the imageCanvas\n                    imageCtx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                    imageCtx.drawImage(img, 0, 0, width, height);\n                    \n                    // Redraw shapes on the drawingCanvas\n                    shapes.forEach((shape, index) => {\n                        drawShape(drawingCtx, shape, index === selectedShapeIndex, index === resizeIndex);\n                    });\n                };\n                img.src = reader.result;\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n\n    const handleMouseDown = (e) => {\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        if (penMode) {\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else if (rubberMode) {\n            const ctx = canvas.getContext('2d');\n            ctx.globalCompositeOperation = 'destination-out';\n            ctx.strokeStyle = 'rgba(0,0,0,0)';\n            ctx.lineWidth = penThickness;\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else {\n            let shapeSelected = false;\n            shapes.forEach((shape, index) => {\n                if (isPointInsideShape(mouseX, mouseY, shape)) {\n                    setSelectedShapeIndex(index);\n                    setIsDragging(true);\n                    setDragStartX(mouseX - shape.x);\n                    setDragStartY(mouseY - shape.y);\n                    setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n                    if (isResizing) {\n                        setResizeIndex(index);\n                        setResizeStartX(mouseX - shape.x);\n                        setResizeStartY(mouseY - shape.y);\n                    }\n                    shapeSelected = true;\n                }\n            });\n\n            if (!shapeSelected) {\n                setSelectedShapeIndex(null);\n            }\n        }\n    };\n\n    const handleMouseMove = (e) => {\n        if (!isDragging || (penMode && !rubberMode && !isDragging)) return;\n\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n    \n        if (penMode) {\n            drawingContext.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n            drawingContext.lineWidth = penThickness;\n            drawingContext.lineCap = 'round';\n            drawingContext.beginPath();\n            drawingContext.moveTo(prevMouseX, prevMouseY);\n            drawingContext.lineTo(mouseX, mouseY);\n            drawingContext.stroke();\n            drawingContext.closePath();\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else if (rubberMode) {\n            drawingContext.globalCompositeOperation = 'destination-out';\n            drawingContext.beginPath();\n            drawingContext.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n            drawingContext.fill();\n        } else {\n            const newShapes = [...shapes];\n            const shape = newShapes[selectedShapeIndex];\n            if (!isResizing) {\n                shape.x = mouseX - dragStartX;\n                shape.y = mouseY - dragStartY;\n            } else {\n                const dx = mouseX - shape.x - resizeStartX;\n                const dy = mouseY - shape.y - resizeStartY;\n                shape.width += dx;\n                shape.height += dy;\n                setResizeStartX(mouseX - shape.x);\n                setResizeStartY(mouseY - shape.y);\n            }\n            setShapes(newShapes);\n        }\n    };\n\n    const handleMouseUp = () => {\n        setIsDragging(false);\n        setIsResizing(false);\n    };\n\n    const isResizingHandle = (x, y, shape) => {\n        return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width &&\n            y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n    };\n\n    const drawShape = (ctx, shape, isSelected, isResizing) => {\n        ctx.beginPath();\n        ctx.rect(shape.x, shape.y, shape.width, shape.height);\n        ctx.strokeStyle = isSelected ? 'red' : shape.color;\n        ctx.lineWidth = shape.lineWidth;\n        ctx.stroke();\n    };\n\n    const handleDeleteShape = () => {\n        if (selectedShapeIndex !== null) {\n            const newShapes = [...shapes];\n            newShapes.splice(selectedShapeIndex, 1);\n            setShapes(newShapes);\n            setSelectedShapeIndex(null);\n        }\n    };\n\n    const handleSave = () => {\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n        const mergedCanvas = document.createElement('canvas');\n        const mergedCtx = mergedCanvas.getContext('2d');\n        \n        // Set the dimensions of the merged canvas\n        mergedCanvas.width = imageCanvas.width;\n        mergedCanvas.height = imageCanvas.height;\n        \n        // Draw the image canvas onto the merged canvas\n        mergedCtx.drawImage(imageCanvas, 0, 0);\n        \n        // Draw the drawing canvas onto the merged canvas\n        mergedCtx.drawImage(drawingCanvas, 0, 0);\n        \n        // Convert the merged canvas to a blob\n        mergedCanvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n\n    const handleAddShape = (type) => {\n        const newShapes = [...shapes];\n        if (type === 'square') {\n            newShapes.push({\n                type: 'square',\n                x: 100,\n                y: 100,\n                width: 50,\n                height: 50,\n                color: 'red',\n                lineWidth: 2,\n            });\n        } else if (type === 'rectangle') {\n            newShapes.push({\n                type: 'rectangle',\n                x: 200,\n                y: 200,\n                width: 80,\n                height: 40,\n                color: 'blue',\n                lineWidth: 2,\n            });\n        }\n        setShapes(newShapes);\n    };\n\n    const handleZoomIn = () => {\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n    \n        // Apply zoom in by adjusting the scale of the canvases\n        imageCanvas.style.transform = `scale(1.1)`;\n        drawingCanvas.style.transform = `scale(1.1)`;\n    };\n    \n    const handleZoomOut = () => {\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n    \n        // Apply zoom out by adjusting the scale of the canvases\n        imageCanvas.style.transform = `scale(0.9)`;\n        drawingCanvas.style.transform = `scale(0.9)`;\n    };\n    \n\n    const togglePenMode = () => {\n        setPenMode(!penMode);\n        setRubberMode(false); // Ensure rubber mode is turned off when switching to pen mode\n    };\n\n    const clearCanvas = () => {\n        const canvas = drawingCanvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    const handleToggleRubberMode = () => {\n        setRubberMode(!rubberMode);\n        setPenMode(false); // Ensure pen mode is turned off when switching to rubber mode\n    };\n    \n\n    const isPointInsideShape = (x, y, shape) => {\n        if (shape.type === 'square' || shape.type === 'rectangle') {\n            return x >= shape.x && x <= (shape.x + shape.width) &&\n                y >= shape.y && y <= (shape.y + shape.height);\n        } else if (shape.type === 'circle') {\n            const dx = x - shape.x;\n            const dy = y - shape.y;\n            return dx * dx + dy * dy <= shape.radius * shape.radius;\n        }\n        return false;\n    };\n\n    const handleTogglePenMode = () => {\n        setPenMode(!penMode);\n        setRubberMode(false);\n    };\n    \n\n    return (\n        <div className=\"image-viewer\">\n            <canvas\n                ref={imageCanvasRef}\n                style={{ position: 'absolute' }}\n            />\n            <canvas\n                ref={drawingCanvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                style={{ position: 'absolute' }}\n            />\n            <div className=\"controls\">\n                <button onClick={handleZoomIn}>Zoom In</button>\n                <button onClick={handleZoomOut}>Zoom Out</button>\n                <button onClick={handleSave}>Save</button>\n                <button onClick={onClose}>Close</button>\n                <button onClick={togglePenMode}>{penMode ? 'Switch to Eraser' : 'Switch to Pen'}</button>\n                <button onClick={clearCanvas}>Clear Canvas</button>\n                {selectedShapeIndex !== null && (\n                    <button onClick={handleDeleteShape} style={{\n                        position: 'absolute',\n                        top: shapes[selectedShapeIndex].y - 50,\n                        left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n                    }}>X</button>\n                )}\n            </div>\n\n            <SideToolbar\n                onBrightnessChange={setBrightness}\n                onContrastChange={setContrast}\n                onAddRectangle={() => handleAddShape('rectangle')}\n                onTogglePenMode={handleTogglePenMode}\n                onToggleRubberMode={handleToggleRubberMode} // Pass handleToggleRubberMode as a prop\n                onPenColorChange={setPenColor}\n                onPenThicknessChange={setPenThickness}\n                penMode={penMode}\n                rubberMode={rubberMode}\n            />\n        </div>\n    );\n}\n\nexport default ImageViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}