{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeIndex, setResizeIndex] = useState(-1);\n  const [resizeStartX, setResizeStartX] = useState(0);\n  const [resizeStartY, setResizeStartY] = useState(0);\n  const [prevMouseX, setPrevMouseX] = useState(0); // New state variable\n  const [prevMouseY, setPrevMouseY] = useState(0); // New state variable\n\n  const [penMode, setPenMode] = useState(false);\n  const [rubberMode, setRubberMode] = useState(false);\n  const [penColor, setPenColor] = useState('#000000');\n  const [penThickness, setPenThickness] = useState(2);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    setContext(ctx);\n    if (context && imageSrc) {\n      const img = new Image();\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n        ctx.drawImage(img, 0, 0);\n        shapes.forEach((shape, index) => {\n          drawShape(ctx, shape, index === selectedShapeIndex, index === resizeIndex);\n        });\n      };\n      img.src = imageSrc;\n    }\n  }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n  const handleMouseDown = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n\n    // Check if the click occurred inside the canvas\n    if (mouseX < 0 || mouseY < 0 || mouseX >= canvas.width || mouseY >= canvas.height) {\n      return;\n    }\n    if (penMode) {\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else {\n      let shapeSelected = false;\n      shapes.forEach((shape, index) => {\n        if (isPointInsideShape(mouseX, mouseY, shape)) {\n          setSelectedShapeIndex(index);\n          setIsDragging(true);\n          setDragStartX(mouseX - shape.x);\n          setDragStartY(mouseY - shape.y);\n          setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n          if (isResizing) {\n            setResizeIndex(index);\n            setResizeStartX(mouseX - shape.x);\n            setResizeStartY(mouseY - shape.y);\n          }\n          shapeSelected = true;\n        }\n      });\n      if (!shapeSelected) {\n        setSelectedShapeIndex(null);\n      }\n    }\n  };\n  const handleMouseMove = e => {\n    if (!isDragging || penMode && !rubberMode && selectedShapeIndex === null) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    if (penMode && !rubberMode) {\n      const previousX = mouseX - e.movementX;\n      const previousY = mouseY - e.movementY;\n      drawPenLine(previousX, previousY, mouseX, mouseY);\n    } else {\n      const newShapes = [...shapes];\n      const shape = newShapes[selectedShapeIndex];\n      if (!isResizing) {\n        shape.x = mouseX - dragStartX;\n        shape.y = mouseY - dragStartY;\n      } else {\n        const dx = mouseX - shape.x - resizeStartX;\n        const dy = mouseY - shape.y - resizeStartY;\n        shape.width += dx;\n        shape.height += dy;\n        setResizeStartX(mouseX - shape.x);\n        setResizeStartY(mouseY - shape.y);\n      }\n      setShapes(newShapes);\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setIsResizing(false);\n  };\n  const isResizingHandle = (x, y, shape) => {\n    return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width && y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n  };\n  const drawPenLine = (startX, startY, endX, endY) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n    ctx.lineWidth = penThickness;\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.moveTo(startX, startY);\n    ctx.lineTo(endX, endY);\n    ctx.stroke();\n    ctx.closePath();\n  };\n  const drawShape = (ctx, shape, isSelected, isResizing) => {\n    ctx.beginPath();\n    ctx.rect(shape.x, shape.y, shape.width, shape.height);\n    ctx.strokeStyle = isSelected ? 'red' : shape.color;\n    ctx.lineWidth = shape.lineWidth;\n    ctx.stroke();\n  };\n  const handleDeleteShape = () => {\n    if (selectedShapeIndex !== null) {\n      const newShapes = [...shapes];\n      newShapes.splice(selectedShapeIndex, 1);\n      setShapes(newShapes);\n      setSelectedShapeIndex(null);\n    }\n  };\n  const handleSave = () => {\n    const canvas = canvasRef.current;\n    canvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n  const handleAddShape = type => {\n    const newShapes = [...shapes];\n    if (type === 'square') {\n      newShapes.push({\n        type: 'square',\n        x: 100,\n        y: 100,\n        width: 50,\n        height: 50,\n        color: 'red',\n        lineWidth: 2\n      });\n    } else if (type === 'rectangle') {\n      newShapes.push({\n        type: 'rectangle',\n        x: 200,\n        y: 200,\n        width: 80,\n        height: 40,\n        color: 'blue',\n        lineWidth: 2\n      });\n    }\n    setShapes(newShapes);\n  };\n  const handlePenModeChange = mode => {\n    setPenMode(mode);\n  };\n  const handleRubberModeChange = mode => {\n    setRubberMode(mode);\n  };\n  const isPointInsideShape = (x, y, shape) => {\n    if (shape.type === 'square' || shape.type === 'rectangle') {\n      return x >= shape.x && x <= shape.x + shape.width && y >= shape.y && y <= shape.y + shape.height;\n    } else if (shape.type === 'circle') {\n      const dx = x - shape.x;\n      const dy = y - shape.y;\n      return dx * dx + dy * dy <= shape.radius * shape.radius;\n    }\n    return false;\n  };\n  const handleZoomIn = () => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const zoomFactor = 1.1;\n    const newShapes = shapes.map(shape => {\n      if (shape.type === 'square' || shape.type === 'rectangle') {\n        shape.x = centerX + (shape.x - centerX) * zoomFactor;\n        shape.y = centerY + (shape.y - centerY) * zoomFactor;\n        shape.width *= zoomFactor;\n        shape.height *= zoomFactor;\n      } else if (shape.type === 'circle') {\n        shape.x = centerX + (shape.x - centerX) * zoomFactor;\n        shape.y = centerY + (shape.y - centerY) * zoomFactor;\n        shape.radius *= zoomFactor;\n      }\n      return shape;\n    });\n    setShapes(newShapes);\n  };\n  const handleZoomOut = () => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const zoomFactor = 0.9;\n    const newShapes = shapes.map(shape => {\n      shape.x = centerX + (shape.x - centerX) * zoomFactor;\n      shape.y = centerY + (shape.y - centerY) * zoomFactor;\n      shape.width *= zoomFactor;\n      shape.height *= zoomFactor;\n      return shape;\n    });\n    setShapes(newShapes);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      style: {\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        children: \"Zoom In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        children: \"Zoom Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this), selectedShapeIndex !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteShape,\n        style: {\n          position: 'absolute',\n          top: shapes[selectedShapeIndex].y - 50,\n          left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast,\n      onAddRectangle: () => handleAddShape('rectangle'),\n      onPenModeChange: handlePenModeChange,\n      onRubberModeChange: handleRubberModeChange,\n      onPenColorChange: setPenColor // Pass the function to set pen color\n      ,\n      onPenThicknessChange: setPenThickness // Pass the function to set pen thickness\n      ,\n      penMode: penMode,\n      rubberMode: rubberMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"iplDGJPaFNiM7sHaz7JUYuVTr5w=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","canvasRef","context","setContext","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDragging","setIsDragging","dragStartX","setDragStartX","dragStartY","setDragStartY","isResizing","setIsResizing","resizeIndex","setResizeIndex","resizeStartX","setResizeStartX","resizeStartY","setResizeStartY","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","penMode","setPenMode","rubberMode","setRubberMode","penColor","setPenColor","penThickness","setPenThickness","reader","FileReader","onload","result","readAsDataURL","canvas","current","ctx","getContext","img","Image","width","height","filter","drawImage","forEach","shape","index","drawShape","src","handleMouseDown","e","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","shapeSelected","isPointInsideShape","x","y","isResizingHandle","handleMouseMove","previousX","movementX","previousY","movementY","drawPenLine","newShapes","dx","dy","handleMouseUp","startX","startY","endX","endY","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","closePath","isSelected","color","handleDeleteShape","splice","handleSave","toBlob","blob","handleAddShape","type","push","handlePenModeChange","mode","handleRubberModeChange","radius","handleZoomIn","centerX","centerY","zoomFactor","map","handleZoomOut","className","children","ref","onMouseDown","onMouseMove","onMouseUp","style","border","fileName","_jsxFileName","lineNumber","columnNumber","onClick","position","onBrightnessChange","onContrastChange","onAddRectangle","onPenModeChange","onRubberModeChange","onPenColorChange","onPenThicknessChange","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const canvasRef = useRef(null);\n    const [context, setContext] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [dragStartX, setDragStartX] = useState(0);\n    const [dragStartY, setDragStartY] = useState(0);\n    const [isResizing, setIsResizing] = useState(false);\n    const [resizeIndex, setResizeIndex] = useState(-1);\n    const [resizeStartX, setResizeStartX] = useState(0);\n    const [resizeStartY, setResizeStartY] = useState(0);\n\n    const [prevMouseX, setPrevMouseX] = useState(0); // New state variable\n    const [prevMouseY, setPrevMouseY] = useState(0); // New state variable\n\n    const [penMode, setPenMode] = useState(false);\n    const [rubberMode, setRubberMode] = useState(false);\n    const [penColor, setPenColor] = useState('#000000');\n    const [penThickness, setPenThickness] = useState(2);\n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        setContext(ctx);\n        if (context && imageSrc) {\n            const img = new Image();\n            img.onload = () => {\n                canvas.width = img.width;\n                canvas.height = img.height;\n                ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                ctx.drawImage(img, 0, 0);\n                shapes.forEach((shape, index) => {\n                    drawShape(ctx, shape, index === selectedShapeIndex, index === resizeIndex);\n                });\n            };\n            img.src = imageSrc;\n        }\n    }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n\n    const handleMouseDown = (e) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        // Check if the click occurred inside the canvas\n        if (mouseX < 0 || mouseY < 0 || mouseX >= canvas.width || mouseY >= canvas.height) {\n            return;\n        }\n\n        if (penMode) {\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else {\n            let shapeSelected = false;\n            shapes.forEach((shape, index) => {\n                if (isPointInsideShape(mouseX, mouseY, shape)) {\n                    setSelectedShapeIndex(index);\n                    setIsDragging(true);\n                    setDragStartX(mouseX - shape.x);\n                    setDragStartY(mouseY - shape.y);\n                    setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n                    if (isResizing) {\n                        setResizeIndex(index);\n                        setResizeStartX(mouseX - shape.x);\n                        setResizeStartY(mouseY - shape.y);\n                    }\n                    shapeSelected = true;\n                }\n            });\n\n            if (!shapeSelected) {\n                setSelectedShapeIndex(null);\n            }\n        }\n    };\n\n    const handleMouseMove = (e) => {\n        if (!isDragging || (penMode && !rubberMode && selectedShapeIndex === null)) return;\n\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        if (penMode && !rubberMode) {\n            const previousX = mouseX - e.movementX;\n            const previousY = mouseY - e.movementY;\n            drawPenLine(previousX, previousY, mouseX, mouseY);\n        } else {\n            const newShapes = [...shapes];\n            const shape = newShapes[selectedShapeIndex];\n            if (!isResizing) {\n                shape.x = mouseX - dragStartX;\n                shape.y = mouseY - dragStartY;\n            } else {\n                const dx = mouseX - shape.x - resizeStartX;\n                const dy = mouseY - shape.y - resizeStartY;\n                shape.width += dx;\n                shape.height += dy;\n                setResizeStartX(mouseX - shape.x);\n                setResizeStartY(mouseY - shape.y);\n            }\n            setShapes(newShapes);\n        }\n    };\n\n    const handleMouseUp = () => {\n        setIsDragging(false);\n        setIsResizing(false);\n    };\n\n\n    const isResizingHandle = (x, y, shape) => {\n        return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width &&\n            y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n    };\n\n    const drawPenLine = (startX, startY, endX, endY) => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n        ctx.lineWidth = penThickness;\n        ctx.lineCap = 'round';\n        ctx.beginPath();\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n        ctx.closePath();\n    };\n\n    const drawShape = (ctx, shape, isSelected, isResizing) => {\n        ctx.beginPath();\n        ctx.rect(shape.x, shape.y, shape.width, shape.height);\n        ctx.strokeStyle = isSelected ? 'red' : shape.color;\n        ctx.lineWidth = shape.lineWidth;\n        ctx.stroke();\n    };\n\n\n    const handleDeleteShape = () => {\n        if (selectedShapeIndex !== null) {\n            const newShapes = [...shapes];\n            newShapes.splice(selectedShapeIndex, 1);\n            setShapes(newShapes);\n            setSelectedShapeIndex(null);\n        }\n    };\n\n\n\n    const handleSave = () => {\n        const canvas = canvasRef.current;\n        canvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n\n    const handleAddShape = (type) => {\n        const newShapes = [...shapes];\n        if (type === 'square') {\n            newShapes.push({\n                type: 'square',\n                x: 100,\n                y: 100,\n                width: 50,\n                height: 50,\n                color: 'red',\n                lineWidth: 2,\n            });\n        } else if (type === 'rectangle') {\n            newShapes.push({\n                type: 'rectangle',\n                x: 200,\n                y: 200,\n                width: 80,\n                height: 40,\n                color: 'blue',\n                lineWidth: 2,\n            });\n        }\n        setShapes(newShapes);\n    };\n\n    const handlePenModeChange = (mode) => {\n        setPenMode(mode);\n    };\n\n    const handleRubberModeChange = (mode) => {\n        setRubberMode(mode);\n    };\n\n\n    const isPointInsideShape = (x, y, shape) => {\n        if (shape.type === 'square' || shape.type === 'rectangle') {\n            return x >= shape.x && x <= (shape.x + shape.width) &&\n                y >= shape.y && y <= (shape.y + shape.height);\n        } else if (shape.type === 'circle') {\n            const dx = x - shape.x;\n            const dy = y - shape.y;\n            return dx * dx + dy * dy <= shape.radius * shape.radius;\n        }\n        return false;\n    };\n\n\n    const handleZoomIn = () => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const zoomFactor = 1.1;\n        const newShapes = shapes.map(shape => {\n            if (shape.type === 'square' || shape.type === 'rectangle') {\n                shape.x = centerX + (shape.x - centerX) * zoomFactor;\n                shape.y = centerY + (shape.y - centerY) * zoomFactor;\n                shape.width *= zoomFactor;\n                shape.height *= zoomFactor;\n            } else if (shape.type === 'circle') {\n                shape.x = centerX + (shape.x - centerX) * zoomFactor;\n                shape.y = centerY + (shape.y - centerY) * zoomFactor;\n                shape.radius *= zoomFactor;\n            }\n            return shape;\n        });\n        setShapes(newShapes);\n    };\n\n    const handleZoomOut = () => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const zoomFactor = 0.9;\n        const newShapes = shapes.map(shape => {\n            shape.x = centerX + (shape.x - centerX) * zoomFactor;\n            shape.y = centerY + (shape.y - centerY) * zoomFactor;\n            shape.width *= zoomFactor;\n            shape.height *= zoomFactor;\n            return shape;\n        });\n        setShapes(newShapes);\n    };\n\n    return (\n        <div className=\"image-viewer\">\n            <canvas\n                ref={canvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                style={{border: '1px solid black'}}\n            />\n            <div className=\"controls\">\n                <button onClick={handleZoomIn}>Zoom In</button>\n                <button onClick={handleZoomOut}>Zoom Out</button>\n                <button onClick={handleSave}>Save</button>\n                <button onClick={onClose}>Close</button>\n                {selectedShapeIndex !== null && (\n                    <button onClick={handleDeleteShape} style={{\n                        position: 'absolute',\n                        top: shapes[selectedShapeIndex].y - 50,\n                        left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n                    }}>X</button>\n                )}\n            </div>\n\n            <SideToolbar\n                onBrightnessChange={setBrightness}\n                onContrastChange={setContrast}\n                onAddRectangle={() => handleAddShape('rectangle')}\n                onPenModeChange={handlePenModeChange}\n                onRubberModeChange={handleRubberModeChange}\n                onPenColorChange={setPenColor} // Pass the function to set pen color\n                onPenThicknessChange={setPenThickness} // Pass the function to set pen thickness\n                penMode={penMode}\n                rubberMode={rubberMode}\n            />\n        </div>\n    );\n}\n\nexport default ImageViewer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,mBAAmB;AAC1B,OAAOC,WAAW,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,WAAWA,CAAC;EAAEC,KAAK;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC7C,MAAMC,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,GAAG,CAAC;EACjD,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,GAAG,CAAC;EAC7C,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACoB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAAC4B,UAAU,EAAEC,aAAa,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC8B,WAAW,EAAEC,cAAc,CAAC,GAAG/B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACgC,YAAY,EAAEC,eAAe,CAAC,GAAGjC,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACkC,YAAY,EAAEC,eAAe,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC;EAEnD,MAAM,CAACoC,UAAU,EAAEC,aAAa,CAAC,GAAGrC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,MAAM,CAACsC,UAAU,EAAEC,aAAa,CAAC,GAAGvC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEjD,MAAM,CAACwC,OAAO,EAAEC,UAAU,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC0C,UAAU,EAAEC,aAAa,CAAC,GAAG3C,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC4C,QAAQ,EAAEC,WAAW,CAAC,GAAG7C,QAAQ,CAAC,SAAS,CAAC;EACnD,MAAM,CAAC8C,YAAY,EAAEC,eAAe,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACZ,IAAIM,KAAK,EAAE;MACP,MAAM2C,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM;QAClBrC,WAAW,CAACmC,MAAM,CAACG,MAAM,CAAC;MAC9B,CAAC;MACDH,MAAM,CAACI,aAAa,CAAC/C,KAAK,CAAC;IAC/B;EACJ,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEXN,SAAS,CAAC,MAAM;IACZ,MAAMsD,MAAM,GAAG5C,SAAS,CAAC6C,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC7C,UAAU,CAAC4C,GAAG,CAAC;IACf,IAAI7C,OAAO,IAAIE,QAAQ,EAAE;MACrB,MAAM6C,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACP,MAAM,GAAG,MAAM;QACfG,MAAM,CAACM,KAAK,GAAGF,GAAG,CAACE,KAAK;QACxBN,MAAM,CAACO,MAAM,GAAGH,GAAG,CAACG,MAAM;QAC1BL,GAAG,CAACM,MAAM,GAAI,cAAa/C,UAAW,eAAcE,QAAS,IAAG;QAChEuC,GAAG,CAACO,SAAS,CAACL,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QACxBvC,MAAM,CAAC6C,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;UAC7BC,SAAS,CAACX,GAAG,EAAES,KAAK,EAAEC,KAAK,KAAK7C,kBAAkB,EAAE6C,KAAK,KAAKnC,WAAW,CAAC;QAC9E,CAAC,CAAC;MACN,CAAC;MACD2B,GAAG,CAACU,GAAG,GAAGvD,QAAQ;IACtB;EACJ,CAAC,EAAE,CAACF,OAAO,EAAEE,QAAQ,EAAEE,UAAU,EAAEE,QAAQ,EAAEE,MAAM,EAAEE,kBAAkB,EAAEU,WAAW,CAAC,CAAC;EAEtF,MAAMsC,eAAe,GAAIC,CAAC,IAAK;IAC3B,MAAMhB,MAAM,GAAG5C,SAAS,CAAC6C,OAAO;IAChC,MAAMgB,IAAI,GAAGjB,MAAM,CAACkB,qBAAqB,CAAC,CAAC;IAC3C,MAAMC,MAAM,GAAGH,CAAC,CAACI,OAAO,GAAGH,IAAI,CAACI,IAAI;IACpC,MAAMC,MAAM,GAAGN,CAAC,CAACO,OAAO,GAAGN,IAAI,CAACO,GAAG;;IAEnC;IACA,IAAIL,MAAM,GAAG,CAAC,IAAIG,MAAM,GAAG,CAAC,IAAIH,MAAM,IAAInB,MAAM,CAACM,KAAK,IAAIgB,MAAM,IAAItB,MAAM,CAACO,MAAM,EAAE;MAC/E;IACJ;IAEA,IAAIpB,OAAO,EAAE;MACTjB,aAAa,CAAC,IAAI,CAAC;MACnBc,aAAa,CAACmC,MAAM,CAAC;MACrBjC,aAAa,CAACoC,MAAM,CAAC;IACzB,CAAC,MAAM;MACH,IAAIG,aAAa,GAAG,KAAK;MACzB5D,MAAM,CAAC6C,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QAC7B,IAAIc,kBAAkB,CAACP,MAAM,EAAEG,MAAM,EAAEX,KAAK,CAAC,EAAE;UAC3C3C,qBAAqB,CAAC4C,KAAK,CAAC;UAC5B1C,aAAa,CAAC,IAAI,CAAC;UACnBE,aAAa,CAAC+C,MAAM,GAAGR,KAAK,CAACgB,CAAC,CAAC;UAC/BrD,aAAa,CAACgD,MAAM,GAAGX,KAAK,CAACiB,CAAC,CAAC;UAC/BpD,aAAa,CAACqD,gBAAgB,CAACV,MAAM,EAAEG,MAAM,EAAEX,KAAK,CAAC,CAAC;UACtD,IAAIpC,UAAU,EAAE;YACZG,cAAc,CAACkC,KAAK,CAAC;YACrBhC,eAAe,CAACuC,MAAM,GAAGR,KAAK,CAACgB,CAAC,CAAC;YACjC7C,eAAe,CAACwC,MAAM,GAAGX,KAAK,CAACiB,CAAC,CAAC;UACrC;UACAH,aAAa,GAAG,IAAI;QACxB;MACJ,CAAC,CAAC;MAEF,IAAI,CAACA,aAAa,EAAE;QAChBzD,qBAAqB,CAAC,IAAI,CAAC;MAC/B;IACJ;EACJ,CAAC;EAED,MAAM8D,eAAe,GAAId,CAAC,IAAK;IAC3B,IAAI,CAAC/C,UAAU,IAAKkB,OAAO,IAAI,CAACE,UAAU,IAAItB,kBAAkB,KAAK,IAAK,EAAE;IAE5E,MAAMiC,MAAM,GAAG5C,SAAS,CAAC6C,OAAO;IAChC,MAAMgB,IAAI,GAAGjB,MAAM,CAACkB,qBAAqB,CAAC,CAAC;IAC3C,MAAMC,MAAM,GAAGH,CAAC,CAACI,OAAO,GAAGH,IAAI,CAACI,IAAI;IACpC,MAAMC,MAAM,GAAGN,CAAC,CAACO,OAAO,GAAGN,IAAI,CAACO,GAAG;IAEnC,IAAIrC,OAAO,IAAI,CAACE,UAAU,EAAE;MACxB,MAAM0C,SAAS,GAAGZ,MAAM,GAAGH,CAAC,CAACgB,SAAS;MACtC,MAAMC,SAAS,GAAGX,MAAM,GAAGN,CAAC,CAACkB,SAAS;MACtCC,WAAW,CAACJ,SAAS,EAAEE,SAAS,EAAEd,MAAM,EAAEG,MAAM,CAAC;IACrD,CAAC,MAAM;MACH,MAAMc,SAAS,GAAG,CAAC,GAAGvE,MAAM,CAAC;MAC7B,MAAM8C,KAAK,GAAGyB,SAAS,CAACrE,kBAAkB,CAAC;MAC3C,IAAI,CAACQ,UAAU,EAAE;QACboC,KAAK,CAACgB,CAAC,GAAGR,MAAM,GAAGhD,UAAU;QAC7BwC,KAAK,CAACiB,CAAC,GAAGN,MAAM,GAAGjD,UAAU;MACjC,CAAC,MAAM;QACH,MAAMgE,EAAE,GAAGlB,MAAM,GAAGR,KAAK,CAACgB,CAAC,GAAGhD,YAAY;QAC1C,MAAM2D,EAAE,GAAGhB,MAAM,GAAGX,KAAK,CAACiB,CAAC,GAAG/C,YAAY;QAC1C8B,KAAK,CAACL,KAAK,IAAI+B,EAAE;QACjB1B,KAAK,CAACJ,MAAM,IAAI+B,EAAE;QAClB1D,eAAe,CAACuC,MAAM,GAAGR,KAAK,CAACgB,CAAC,CAAC;QACjC7C,eAAe,CAACwC,MAAM,GAAGX,KAAK,CAACiB,CAAC,CAAC;MACrC;MACA9D,SAAS,CAACsE,SAAS,CAAC;IACxB;EACJ,CAAC;EAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;IACxBrE,aAAa,CAAC,KAAK,CAAC;IACpBM,aAAa,CAAC,KAAK,CAAC;EACxB,CAAC;EAGD,MAAMqD,gBAAgB,GAAGA,CAACF,CAAC,EAAEC,CAAC,EAAEjB,KAAK,KAAK;IACtC,OAAOgB,CAAC,IAAIhB,KAAK,CAACgB,CAAC,GAAGhB,KAAK,CAACL,KAAK,GAAG,EAAE,IAAIqB,CAAC,IAAIhB,KAAK,CAACgB,CAAC,GAAGhB,KAAK,CAACL,KAAK,IAChEsB,CAAC,IAAIjB,KAAK,CAACiB,CAAC,GAAGjB,KAAK,CAACJ,MAAM,GAAG,EAAE,IAAIqB,CAAC,IAAIjB,KAAK,CAACiB,CAAC,GAAGjB,KAAK,CAACJ,MAAM;EACvE,CAAC;EAED,MAAM4B,WAAW,GAAGA,CAACK,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAEC,IAAI,KAAK;IAChD,MAAM3C,MAAM,GAAG5C,SAAS,CAAC6C,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAAC0C,WAAW,GAAGvD,UAAU,GAAG,SAAS,GAAGE,QAAQ;IACnDW,GAAG,CAAC2C,SAAS,GAAGpD,YAAY;IAC5BS,GAAG,CAAC4C,OAAO,GAAG,OAAO;IACrB5C,GAAG,CAAC6C,SAAS,CAAC,CAAC;IACf7C,GAAG,CAAC8C,MAAM,CAACR,MAAM,EAAEC,MAAM,CAAC;IAC1BvC,GAAG,CAAC+C,MAAM,CAACP,IAAI,EAAEC,IAAI,CAAC;IACtBzC,GAAG,CAACgD,MAAM,CAAC,CAAC;IACZhD,GAAG,CAACiD,SAAS,CAAC,CAAC;EACnB,CAAC;EAED,MAAMtC,SAAS,GAAGA,CAACX,GAAG,EAAES,KAAK,EAAEyC,UAAU,EAAE7E,UAAU,KAAK;IACtD2B,GAAG,CAAC6C,SAAS,CAAC,CAAC;IACf7C,GAAG,CAACe,IAAI,CAACN,KAAK,CAACgB,CAAC,EAAEhB,KAAK,CAACiB,CAAC,EAAEjB,KAAK,CAACL,KAAK,EAAEK,KAAK,CAACJ,MAAM,CAAC;IACrDL,GAAG,CAAC0C,WAAW,GAAGQ,UAAU,GAAG,KAAK,GAAGzC,KAAK,CAAC0C,KAAK;IAClDnD,GAAG,CAAC2C,SAAS,GAAGlC,KAAK,CAACkC,SAAS;IAC/B3C,GAAG,CAACgD,MAAM,CAAC,CAAC;EAChB,CAAC;EAGD,MAAMI,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,IAAIvF,kBAAkB,KAAK,IAAI,EAAE;MAC7B,MAAMqE,SAAS,GAAG,CAAC,GAAGvE,MAAM,CAAC;MAC7BuE,SAAS,CAACmB,MAAM,CAACxF,kBAAkB,EAAE,CAAC,CAAC;MACvCD,SAAS,CAACsE,SAAS,CAAC;MACpBpE,qBAAqB,CAAC,IAAI,CAAC;IAC/B;EACJ,CAAC;EAID,MAAMwF,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAMxD,MAAM,GAAG5C,SAAS,CAAC6C,OAAO;IAChCD,MAAM,CAACyD,MAAM,CAACC,IAAI,IAAI;MAClBxG,MAAM,CAACwG,IAAI,CAAC;IAChB,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC;EACvB,CAAC;EAED,MAAMC,cAAc,GAAIC,IAAI,IAAK;IAC7B,MAAMxB,SAAS,GAAG,CAAC,GAAGvE,MAAM,CAAC;IAC7B,IAAI+F,IAAI,KAAK,QAAQ,EAAE;MACnBxB,SAAS,CAACyB,IAAI,CAAC;QACXD,IAAI,EAAE,QAAQ;QACdjC,CAAC,EAAE,GAAG;QACNC,CAAC,EAAE,GAAG;QACNtB,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,EAAE;QACV8C,KAAK,EAAE,KAAK;QACZR,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC,MAAM,IAAIe,IAAI,KAAK,WAAW,EAAE;MAC7BxB,SAAS,CAACyB,IAAI,CAAC;QACXD,IAAI,EAAE,WAAW;QACjBjC,CAAC,EAAE,GAAG;QACNC,CAAC,EAAE,GAAG;QACNtB,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,EAAE;QACV8C,KAAK,EAAE,MAAM;QACbR,SAAS,EAAE;MACf,CAAC,CAAC;IACN;IACA/E,SAAS,CAACsE,SAAS,CAAC;EACxB,CAAC;EAED,MAAM0B,mBAAmB,GAAIC,IAAI,IAAK;IAClC3E,UAAU,CAAC2E,IAAI,CAAC;EACpB,CAAC;EAED,MAAMC,sBAAsB,GAAID,IAAI,IAAK;IACrCzE,aAAa,CAACyE,IAAI,CAAC;EACvB,CAAC;EAGD,MAAMrC,kBAAkB,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAEjB,KAAK,KAAK;IACxC,IAAIA,KAAK,CAACiD,IAAI,KAAK,QAAQ,IAAIjD,KAAK,CAACiD,IAAI,KAAK,WAAW,EAAE;MACvD,OAAOjC,CAAC,IAAIhB,KAAK,CAACgB,CAAC,IAAIA,CAAC,IAAKhB,KAAK,CAACgB,CAAC,GAAGhB,KAAK,CAACL,KAAM,IAC/CsB,CAAC,IAAIjB,KAAK,CAACiB,CAAC,IAAIA,CAAC,IAAKjB,KAAK,CAACiB,CAAC,GAAGjB,KAAK,CAACJ,MAAO;IACrD,CAAC,MAAM,IAAII,KAAK,CAACiD,IAAI,KAAK,QAAQ,EAAE;MAChC,MAAMvB,EAAE,GAAGV,CAAC,GAAGhB,KAAK,CAACgB,CAAC;MACtB,MAAMW,EAAE,GAAGV,CAAC,GAAGjB,KAAK,CAACiB,CAAC;MACtB,OAAOS,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,IAAI3B,KAAK,CAACsD,MAAM,GAAGtD,KAAK,CAACsD,MAAM;IAC3D;IACA,OAAO,KAAK;EAChB,CAAC;EAGD,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMlE,MAAM,GAAG5C,SAAS,CAAC6C,OAAO;IAChC,MAAMgB,IAAI,GAAGjB,MAAM,CAACkB,qBAAqB,CAAC,CAAC;IAC3C,MAAMiD,OAAO,GAAGlD,IAAI,CAACX,KAAK,GAAG,CAAC;IAC9B,MAAM8D,OAAO,GAAGnD,IAAI,CAACV,MAAM,GAAG,CAAC;IAC/B,MAAM8D,UAAU,GAAG,GAAG;IACtB,MAAMjC,SAAS,GAAGvE,MAAM,CAACyG,GAAG,CAAC3D,KAAK,IAAI;MAClC,IAAIA,KAAK,CAACiD,IAAI,KAAK,QAAQ,IAAIjD,KAAK,CAACiD,IAAI,KAAK,WAAW,EAAE;QACvDjD,KAAK,CAACgB,CAAC,GAAGwC,OAAO,GAAG,CAACxD,KAAK,CAACgB,CAAC,GAAGwC,OAAO,IAAIE,UAAU;QACpD1D,KAAK,CAACiB,CAAC,GAAGwC,OAAO,GAAG,CAACzD,KAAK,CAACiB,CAAC,GAAGwC,OAAO,IAAIC,UAAU;QACpD1D,KAAK,CAACL,KAAK,IAAI+D,UAAU;QACzB1D,KAAK,CAACJ,MAAM,IAAI8D,UAAU;MAC9B,CAAC,MAAM,IAAI1D,KAAK,CAACiD,IAAI,KAAK,QAAQ,EAAE;QAChCjD,KAAK,CAACgB,CAAC,GAAGwC,OAAO,GAAG,CAACxD,KAAK,CAACgB,CAAC,GAAGwC,OAAO,IAAIE,UAAU;QACpD1D,KAAK,CAACiB,CAAC,GAAGwC,OAAO,GAAG,CAACzD,KAAK,CAACiB,CAAC,GAAGwC,OAAO,IAAIC,UAAU;QACpD1D,KAAK,CAACsD,MAAM,IAAII,UAAU;MAC9B;MACA,OAAO1D,KAAK;IAChB,CAAC,CAAC;IACF7C,SAAS,CAACsE,SAAS,CAAC;EACxB,CAAC;EAED,MAAMmC,aAAa,GAAGA,CAAA,KAAM;IACxB,MAAMvE,MAAM,GAAG5C,SAAS,CAAC6C,OAAO;IAChC,MAAMgB,IAAI,GAAGjB,MAAM,CAACkB,qBAAqB,CAAC,CAAC;IAC3C,MAAMiD,OAAO,GAAGlD,IAAI,CAACX,KAAK,GAAG,CAAC;IAC9B,MAAM8D,OAAO,GAAGnD,IAAI,CAACV,MAAM,GAAG,CAAC;IAC/B,MAAM8D,UAAU,GAAG,GAAG;IACtB,MAAMjC,SAAS,GAAGvE,MAAM,CAACyG,GAAG,CAAC3D,KAAK,IAAI;MAClCA,KAAK,CAACgB,CAAC,GAAGwC,OAAO,GAAG,CAACxD,KAAK,CAACgB,CAAC,GAAGwC,OAAO,IAAIE,UAAU;MACpD1D,KAAK,CAACiB,CAAC,GAAGwC,OAAO,GAAG,CAACzD,KAAK,CAACiB,CAAC,GAAGwC,OAAO,IAAIC,UAAU;MACpD1D,KAAK,CAACL,KAAK,IAAI+D,UAAU;MACzB1D,KAAK,CAACJ,MAAM,IAAI8D,UAAU;MAC1B,OAAO1D,KAAK;IAChB,CAAC,CAAC;IACF7C,SAAS,CAACsE,SAAS,CAAC;EACxB,CAAC;EAED,oBACItF,OAAA;IAAK0H,SAAS,EAAC,cAAc;IAAAC,QAAA,gBACzB3H,OAAA;MACI4H,GAAG,EAAEtH,SAAU;MACfuH,WAAW,EAAE5D,eAAgB;MAC7B6D,WAAW,EAAE9C,eAAgB;MAC7B+C,SAAS,EAAEtC,aAAc;MACzBuC,KAAK,EAAE;QAACC,MAAM,EAAE;MAAiB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACFrI,OAAA;MAAK0H,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACrB3H,OAAA;QAAQsI,OAAO,EAAElB,YAAa;QAAAO,QAAA,EAAC;MAAO;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/CrI,OAAA;QAAQsI,OAAO,EAAEb,aAAc;QAAAE,QAAA,EAAC;MAAQ;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjDrI,OAAA;QAAQsI,OAAO,EAAE5B,UAAW;QAAAiB,QAAA,EAAC;MAAI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1CrI,OAAA;QAAQsI,OAAO,EAAEnI,OAAQ;QAAAwH,QAAA,EAAC;MAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACvCpH,kBAAkB,KAAK,IAAI,iBACxBjB,OAAA;QAAQsI,OAAO,EAAE9B,iBAAkB;QAACwB,KAAK,EAAE;UACvCO,QAAQ,EAAE,UAAU;UACpB7D,GAAG,EAAE3D,MAAM,CAACE,kBAAkB,CAAC,CAAC6D,CAAC,GAAG,EAAE;UACtCP,IAAI,EAAExD,MAAM,CAACE,kBAAkB,CAAC,CAAC4D,CAAC,GAAG9D,MAAM,CAACE,kBAAkB,CAAC,CAACuC,KAAK,GAAG;QAC5E,CAAE;QAAAmE,QAAA,EAAC;MAAC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACf;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAENrI,OAAA,CAACF,WAAW;MACR0I,kBAAkB,EAAE5H,aAAc;MAClC6H,gBAAgB,EAAE3H,WAAY;MAC9B4H,cAAc,EAAEA,CAAA,KAAM7B,cAAc,CAAC,WAAW,CAAE;MAClD8B,eAAe,EAAE3B,mBAAoB;MACrC4B,kBAAkB,EAAE1B,sBAAuB;MAC3C2B,gBAAgB,EAAEnG,WAAY,CAAC;MAAA;MAC/BoG,oBAAoB,EAAElG,eAAgB,CAAC;MAAA;MACvCP,OAAO,EAAEA,OAAQ;MACjBE,UAAU,EAAEA;IAAW;MAAA2F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAAChI,EAAA,CAvSQJ,WAAW;AAAA8I,EAAA,GAAX9I,WAAW;AAySpB,eAAeA,WAAW;AAAC,IAAA8I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}