{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [resizeHandleIndex, setResizeHandleIndex] = useState(null);\n  const [resizeHandleStartX, setResizeHandleStartX] = useState(0);\n  const [resizeHandleStartY, setResizeHandleStartY] = useState(0);\n  const [rotateHandleIndex, setRotateHandleIndex] = useState(null);\n  const [rotateHandleStartAngle, setRotateHandleStartAngle] = useState(0);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    setContext(ctx);\n    if (context && imageSrc) {\n      const img = new Image();\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n        ctx.drawImage(img, 0, 0);\n        shapes.forEach((shape, index) => {\n          drawShape(ctx, shape, index === selectedShapeIndex);\n        });\n      };\n      img.src = imageSrc;\n    }\n  }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex]);\n  const drawShape = (ctx, shape, isSelected) => {\n    ctx.beginPath();\n    if (shape.type === 'square' || shape.type === 'rectangle') {\n      ctx.rect(shape.x, shape.y, shape.width, shape.height);\n    } else if (shape.type === 'circle') {\n      ctx.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n    }\n    ctx.strokeStyle = isSelected ? 'red' : shape.color;\n    ctx.lineWidth = shape.lineWidth;\n    ctx.stroke();\n  };\n  const handleSave = () => {\n    const canvas = canvasRef.current;\n    canvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n  const handleMouseDown = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    shapes.forEach((shape, index) => {\n      if (isPointInsideShape(mouseX, mouseY, shape)) {\n        setSelectedShapeIndex(index);\n        setIsDragging(true);\n        setDragStartX(mouseX - shape.x);\n        setDragStartY(mouseY - shape.y);\n      }\n    });\n\n    // Check for resize handles\n    if (selectedShapeIndex !== null) {\n      const shape = shapes[selectedShapeIndex];\n      const resizeHandleIndex = getResizeHandleIndex(mouseX, mouseY, shape);\n      if (resizeHandleIndex !== null) {\n        setResizeHandleIndex(resizeHandleIndex);\n        setResizeHandleStartX(mouseX);\n        setResizeHandleStartY(mouseY);\n      }\n    }\n\n    // Check for rotate handle\n    if (selectedShapeIndex !== null && resizeHandleIndex === null) {\n      const shape = shapes[selectedShapeIndex];\n      const rotateHandleIndex = getRotateHandleIndex(mouseX, mouseY, shape);\n      if (rotateHandleIndex !== null) {\n        setRotateHandleIndex(rotateHandleIndex);\n        setRotateHandleStartAngle(Math.atan2(mouseY - shape.y, mouseX - shape.x));\n      }\n    }\n  };\n  const handleMouseMove = e => {\n    if (!isDragging || selectedShapeIndex === null) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    const newShapes = [...shapes];\n    const shape = newShapes[selectedShapeIndex];\n    if (shape.type === 'square' || shape.type === 'rectangle') {\n      if (resizeHandleIndex !== null) {\n        const dx = mouseX - resizeHandleStartX;\n        const dy = mouseY - resizeHandleStartY;\n        if (resizeHandleIndex === 0) {\n          shape.x += dx;\n          shape.y += dy;\n          shape.width -= dx;\n          shape.height -= dy;\n        } else if (resizeHandleIndex === 1) {\n          shape.y += dy;\n          shape.height -= dy;\n        } else if (resizeHandleIndex === 2) {\n          shape.width += dx;\n          shape.y += dy;\n          shape.height -= dy;\n        } else if (resizeHandleIndex === 3) {\n          shape.width += dx;\n        } else if (resizeHandleIndex === 4) {\n          shape.width += dx;\n          shape.height += dy;\n        } else if (resizeHandleIndex === 5) {\n          shape.height += dy;\n        } else if (resizeHandleIndex === 6) {\n          shape.x += dx;\n          shape.width -= dx;\n          shape.height += dy;\n        } else if (resizeHandleIndex === 7) {\n          shape.x += dx;\n          shape.width -= dx;\n        }\n        setResizeHandleStartX(mouseX);\n        setResizeHandleStartY(mouseY);\n      } else {\n        shape.x = mouseX - dragStartX;\n        shape.y = mouseY - dragStartY;\n      }\n    } else if (shape.type === 'circle') {\n      if (resizeHandleIndex !== null) {\n        const dx = mouseX - shape.x;\n        const dy = mouseY - shape.y;\n        const newRadius = Math.sqrt(dx * dx + dy * dy);\n        shape.radius = newRadius > 0 ? newRadius : 1;\n      } else if (rotateHandleIndex !== null) {\n        const angle = Math.atan2(mouseY - shape.y, mouseX - shape.x);\n        const angleChange = angle - rotateHandleStartAngle;\n        const newAngle = shape.angle + angleChange;\n        shape.angle = newAngle;\n        setRotateHandleStartAngle(angle);\n      } else {\n        shape.x = mouseX;\n        shape.y = mouseY;\n      }\n    }\n    setShapes(newShapes);\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setResizeHandleIndex(null);\n    setRotateHandleIndex(null);\n  };\n  const isPointInsideShape = (x, y, shape) => {\n    if (shape.type === 'square' || shape.type === 'rectangle') {\n      return x >= shape.x && x <= shape.x + shape.width && y >= shape.y && y <= shape.y + shape.height;\n    } else if (shape.type === 'circle') {\n      const dx = x - shape.x;\n      const dy = y - shape.y;\n      return dx * dx + dy * dy <= shape.radius * shape.radius;\n    }\n    return false;\n  };\n  const getResizeHandleIndex = (x, y, shape) => {\n    if (shape.type === 'square' || shape.type === 'rectangle') {\n      const resizeHandles = [[shape.x, shape.y],\n      // Top left\n      [shape.x + shape.width / 2, shape.y],\n      // Top center\n      [shape.x + shape.width, shape.y],\n      // Top right\n      [shape.x + shape.width, shape.y + shape.height / 2],\n      // Middle right\n      [shape.x + shape.width, shape.y + shape.height],\n      // Bottom right\n      [shape.x + shape.width / 2, shape.y + shape.height],\n      // Bottom center\n      [shape.x, shape.y + shape.height],\n      // Bottom left\n      [shape.x, shape.y + shape.height / 2] // Middle left\n      ];\n      for (let i = 0; i < resizeHandles.length; i++) {\n        const handle = resizeHandles[i];\n        if (x >= handle[0] - 5 && x <= handle[0] + 5 && y >= handle[1] - 5 && y <= handle[1] + 5) {\n          return i;\n        }\n      }\n    }\n    return null;\n  };\n  const getRotateHandleIndex = (x, y, shape) => {\n    if (shape.type === 'circle') {\n      const angle = Math.atan2(y - shape.y, x - shape.x);\n      const handleX = shape.x + shape.radius * Math.cos(angle);\n      const handleY = shape.y + shape.radius * Math.sin(angle);\n      if (x >= handleX - 5 && x <= handleX + 5 && y >= handleY - 5 && y <= handleY + 5) {\n        return 0;\n      }\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      style: {\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"N0GfPqHLmrfqkWsHMVQos9vxeuE=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","canvasRef","context","setContext","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDragging","setIsDragging","dragStartX","setDragStartX","dragStartY","setDragStartY","resizeHandleIndex","setResizeHandleIndex","resizeHandleStartX","setResizeHandleStartX","resizeHandleStartY","setResizeHandleStartY","rotateHandleIndex","setRotateHandleIndex","rotateHandleStartAngle","setRotateHandleStartAngle","reader","FileReader","onload","result","readAsDataURL","canvas","current","ctx","getContext","img","Image","width","height","filter","drawImage","forEach","shape","index","drawShape","src","isSelected","beginPath","type","rect","x","y","arc","radius","Math","PI","strokeStyle","color","lineWidth","stroke","handleSave","toBlob","blob","handleMouseDown","e","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","isPointInsideShape","getResizeHandleIndex","getRotateHandleIndex","atan2","handleMouseMove","newShapes","dx","dy","newRadius","sqrt","angle","angleChange","newAngle","handleMouseUp","resizeHandles","i","length","handle","handleX","cos","handleY","sin","className","children","ref","onMouseDown","onMouseMove","onMouseUp","style","border","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onBrightnessChange","onContrastChange","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const canvasRef = useRef(null);\n    const [context, setContext] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [dragStartX, setDragStartX] = useState(0);\n    const [dragStartY, setDragStartY] = useState(0);\n    const [resizeHandleIndex, setResizeHandleIndex] = useState(null);\n    const [resizeHandleStartX, setResizeHandleStartX] = useState(0);\n    const [resizeHandleStartY, setResizeHandleStartY] = useState(0);\n    const [rotateHandleIndex, setRotateHandleIndex] = useState(null);\n    const [rotateHandleStartAngle, setRotateHandleStartAngle] = useState(0);\n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        setContext(ctx);\n        if (context && imageSrc) {\n            const img = new Image();\n            img.onload = () => {\n                canvas.width = img.width;\n                canvas.height = img.height;\n                ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                ctx.drawImage(img, 0, 0);\n                shapes.forEach((shape, index) => {\n                    drawShape(ctx, shape, index === selectedShapeIndex);\n                });\n            };\n            img.src = imageSrc;\n        }\n    }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex]);\n\n    const drawShape = (ctx, shape, isSelected) => {\n        ctx.beginPath();\n        if (shape.type === 'square' || shape.type === 'rectangle') {\n            ctx.rect(shape.x, shape.y, shape.width, shape.height);\n        } else if (shape.type === 'circle') {\n            ctx.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n        }\n        ctx.strokeStyle = isSelected ? 'red' : shape.color;\n        ctx.lineWidth = shape.lineWidth;\n        ctx.stroke();\n    };\n\n    const handleSave = () => {\n        const canvas = canvasRef.current;\n        canvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n\n    const handleMouseDown = (e) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        shapes.forEach((shape, index) => {\n            if (isPointInsideShape(mouseX, mouseY, shape)) {\n                setSelectedShapeIndex(index);\n                setIsDragging(true);\n                setDragStartX(mouseX - shape.x);\n                setDragStartY(mouseY - shape.y);\n            }\n        });\n\n        // Check for resize handles\n        if (selectedShapeIndex !== null) {\n            const shape = shapes[selectedShapeIndex];\n            const resizeHandleIndex = getResizeHandleIndex(mouseX, mouseY, shape);\n            if (resizeHandleIndex !== null) {\n                setResizeHandleIndex(resizeHandleIndex);\n                setResizeHandleStartX(mouseX);\n                setResizeHandleStartY(mouseY);\n            }\n        }\n\n        // Check for rotate handle\n        if (selectedShapeIndex !== null && resizeHandleIndex === null) {\n            const shape = shapes[selectedShapeIndex];\n            const rotateHandleIndex = getRotateHandleIndex(mouseX, mouseY, shape);\n            if (rotateHandleIndex !== null) {\n                setRotateHandleIndex(rotateHandleIndex);\n                setRotateHandleStartAngle(Math.atan2(mouseY - shape.y, mouseX - shape.x));\n            }\n        }\n    };\n\n    const handleMouseMove = (e) => {\n        if (!isDragging || selectedShapeIndex === null) return;\n\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        const newShapes = [...shapes];\n        const shape = newShapes[selectedShapeIndex];\n        if (shape.type === 'square' || shape.type === 'rectangle') {\n            if (resizeHandleIndex !== null) {\n                const dx = mouseX - resizeHandleStartX;\n                const dy = mouseY - resizeHandleStartY;\n                if (resizeHandleIndex === 0) {\n                    shape.x += dx;\n                    shape.y += dy;\n                    shape.width -= dx;\n                    shape.height -= dy;\n                } else if (resizeHandleIndex === 1) {\n                    shape.y += dy;\n                    shape.height -= dy;\n                } else if (resizeHandleIndex === 2) {\n                    shape.width += dx;\n                    shape.y += dy;\n                    shape.height -= dy;\n                } else if (resizeHandleIndex === 3) {\n                    shape.width += dx;\n                } else if (resizeHandleIndex === 4) {\n                    shape.width += dx;\n                    shape.height += dy;\n                } else if (resizeHandleIndex === 5) {\n                    shape.height += dy;\n                } else if (resizeHandleIndex === 6) {\n                    shape.x += dx;\n                    shape.width -= dx;\n                    shape.height += dy;\n                } else if (resizeHandleIndex === 7) {\n                    shape.x += dx;\n                    shape.width -= dx;\n                }\n                setResizeHandleStartX(mouseX);\n                setResizeHandleStartY(mouseY);\n            } else {\n                shape.x = mouseX - dragStartX;\n                shape.y = mouseY - dragStartY;\n            }\n        } else if (shape.type === 'circle') {\n            if (resizeHandleIndex !== null) {\n                const dx = mouseX - shape.x;\n                const dy = mouseY - shape.y;\n                const newRadius = Math.sqrt(dx * dx + dy * dy);\n                shape.radius = newRadius > 0 ? newRadius : 1;\n            } else if (rotateHandleIndex !== null) {\n                const angle = Math.atan2(mouseY - shape.y, mouseX - shape.x);\n                const angleChange = angle - rotateHandleStartAngle;\n                const newAngle = shape.angle + angleChange;\n                shape.angle = newAngle;\n                setRotateHandleStartAngle(angle);\n            } else {\n                shape.x = mouseX;\n                shape.y = mouseY;\n            }\n        }\n        setShapes(newShapes);\n    };\n\n    const handleMouseUp = () => {\n        setIsDragging(false);\n        setResizeHandleIndex(null);\n        setRotateHandleIndex(null);\n    };\n\n    const isPointInsideShape = (x, y, shape) => {\n        if (shape.type === 'square' || shape.type === 'rectangle') {\n            return x >= shape.x && x <= (shape.x + shape.width) &&\n                y >= shape.y && y <= (shape.y + shape.height);\n        } else if (shape.type === 'circle') {\n            const dx = x - shape.x;\n            const dy = y - shape.y;\n            return dx * dx + dy * dy <= shape.radius * shape.radius;\n        }\n        return false;\n    };\n\n    const getResizeHandleIndex = (x, y, shape) => {\n        if (shape.type === 'square' || shape.type === 'rectangle') {\n            const resizeHandles = [\n                [shape.x, shape.y], // Top left\n                [shape.x + shape.width / 2, shape.y], // Top center\n                [shape.x + shape.width, shape.y], // Top right\n                [shape.x + shape.width, shape.y + shape.height / 2], // Middle right\n                [shape.x + shape.width, shape.y + shape.height], // Bottom right\n                [shape.x + shape.width / 2, shape.y + shape.height], // Bottom center\n                [shape.x, shape.y + shape.height], // Bottom left\n                [shape.x, shape.y + shape.height / 2], // Middle left\n            ];\n            for (let i = 0; i < resizeHandles.length; i++) {\n                const handle = resizeHandles[i];\n                if (x >= handle[0] - 5 && x <= handle[0] + 5 &&\n                    y >= handle[1] - 5 && y <= handle[1] + 5) {\n                    return i;\n                }\n            }\n        }\n        return null;\n    };\n\n    const getRotateHandleIndex = (x, y, shape) => {\n        if (shape.type === 'circle') {\n            const angle = Math.atan2(y - shape.y, x - shape.x);\n            const handleX = shape.x + shape.radius * Math.cos(angle);\n            const handleY = shape.y + shape.radius * Math.sin(angle);\n            if (x >= handleX - 5 && x <= handleX + 5 &&\n                y >= handleY - 5 && y <= handleY + 5) {\n                return 0;\n            }\n        }\n        return null;\n    };\n\n    return (\n        <div className=\"image-viewer\">\n            <canvas\n                ref={canvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                style={{ border: '1px solid black' }}\n            />\n            <div className=\"controls\">\n                <button onClick={handleSave}>Save</button>\n                <button onClick={onClose}>Close</button>\n            </div>\n            <SideToolbar\n                onBrightnessChange={setBrightness}\n                onContrastChange={setContrast}\n            />\n        </div>\n    );\n}\n\nexport default ImageViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}