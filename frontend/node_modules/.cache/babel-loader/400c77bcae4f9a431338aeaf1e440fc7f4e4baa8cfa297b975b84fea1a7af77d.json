{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageEditor/ImageEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageEditor.css';\nimport ImageViewer from '../ImageViewer/ImageViewer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageEditor({\n  images,\n  onSave\n}) {\n  _s();\n  const containerRef = useRef(null);\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const [maxImageSize, setMaxImageSize] = useState(0);\n  const [selectedImageIndex, setSelectedImageIndex] = useState(null);\n  const [numRows, setNumRows] = useState(1);\n  useEffect(() => {\n    const updateContainerSize = () => {\n      const container = containerRef.current;\n      if (container) {\n        setContainerWidth(container.offsetWidth);\n        setContainerHeight(container.offsetHeight);\n      }\n    };\n    window.addEventListener('resize', updateContainerSize);\n    updateContainerSize();\n    return () => {\n      window.removeEventListener('resize', updateContainerSize);\n    };\n  }, []);\n  useEffect(() => {\n    const calculateMaxImageSize = () => {\n      const numImages = images.length;\n      const maxRowImages = Math.floor(containerWidth / 300); // Adjust 300 as needed for desired image width\n      const maxColImages = Math.floor(containerHeight / 300); // Adjust 300 as needed for desired image height\n      const maxImagesPerPage = maxRowImages * maxColImages;\n      const numRows = Math.ceil(numImages / maxRowImages);\n      setNumRows(numRows);\n      const width = containerWidth / maxRowImages;\n      const height = containerHeight / numRows;\n      return Math.min(width, height);\n    };\n    setMaxImageSize(calculateMaxImageSize());\n  }, [containerWidth, containerHeight, images]);\n  const handleImageClick = index => {\n    setSelectedImageIndex(index);\n  };\n  const handleCloseViewer = () => {\n    setSelectedImageIndex(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-editor\",\n    ref: containerRef,\n    children: [images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      style: {\n        width: maxImageSize,\n        height: maxImageSize\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(image),\n        alt: `Image ${index}`,\n        className: \"image-item\",\n        onClick: () => handleImageClick(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this)), selectedImageIndex !== null && /*#__PURE__*/_jsxDEV(ImageViewer, {\n      image: images[selectedImageIndex],\n      onClose: handleCloseViewer,\n      onSave: onSave // Pass onSave function to ImageViewer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageEditor, \"59B9xgq7KfF2eBm8vrPmrCe1aT4=\");\n_c = ImageEditor;\nexport default ImageEditor;\nvar _c;\n$RefreshReg$(_c, \"ImageEditor\");","map":{"version":3,"names":["React","useRef","useEffect","useState","ImageViewer","jsxDEV","_jsxDEV","ImageEditor","images","onSave","_s","containerRef","containerWidth","setContainerWidth","containerHeight","setContainerHeight","maxImageSize","setMaxImageSize","selectedImageIndex","setSelectedImageIndex","numRows","setNumRows","updateContainerSize","container","current","offsetWidth","offsetHeight","window","addEventListener","removeEventListener","calculateMaxImageSize","numImages","length","maxRowImages","Math","floor","maxColImages","maxImagesPerPage","ceil","width","height","min","handleImageClick","index","handleCloseViewer","className","ref","children","map","image","style","src","URL","createObjectURL","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onClose","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageEditor/ImageEditor.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageEditor.css';\nimport ImageViewer from '../ImageViewer/ImageViewer';\n\nfunction ImageEditor({ images, onSave }) {\n    const containerRef = useRef(null);\n    const [containerWidth, setContainerWidth] = useState(0);\n    const [containerHeight, setContainerHeight] = useState(0);\n    const [maxImageSize, setMaxImageSize] = useState(0);\n    const [selectedImageIndex, setSelectedImageIndex] = useState(null);\n    const [numRows, setNumRows] = useState(1);\n\n    useEffect(() => {\n        const updateContainerSize = () => {\n            const container = containerRef.current;\n            if (container) {\n                setContainerWidth(container.offsetWidth);\n                setContainerHeight(container.offsetHeight);\n            }\n        };\n\n        window.addEventListener('resize', updateContainerSize);\n        updateContainerSize();\n\n        return () => {\n            window.removeEventListener('resize', updateContainerSize);\n        };\n    }, []);\n\n    useEffect(() => {\n        const calculateMaxImageSize = () => {\n            const numImages = images.length;\n            const maxRowImages = Math.floor(containerWidth / 300); // Adjust 300 as needed for desired image width\n            const maxColImages = Math.floor(containerHeight / 300); // Adjust 300 as needed for desired image height\n            const maxImagesPerPage = maxRowImages * maxColImages;\n            const numRows = Math.ceil(numImages / maxRowImages);\n            setNumRows(numRows);\n\n            const width = containerWidth / maxRowImages;\n            const height = containerHeight / numRows;\n            return Math.min(width, height);\n        };\n\n        setMaxImageSize(calculateMaxImageSize());\n    }, [containerWidth, containerHeight, images]);\n\n    const handleImageClick = (index) => {\n        setSelectedImageIndex(index);\n    };\n\n    const handleCloseViewer = () => {\n        setSelectedImageIndex(null);\n    };\n\n    return (\n        <div className=\"image-editor\" ref={containerRef}>\n            {images.map((image, index) => (\n                <div key={index} className=\"image-container\" style={{ width: maxImageSize, height: maxImageSize }}>\n                    <img\n                        src={URL.createObjectURL(image)}\n                        alt={`Image ${index}`}\n                        className=\"image-item\"\n                        onClick={() => handleImageClick(index)}\n                    />\n                </div>\n            ))}\n            {selectedImageIndex !== null && (\n                <ImageViewer\n                    image={images[selectedImageIndex]}\n                    onClose={handleCloseViewer}\n                    onSave={onSave} // Pass onSave function to ImageViewer\n                />\n            )}\n        </div>\n    );\n}\n\nexport default ImageEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}