{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/x-ray-editor/frontend/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport axios from 'axios';\nimport DiagnosisModal from '../DiagnosisModal/DiagnosisModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const imageCanvasRef = useRef(null);\n  const drawingCanvasRef = useRef(null);\n  const [imageContext, setImageContext] = useState(null);\n  const [drawingContext, setDrawingContext] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeIndex, setResizeIndex] = useState(-1);\n  const [resizeStartX, setResizeStartX] = useState(0);\n  const [resizeStartY, setResizeStartY] = useState(0);\n  const [prevMouseX, setPrevMouseX] = useState(0);\n  const [prevMouseY, setPrevMouseY] = useState(0);\n  const [zoomLevel, setZoomLevel] = useState(1.0);\n  const [penMode, setPenMode] = useState(false);\n  const [rubberMode, setRubberMode] = useState(false);\n  const [penColor, setPenColor] = useState('#000000');\n  const [penThickness, setPenThickness] = useState(2);\n  const [imagePositionX, setImagePositionX] = useState(0);\n  const [imagePositionY, setImagePositionY] = useState(0);\n  const [isDraggingImage, setIsDraggingImage] = useState(false);\n  const [dragImageStartX, setDragImageStartX] = useState(0);\n  const [dragImageStartY, setDragImageStartY] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [showDiagnosisModal, setShowDiagnosisModal] = useState(false);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const imageCanvas = imageCanvasRef.current;\n    const ctx = imageCanvas.getContext('2d');\n    setImageContext(ctx);\n  }, []);\n  useEffect(() => {\n    const drawingCanvas = drawingCanvasRef.current;\n    const ctx = drawingCanvas.getContext('2d');\n    setDrawingContext(ctx);\n  }, []);\n  useEffect(() => {\n    if (image && imageCanvasRef.current && drawingCanvasRef.current) {\n      console.log(image);\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n        const img = new Image();\n        img.onload = () => {\n          const {\n            width,\n            height\n          } = img;\n          const imageCanvas = imageCanvasRef.current;\n          const drawingCanvas = drawingCanvasRef.current;\n          const imageCtx = imageCanvas.getContext('2d');\n          const drawingCtx = drawingCanvas.getContext('2d');\n          imageCanvas.width = width;\n          imageCanvas.height = height;\n          drawingCanvas.width = width;\n          drawingCanvas.height = height;\n          setImageContext(imageCtx);\n          setDrawingContext(drawingCtx);\n          imageCtx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n          imageCtx.drawImage(img, 0, 0, width, height);\n          shapes.forEach((shape, index) => {\n            drawShape(drawingCtx, shape, index === selectedShapeIndex, index === resizeIndex);\n          });\n        };\n        img.src = reader.result;\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n  const handleMouseDown = e => {\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = (e.clientX - rect.left) / zoomLevel;\n    const mouseY = (e.clientY - rect.top) / zoomLevel;\n    if (penMode || rubberMode) {\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else {\n      let shapeSelected = false;\n      shapes.forEach((shape, index) => {\n        if (isPointInsideShape(mouseX, mouseY, shape)) {\n          setSelectedShapeIndex(index);\n          setIsDragging(true);\n          setDragStartX(mouseX - shape.x);\n          setDragStartY(mouseY - shape.y);\n          setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n          if (isResizing) {\n            setResizeIndex(index);\n            setResizeStartX(mouseX - shape.x);\n            setResizeStartY(mouseY - shape.y);\n          }\n          shapeSelected = true;\n        }\n      });\n      if (!shapeSelected) {\n        setSelectedShapeIndex(null);\n      }\n    }\n  };\n  const handleMouseMove = e => {\n    if (!isDragging || penMode && !rubberMode && !isDragging) return;\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = (e.clientX - rect.left) / zoomLevel;\n    const mouseY = (e.clientY - rect.top) / zoomLevel;\n    if (penMode) {\n      drawingContext.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n      drawingContext.lineWidth = penThickness;\n      drawingContext.lineCap = 'round';\n      drawingContext.beginPath();\n      drawingContext.moveTo(prevMouseX, prevMouseY);\n      drawingContext.lineTo(mouseX, mouseY);\n      drawingContext.stroke();\n      drawingContext.closePath();\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n      drawingContext.globalCompositeOperation = 'destination-out';\n      drawingContext.beginPath();\n      drawingContext.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n      drawingContext.fill();\n    } else {\n      const newShapes = [...shapes];\n      const shape = newShapes[selectedShapeIndex];\n      if (!isResizing) {\n        shape.x = mouseX - dragStartX;\n        shape.y = mouseY - dragStartY;\n      } else {\n        const dx = mouseX - shape.x - resizeStartX;\n        const dy = mouseY - shape.y - resizeStartY;\n        shape.width += dx;\n        shape.height += dy;\n        setResizeStartX(mouseX - shape.x);\n        setResizeStartY(mouseY - shape.y);\n      }\n      setShapes(newShapes);\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setIsResizing(false);\n  };\n  const isResizingHandle = (x, y, shape) => {\n    return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width && y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n  };\n  const drawShape = (ctx, shape, isSelected, isResizing) => {\n    ctx.beginPath();\n    ctx.rect(shape.x, shape.y, shape.width, shape.height);\n    ctx.strokeStyle = isSelected ? 'red' : shape.color;\n    ctx.lineWidth = shape.lineWidth;\n    ctx.stroke();\n  };\n  const handleDeleteShape = () => {\n    if (selectedShapeIndex !== null) {\n      const newShapes = [...shapes];\n      newShapes.splice(selectedShapeIndex, 1);\n      setShapes(newShapes);\n      setSelectedShapeIndex(null);\n    }\n  };\n  const handleSave = () => {\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    const mergedCanvas = document.createElement('canvas');\n    const mergedCtx = mergedCanvas.getContext('2d');\n    mergedCanvas.width = imageCanvas.width;\n    mergedCanvas.height = imageCanvas.height;\n    mergedCtx.drawImage(imageCanvas, 0, 0);\n    mergedCtx.drawImage(drawingCanvas, 0, 0);\n    mergedCanvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n  const handleAddShape = type => {\n    setRubberMode(false);\n    const newShapes = [...shapes];\n    if (type === 'square') {\n      newShapes.push({\n        type: 'square',\n        x: 100,\n        y: 100,\n        width: 50,\n        height: 50,\n        color: 'red',\n        lineWidth: 2\n      });\n    } else if (type === 'rectangle') {\n      newShapes.push({\n        type: 'rectangle',\n        x: 200,\n        y: 200,\n        width: 80,\n        height: 40,\n        color: 'blue',\n        lineWidth: 2\n      });\n    }\n    setShapes(newShapes);\n  };\n  const handleZoomIn = () => {\n    const newZoomLevel = zoomLevel * 1.2;\n    setZoomLevel(newZoomLevel);\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    imageCanvas.style.transform = `scale(${newZoomLevel})`;\n    drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n  };\n  const handleZoomOut = () => {\n    const newZoomLevel = zoomLevel / 1.2;\n    setZoomLevel(newZoomLevel);\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    imageCanvas.style.transform = `scale(${newZoomLevel})`;\n    drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n  };\n  const togglePenMode = () => {\n    if (!penMode) {\n      setRubberMode(false); // Disable rubber mode when switching to pen mode\n      setIsDragging(false); // Reset dragging state\n      setPrevMouseX(0); // Reset prevMouseX\n      setPrevMouseY(0); // Reset prevMouseY\n\n      // Reset canvas context settings\n      const canvas = drawingCanvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.globalCompositeOperation = 'source-over'; // Reset composite operation\n      ctx.strokeStyle = penColor; // Reset stroke color\n      ctx.lineWidth = penThickness; // Reset line width\n    }\n    setPenMode(!penMode); // Toggle pen mode\n  };\n  const handleToggleRubberMode = () => {\n    togglePenMode();\n    setRubberMode(!rubberMode);\n    setPenMode(false);\n  };\n  const isPointInsideShape = (x, y, shape) => {\n    if (shape.type === 'rectangle') {\n      return x >= shape.x && x <= shape.x + shape.width && y >= shape.y && y <= shape.y + shape.height;\n    }\n    return false;\n  };\n  const handleTogglePenMode = () => {\n    togglePenMode();\n    setPenMode(!penMode);\n    setRubberMode(false);\n  };\n  const handleImageMouseDown = e => {\n    const canvas = imageCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = (e.clientX - rect.left) / zoomLevel; // Calculate mouseX relative to zoom level\n    const mouseY = (e.clientY - rect.top) / zoomLevel; // Calculate mouseY relative to zoom level\n\n    setIsDraggingImage(true);\n    setDragImageStartX(mouseX);\n    setDragImageStartY(mouseY);\n  };\n  const handleImageMouseMove = e => {\n    if (!isDraggingImage) return;\n    const canvas = imageCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = (e.clientX - rect.left) / zoomLevel; // Calculate mouseX relative to zoom level\n    const mouseY = (e.clientY - rect.top) / zoomLevel; // Calculate mouseY relative to zoom level\n\n    const deltaX = mouseX - dragImageStartX;\n    const deltaY = mouseY - dragImageStartY;\n    setImagePositionX(prevX => prevX + deltaX);\n    setImagePositionY(prevY => prevY + deltaY);\n    setDragImageStartX(mouseX);\n    setDragImageStartY(mouseY);\n    const drawingCanvas = drawingCanvasRef.current;\n    drawingCanvas.style.transform = `scale(${zoomLevel}) translate(${imagePositionX}px, ${imagePositionY}px)`;\n  };\n  const handleImageMouseUp = () => {\n    setIsDraggingImage(false);\n  };\n\n  // Modify the image canvas style to apply translation for moving the image\n  const imageCanvasStyle = {\n    position: 'absolute',\n    transform: `scale(${zoomLevel}) translate(${imagePositionX}px, ${imagePositionY}px)`\n  };\n  const handleSubmit = async () => {\n    setLoading(true);\n    if (image) {\n      const formData = new FormData();\n      formData.append('image', image);\n      try {\n        const response = await axios.post('http://127.0.0.1:5000/process_image', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          },\n          responseType: 'blob' // Set responseType to blob to receive image data as Blob\n        });\n        console.log('Response from server:', response);\n        if (response.status === 200) {\n          // Check if response status is OK\n          const blob = new Blob([response.data], {\n            type: 'image/png'\n          });\n          const img = new Image();\n          img.onload = () => {\n            const canvas = imageCanvasRef.current;\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n          };\n          img.onerror = error => {\n            console.error('Error loading image:', error);\n          };\n          img.src = URL.createObjectURL(blob); // Use URL.createObjectURL to create a URL for the blob\n        } else {\n          console.error('Error processing image. Status:', response.status);\n        }\n      } catch (error) {\n        console.error('Error processing image:', error);\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      console.error('No image available in props');\n    }\n  };\n  const handleOpenDiagnosisModal = () => {\n    setShowDiagnosisModal(true);\n  };\n  const handleCloseDiagnosisModal = () => {\n    setShowDiagnosisModal(false);\n  };\n  const handleSaveDiagnosis = diagnosis => {\n    // Perform any necessary action with the diagnosis, such as sending it to the server\n    console.log(\"Diagnosis saved:\", diagnosis);\n    // Close the diagnosis modal\n    setShowDiagnosisModal(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: imageCanvasRef,\n      onMouseDown: handleImageMouseDown,\n      onMouseMove: handleImageMouseMove,\n      onMouseUp: handleImageMouseUp,\n      style: imageCanvasStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: drawingCanvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      style: {\n        position: 'absolute'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        children: \"Zoom In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        children: \"Zoom Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOpenDiagnosisModal,\n        children: \"Write Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"AI Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 17\n      }, this), selectedShapeIndex !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteShape,\n        style: {\n          position: 'absolute',\n          top: shapes[selectedShapeIndex].y - 50,\n          left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast,\n      onAddRectangle: () => handleAddShape('rectangle'),\n      onTogglePenMode: handleTogglePenMode,\n      onToggleRubberMode: handleToggleRubberMode,\n      onPenColorChange: setPenColor,\n      onPenThicknessChange: setPenThickness,\n      penMode: penMode,\n      rubberMode: rubberMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 13\n    }, this), showDiagnosisModal && /*#__PURE__*/_jsxDEV(DiagnosisModal, {\n      onSave: handleSaveDiagnosis,\n      onCancel: handleCloseDiagnosisModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 17\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please wait, AI model is processing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 417,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"fJeDE/Qk+8Gxbg5MU3bGG/MJSXA=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","axios","DiagnosisModal","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","imageCanvasRef","drawingCanvasRef","imageContext","setImageContext","drawingContext","setDrawingContext","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDragging","setIsDragging","dragStartX","setDragStartX","dragStartY","setDragStartY","isResizing","setIsResizing","resizeIndex","setResizeIndex","resizeStartX","setResizeStartX","resizeStartY","setResizeStartY","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","zoomLevel","setZoomLevel","penMode","setPenMode","rubberMode","setRubberMode","penColor","setPenColor","penThickness","setPenThickness","imagePositionX","setImagePositionX","imagePositionY","setImagePositionY","isDraggingImage","setIsDraggingImage","dragImageStartX","setDragImageStartX","dragImageStartY","setDragImageStartY","loading","setLoading","showDiagnosisModal","setShowDiagnosisModal","reader","FileReader","onload","result","readAsDataURL","imageCanvas","current","ctx","getContext","drawingCanvas","console","log","img","Image","width","height","imageCtx","drawingCtx","filter","drawImage","forEach","shape","index","drawShape","src","handleMouseDown","e","canvas","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","shapeSelected","isPointInsideShape","x","y","isResizingHandle","handleMouseMove","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","closePath","globalCompositeOperation","arc","Math","PI","fill","newShapes","dx","dy","handleMouseUp","isSelected","color","handleDeleteShape","splice","handleSave","mergedCanvas","document","createElement","mergedCtx","toBlob","blob","handleAddShape","type","push","handleZoomIn","newZoomLevel","style","transform","handleZoomOut","togglePenMode","handleToggleRubberMode","handleTogglePenMode","handleImageMouseDown","handleImageMouseMove","deltaX","deltaY","prevX","prevY","handleImageMouseUp","imageCanvasStyle","position","handleSubmit","formData","FormData","append","response","post","headers","responseType","status","Blob","data","clearRect","onerror","error","URL","createObjectURL","handleOpenDiagnosisModal","handleCloseDiagnosisModal","handleSaveDiagnosis","diagnosis","className","children","ref","onMouseDown","onMouseMove","onMouseUp","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onBrightnessChange","onContrastChange","onAddRectangle","onTogglePenMode","onToggleRubberMode","onPenColorChange","onPenThicknessChange","onCancel","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/x-ray-editor/frontend/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport axios from 'axios';\nimport DiagnosisModal from '../DiagnosisModal/DiagnosisModal'\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const imageCanvasRef = useRef(null);\n    const drawingCanvasRef = useRef(null);\n    const [imageContext, setImageContext] = useState(null);\n    const [drawingContext, setDrawingContext] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [dragStartX, setDragStartX] = useState(0);\n    const [dragStartY, setDragStartY] = useState(0);\n    const [isResizing, setIsResizing] = useState(false);\n    const [resizeIndex, setResizeIndex] = useState(-1);\n    const [resizeStartX, setResizeStartX] = useState(0);\n    const [resizeStartY, setResizeStartY] = useState(0);\n    const [prevMouseX, setPrevMouseX] = useState(0);\n    const [prevMouseY, setPrevMouseY] = useState(0);\n    const [zoomLevel, setZoomLevel] = useState(1.0);\n\n    const [penMode, setPenMode] = useState(false);\n    const [rubberMode, setRubberMode] = useState(false);\n    const [penColor, setPenColor] = useState('#000000');\n    const [penThickness, setPenThickness] = useState(2);\n\n    const [imagePositionX, setImagePositionX] = useState(0);\n    const [imagePositionY, setImagePositionY] = useState(0);\n    const [isDraggingImage, setIsDraggingImage] = useState(false);\n    const [dragImageStartX, setDragImageStartX] = useState(0);\n    const [dragImageStartY, setDragImageStartY] = useState(0);\n\n    const [loading, setLoading] = useState(false);\n    const [showDiagnosisModal, setShowDiagnosisModal] = useState(false);\n    \n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const imageCanvas = imageCanvasRef.current;\n        const ctx = imageCanvas.getContext('2d');\n        setImageContext(ctx);\n    }, []);\n\n    useEffect(() => {\n        const drawingCanvas = drawingCanvasRef.current;\n        const ctx = drawingCanvas.getContext('2d');\n        setDrawingContext(ctx);\n    }, []);\n\n    useEffect(() => {\n        if (image && imageCanvasRef.current && drawingCanvasRef.current) {\n            console.log(image)\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n                const img = new Image();\n                img.onload = () => {\n                    const { width, height } = img;\n                    const imageCanvas = imageCanvasRef.current;\n                    const drawingCanvas = drawingCanvasRef.current;\n                    const imageCtx = imageCanvas.getContext('2d');\n                    const drawingCtx = drawingCanvas.getContext('2d');\n                    \n                    imageCanvas.width = width;\n                    imageCanvas.height = height;\n                    drawingCanvas.width = width;\n                    drawingCanvas.height = height;\n                    \n                    setImageContext(imageCtx);\n                    setDrawingContext(drawingCtx);\n                    \n                    imageCtx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                    imageCtx.drawImage(img, 0, 0, width, height);\n                    \n                    shapes.forEach((shape, index) => {\n                        drawShape(drawingCtx, shape, index === selectedShapeIndex, index === resizeIndex);\n                    });\n                };\n                img.src = reader.result;\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n\n    const handleMouseDown = (e) => {\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = (e.clientX - rect.left) / zoomLevel;\n        const mouseY = (e.clientY - rect.top) / zoomLevel; \n\n        if (penMode || rubberMode) {\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else {\n            let shapeSelected = false;\n            shapes.forEach((shape, index) => {\n                if (isPointInsideShape(mouseX, mouseY, shape)) {\n                    setSelectedShapeIndex(index);\n                    setIsDragging(true);\n                    setDragStartX(mouseX - shape.x);\n                    setDragStartY(mouseY - shape.y);\n                    setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n                    if (isResizing) {\n                        setResizeIndex(index);\n                        setResizeStartX(mouseX - shape.x);\n                        setResizeStartY(mouseY - shape.y);\n                    }\n                    shapeSelected = true;\n                }\n            });\n\n            if (!shapeSelected) {\n                setSelectedShapeIndex(null);\n            }\n        }\n    };\n\n    const handleMouseMove = (e) => {\n        if (!isDragging || (penMode && !rubberMode && !isDragging)) return;\n\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = (e.clientX - rect.left) / zoomLevel;\n        const mouseY = (e.clientY - rect.top) / zoomLevel;\n    \n        if (penMode) {\n            drawingContext.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n            drawingContext.lineWidth = penThickness;\n            drawingContext.lineCap = 'round';\n            drawingContext.beginPath();\n            drawingContext.moveTo(prevMouseX, prevMouseY);\n            drawingContext.lineTo(mouseX, mouseY);\n            drawingContext.stroke();\n            drawingContext.closePath();\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else if (rubberMode) {\n            drawingContext.globalCompositeOperation = 'destination-out';\n            drawingContext.beginPath();\n            drawingContext.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n            drawingContext.fill();\n        } else {\n            const newShapes = [...shapes];\n            const shape = newShapes[selectedShapeIndex];\n            if (!isResizing) {\n                shape.x = mouseX - dragStartX;\n                shape.y = mouseY - dragStartY;\n            } else {\n                const dx = mouseX - shape.x - resizeStartX;\n                const dy = mouseY - shape.y - resizeStartY;\n                shape.width += dx;\n                shape.height += dy;\n                setResizeStartX(mouseX - shape.x);\n                setResizeStartY(mouseY - shape.y);\n            }\n            setShapes(newShapes);\n        }\n    };\n\n    const handleMouseUp = () => {\n        setIsDragging(false);\n        setIsResizing(false);\n    };\n\n    const isResizingHandle = (x, y, shape) => {\n        return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width &&\n            y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n    };\n\n    const drawShape = (ctx, shape, isSelected, isResizing) => {\n        ctx.beginPath();\n        ctx.rect(shape.x, shape.y, shape.width, shape.height);\n        ctx.strokeStyle = isSelected ? 'red' : shape.color;\n        ctx.lineWidth = shape.lineWidth;\n        ctx.stroke();\n    };\n\n    const handleDeleteShape = () => {\n        if (selectedShapeIndex !== null) {\n            const newShapes = [...shapes];\n            newShapes.splice(selectedShapeIndex, 1);\n            setShapes(newShapes);\n            setSelectedShapeIndex(null);\n        }\n    };\n\n    const handleSave = () => {\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n        const mergedCanvas = document.createElement('canvas');\n        const mergedCtx = mergedCanvas.getContext('2d');\n        \n        mergedCanvas.width = imageCanvas.width;\n        mergedCanvas.height = imageCanvas.height;\n        \n        mergedCtx.drawImage(imageCanvas, 0, 0);\n        \n        mergedCtx.drawImage(drawingCanvas, 0, 0);\n        \n        mergedCanvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n\n    const handleAddShape = (type) => {\n        setRubberMode(false);\n        const newShapes = [...shapes];\n        if (type === 'square') {\n            newShapes.push({\n                type: 'square',\n                x: 100,\n                y: 100,\n                width: 50,\n                height: 50,\n                color: 'red',\n                lineWidth: 2,\n            });\n        } else if (type === 'rectangle') {\n            newShapes.push({\n                type: 'rectangle',\n                x: 200,\n                y: 200,\n                width: 80,\n                height: 40,\n                color: 'blue',\n                lineWidth: 2,\n            });\n        }\n        setShapes(newShapes);\n    };\n\n\n    const handleZoomIn = () => {\n        const newZoomLevel = zoomLevel * 1.2;\n        setZoomLevel(newZoomLevel);\n\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n\n        imageCanvas.style.transform = `scale(${newZoomLevel})`;\n        drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n    };\n\n    const handleZoomOut = () => {\n        const newZoomLevel = zoomLevel / 1.2;\n        setZoomLevel(newZoomLevel);\n\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n\n\n        imageCanvas.style.transform = `scale(${newZoomLevel})`;\n        drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n    };\n\n    \n\n    const togglePenMode = () => {\n        if (!penMode) {\n            setRubberMode(false); // Disable rubber mode when switching to pen mode\n            setIsDragging(false); // Reset dragging state\n            setPrevMouseX(0); // Reset prevMouseX\n            setPrevMouseY(0); // Reset prevMouseY\n    \n            // Reset canvas context settings\n            const canvas = drawingCanvasRef.current;\n            const ctx = canvas.getContext('2d');\n            ctx.globalCompositeOperation = 'source-over'; // Reset composite operation\n            ctx.strokeStyle = penColor; // Reset stroke color\n            ctx.lineWidth = penThickness; // Reset line width\n        }\n        setPenMode(!penMode); // Toggle pen mode\n    };\n\n    const handleToggleRubberMode = () => {\n        togglePenMode()\n        setRubberMode(!rubberMode);\n        setPenMode(false);\n    };\n    \n\n    const isPointInsideShape = (x, y, shape) => {\n        if (shape.type === 'rectangle') {\n            return x >= shape.x && x <= (shape.x + shape.width) &&\n                y >= shape.y && y <= (shape.y + shape.height);\n        } \n        return false;\n    };\n\n    const handleTogglePenMode = () => {\n        togglePenMode()\n        setPenMode(!penMode);\n        setRubberMode(false);\n    };\n\n    const handleImageMouseDown = (e) => {\n        const canvas = imageCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = (e.clientX - rect.left) / zoomLevel; // Calculate mouseX relative to zoom level\n        const mouseY = (e.clientY - rect.top) / zoomLevel; // Calculate mouseY relative to zoom level\n        \n        setIsDraggingImage(true);\n        setDragImageStartX(mouseX);\n        setDragImageStartY(mouseY);\n    };\n    \n    const handleImageMouseMove = (e) => {\n        if (!isDraggingImage) return;\n    \n        const canvas = imageCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = (e.clientX - rect.left) / zoomLevel; // Calculate mouseX relative to zoom level\n        const mouseY = (e.clientY - rect.top) / zoomLevel; // Calculate mouseY relative to zoom level\n        \n        const deltaX = mouseX - dragImageStartX;\n        const deltaY = mouseY - dragImageStartY;\n    \n        setImagePositionX(prevX => prevX + deltaX);\n        setImagePositionY(prevY => prevY + deltaY);\n    \n        setDragImageStartX(mouseX);\n        setDragImageStartY(mouseY);\n\n        const drawingCanvas = drawingCanvasRef.current;\n        drawingCanvas.style.transform = `scale(${zoomLevel}) translate(${imagePositionX}px, ${imagePositionY}px)`;\n    };\n    \n    const handleImageMouseUp = () => {\n        setIsDraggingImage(false);\n    };\n    \n    // Modify the image canvas style to apply translation for moving the image\n    const imageCanvasStyle = {\n        position: 'absolute',\n        transform: `scale(${zoomLevel}) translate(${imagePositionX}px, ${imagePositionY}px)`\n    };\n    \n    const handleSubmit = async () => {\n        setLoading(true);\n        if (image) {\n            const formData = new FormData();\n            formData.append('image', image);\n    \n            try {\n                const response = await axios.post('http://127.0.0.1:5000/process_image', formData, {\n                    headers: {\n                        'Content-Type': 'multipart/form-data',\n                    },\n                    responseType: 'blob', // Set responseType to blob to receive image data as Blob\n                });\n                console.log('Response from server:', response);\n    \n                if (response.status === 200) { // Check if response status is OK\n                    const blob = new Blob([response.data], { type: 'image/png' });\n    \n                    const img = new Image();\n                    img.onload = () => {\n                        const canvas = imageCanvasRef.current;\n                        const ctx = canvas.getContext('2d');\n    \n                        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n                        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n                    };\n    \n                    img.onerror = (error) => {\n                        console.error('Error loading image:', error);\n                    };\n    \n                    img.src = URL.createObjectURL(blob); // Use URL.createObjectURL to create a URL for the blob\n                } else {\n                    console.error('Error processing image. Status:', response.status);\n                }\n            } catch (error) {\n                console.error('Error processing image:', error);\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            console.error('No image available in props');\n        }\n    };\n    \n    const handleOpenDiagnosisModal = () => {\n        setShowDiagnosisModal(true);\n    };\n\n    const handleCloseDiagnosisModal = () => {\n        setShowDiagnosisModal(false);\n    };\n\n    const handleSaveDiagnosis = (diagnosis) => {\n        // Perform any necessary action with the diagnosis, such as sending it to the server\n        console.log(\"Diagnosis saved:\", diagnosis);\n        // Close the diagnosis modal\n        setShowDiagnosisModal(false);\n    };\n    \n\n    return (\n        <div className=\"image-viewer\">\n            <canvas\n                ref={imageCanvasRef}\n                onMouseDown={handleImageMouseDown}\n                onMouseMove={handleImageMouseMove}\n                onMouseUp={handleImageMouseUp}\n                style={imageCanvasStyle}\n            />\n            <canvas\n                ref={drawingCanvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                style={{ position: 'absolute' }}\n            />\n            <div className=\"controls\">\n                <button onClick={handleZoomIn}>Zoom In</button>\n                <button onClick={handleZoomOut}>Zoom Out</button>\n                <button onClick={handleSave}>Save</button>\n                <button onClick={handleOpenDiagnosisModal}>Write Diagnosis</button>\n                <button onClick={handleSubmit}>AI Model</button>\n                <button onClick={onClose}>Close</button>\n                {selectedShapeIndex !== null && (\n                    <button onClick={handleDeleteShape} style={{\n                        position: 'absolute',\n                        top: shapes[selectedShapeIndex].y - 50,\n                        left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n                    }}>X</button>\n                )}\n            </div>\n\n            <SideToolbar\n                onBrightnessChange={setBrightness}\n                onContrastChange={setContrast}\n                onAddRectangle={() => handleAddShape('rectangle')}\n                onTogglePenMode={handleTogglePenMode}\n                onToggleRubberMode={handleToggleRubberMode}\n                onPenColorChange={setPenColor}\n                onPenThicknessChange={setPenThickness}\n                penMode={penMode}\n                rubberMode={rubberMode}\n            />\n            {showDiagnosisModal && (\n                <DiagnosisModal onSave={handleSaveDiagnosis} onCancel={handleCloseDiagnosisModal} />\n            )}\n            {loading && (\n                <div className=\"loading-overlay\">\n                    <div className=\"loading-spinner\"></div>\n                    <p>Please wait, AI model is processing...</p>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default ImageViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}