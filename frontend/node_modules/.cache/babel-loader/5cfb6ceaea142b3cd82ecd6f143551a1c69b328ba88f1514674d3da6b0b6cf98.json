{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const imageCanvasRef = useRef(null);\n  const drawingCanvasRef = useRef(null);\n  const [imageContext, setImageContext] = useState(null);\n  const [drawingContext, setDrawingContext] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeIndex, setResizeIndex] = useState(-1);\n  const [resizeStartX, setResizeStartX] = useState(0);\n  const [resizeStartY, setResizeStartY] = useState(0);\n  const [prevMouseX, setPrevMouseX] = useState(0);\n  const [prevMouseY, setPrevMouseY] = useState(0);\n  const [zoomLevel, setZoomLevel] = useState(1.0);\n  const [penMode, setPenMode] = useState(false);\n  const [rubberMode, setRubberMode] = useState(false);\n  const [penColor, setPenColor] = useState('#000000');\n  const [penThickness, setPenThickness] = useState(2);\n  const [imagePositionX, setImagePositionX] = useState(0);\n  const [imagePositionY, setImagePositionY] = useState(0);\n  const [isDraggingImage, setIsDraggingImage] = useState(false);\n  const [dragImageStartX, setDragImageStartX] = useState(0);\n  const [dragImageStartY, setDragImageStartY] = useState(0);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const imageCanvas = imageCanvasRef.current;\n    const ctx = imageCanvas.getContext('2d');\n    setImageContext(ctx);\n  }, []);\n  useEffect(() => {\n    const drawingCanvas = drawingCanvasRef.current;\n    const ctx = drawingCanvas.getContext('2d');\n    setDrawingContext(ctx);\n  }, []);\n  useEffect(() => {\n    if (image && imageCanvasRef.current && drawingCanvasRef.current) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n        const img = new Image();\n        img.onload = () => {\n          const {\n            width,\n            height\n          } = img;\n          const imageCanvas = imageCanvasRef.current;\n          const drawingCanvas = drawingCanvasRef.current;\n          const imageCtx = imageCanvas.getContext('2d');\n          const drawingCtx = drawingCanvas.getContext('2d');\n          imageCanvas.width = width;\n          imageCanvas.height = height;\n          drawingCanvas.width = width;\n          drawingCanvas.height = height;\n          setImageContext(imageCtx);\n          setDrawingContext(drawingCtx);\n          imageCtx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n          imageCtx.drawImage(img, 0, 0, width, height);\n          shapes.forEach((shape, index) => {\n            drawShape(drawingCtx, shape, index === selectedShapeIndex, index === resizeIndex);\n          });\n        };\n        img.src = reader.result;\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n  const handleMouseDown = e => {\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = (e.clientX - rect.left) / zoomLevel;\n    const mouseY = (e.clientY - rect.top) / zoomLevel;\n    setIsDraggingImage(true);\n    setDragImageStartX(mouseX);\n    setDragImageStartY(mouseY);\n    if (penMode || rubberMode) {\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else {\n      let shapeSelected = false;\n      shapes.forEach((shape, index) => {\n        if (isPointInsideShape(mouseX, mouseY, shape)) {\n          setSelectedShapeIndex(index);\n          setIsDragging(true);\n          setDragStartX(mouseX - shape.x);\n          setDragStartY(mouseY - shape.y);\n          setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n          if (isResizing) {\n            setResizeIndex(index);\n            setResizeStartX(mouseX - shape.x);\n            setResizeStartY(mouseY - shape.y);\n          }\n          shapeSelected = true;\n        }\n      });\n      if (!shapeSelected) {\n        setSelectedShapeIndex(null);\n      }\n    }\n  };\n  const handleMouseMove = e => {\n    if (!isDragging || penMode && !rubberMode && !isDragging) return;\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = (e.clientX - rect.left) / zoomLevel;\n    const mouseY = (e.clientY - rect.top) / zoomLevel;\n    const deltaX = mouseX - dragImageStartX;\n    const deltaY = mouseY - dragImageStartY;\n    setImagePositionX(prevX => prevX + deltaX);\n    setImagePositionY(prevY => prevY + deltaY);\n    setDragImageStartX(mouseX);\n    setDragImageStartY(mouseY);\n    if (penMode) {\n      drawingContext.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n      drawingContext.lineWidth = penThickness;\n      drawingContext.lineCap = 'round';\n      drawingContext.beginPath();\n      drawingContext.moveTo(prevMouseX, prevMouseY);\n      drawingContext.lineTo(mouseX, mouseY);\n      drawingContext.stroke();\n      drawingContext.closePath();\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n      drawingContext.globalCompositeOperation = 'destination-out';\n      drawingContext.beginPath();\n      drawingContext.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n      drawingContext.fill();\n    } else {\n      const newShapes = [...shapes];\n      const shape = newShapes[selectedShapeIndex];\n      if (!isResizing) {\n        shape.x = mouseX - dragStartX;\n        shape.y = mouseY - dragStartY;\n      } else {\n        const dx = mouseX - shape.x - resizeStartX;\n        const dy = mouseY - shape.y - resizeStartY;\n        shape.width += dx;\n        shape.height += dy;\n        setResizeStartX(mouseX - shape.x);\n        setResizeStartY(mouseY - shape.y);\n      }\n      setShapes(newShapes);\n    }\n  };\n  const handleImageMouseUp = () => {\n    setIsDraggingImage(false);\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setIsResizing(false);\n  };\n  const isResizingHandle = (x, y, shape) => {\n    return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width && y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n  };\n  const drawShape = (ctx, shape, isSelected, isResizing) => {\n    ctx.beginPath();\n    ctx.rect(shape.x, shape.y, shape.width, shape.height);\n    ctx.strokeStyle = isSelected ? 'red' : shape.color;\n    ctx.lineWidth = shape.lineWidth;\n    ctx.stroke();\n  };\n  const handleDeleteShape = () => {\n    if (selectedShapeIndex !== null) {\n      const newShapes = [...shapes];\n      newShapes.splice(selectedShapeIndex, 1);\n      setShapes(newShapes);\n      setSelectedShapeIndex(null);\n    }\n  };\n  const handleSave = () => {\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    const mergedCanvas = document.createElement('canvas');\n    const mergedCtx = mergedCanvas.getContext('2d');\n    mergedCanvas.width = imageCanvas.width;\n    mergedCanvas.height = imageCanvas.height;\n    mergedCtx.drawImage(imageCanvas, 0, 0);\n    mergedCtx.drawImage(drawingCanvas, 0, 0);\n    mergedCanvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n  const handleAddShape = type => {\n    const newShapes = [...shapes];\n    if (type === 'square') {\n      newShapes.push({\n        type: 'square',\n        x: 100,\n        y: 100,\n        width: 50,\n        height: 50,\n        color: 'red',\n        lineWidth: 2\n      });\n    } else if (type === 'rectangle') {\n      newShapes.push({\n        type: 'rectangle',\n        x: 200,\n        y: 200,\n        width: 80,\n        height: 40,\n        color: 'blue',\n        lineWidth: 2\n      });\n    }\n    setShapes(newShapes);\n  };\n  const handleZoomIn = () => {\n    const newZoomLevel = zoomLevel * 1.2;\n    setZoomLevel(newZoomLevel);\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    imageCanvas.style.transform = `scale(${newZoomLevel})`;\n    drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n  };\n  const handleZoomOut = () => {\n    const newZoomLevel = zoomLevel / 1.2;\n    setZoomLevel(newZoomLevel);\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    imageCanvas.style.transform = `scale(${newZoomLevel})`;\n    drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n  };\n  const togglePenMode = () => {\n    if (!penMode) {\n      setRubberMode(false); // Disable rubber mode when switching to pen mode\n      setIsDragging(false); // Reset dragging state\n      setPrevMouseX(0); // Reset prevMouseX\n      setPrevMouseY(0); // Reset prevMouseY\n\n      // Reset canvas context settings\n      const canvas = drawingCanvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.globalCompositeOperation = 'source-over'; // Reset composite operation\n      ctx.strokeStyle = penColor; // Reset stroke color\n      ctx.lineWidth = penThickness; // Reset line width\n    }\n    setPenMode(!penMode); // Toggle pen mode\n  };\n  const handleToggleRubberMode = () => {\n    togglePenMode();\n    setRubberMode(!rubberMode);\n    setPenMode(false);\n  };\n  const isPointInsideShape = (x, y, shape) => {\n    if (shape.type === 'rectangle') {\n      return x >= shape.x && x <= shape.x + shape.width && y >= shape.y && y <= shape.y + shape.height;\n    }\n    return false;\n  };\n  const handleTogglePenMode = () => {\n    togglePenMode();\n    setPenMode(!penMode);\n    setRubberMode(false);\n  };\n  const imageCanvasStyle = {\n    position: 'absolute',\n    transform: `scale(${zoomLevel}) translate(${imagePositionX}px, ${imagePositionY}px)`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: imageCanvasRef,\n      onMouseDown: handleImageMouseDown,\n      onMouseMove: handleImageMouseMove,\n      onMouseUp: handleImageMouseUp,\n      style: imageCanvasStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: drawingCanvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      style: {\n        position: 'absolute'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        children: \"Zoom In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        children: \"Zoom Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }, this), selectedShapeIndex !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteShape,\n        style: {\n          position: 'absolute',\n          top: shapes[selectedShapeIndex].y - 50,\n          left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast,\n      onAddRectangle: () => handleAddShape('rectangle'),\n      onTogglePenMode: handleTogglePenMode,\n      onToggleRubberMode: handleToggleRubberMode,\n      onPenColorChange: setPenColor,\n      onPenThicknessChange: setPenThickness,\n      penMode: penMode,\n      rubberMode: rubberMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"/BvJtcEsnkBqDNJdc+XM7BkykrE=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","imageCanvasRef","drawingCanvasRef","imageContext","setImageContext","drawingContext","setDrawingContext","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDragging","setIsDragging","dragStartX","setDragStartX","dragStartY","setDragStartY","isResizing","setIsResizing","resizeIndex","setResizeIndex","resizeStartX","setResizeStartX","resizeStartY","setResizeStartY","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","zoomLevel","setZoomLevel","penMode","setPenMode","rubberMode","setRubberMode","penColor","setPenColor","penThickness","setPenThickness","imagePositionX","setImagePositionX","imagePositionY","setImagePositionY","isDraggingImage","setIsDraggingImage","dragImageStartX","setDragImageStartX","dragImageStartY","setDragImageStartY","reader","FileReader","onload","result","readAsDataURL","imageCanvas","current","ctx","getContext","drawingCanvas","img","Image","width","height","imageCtx","drawingCtx","filter","drawImage","forEach","shape","index","drawShape","src","handleMouseDown","e","canvas","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","shapeSelected","isPointInsideShape","x","y","isResizingHandle","handleMouseMove","deltaX","deltaY","prevX","prevY","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","closePath","globalCompositeOperation","arc","Math","PI","fill","newShapes","dx","dy","handleImageMouseUp","handleMouseUp","isSelected","color","handleDeleteShape","splice","handleSave","mergedCanvas","document","createElement","mergedCtx","toBlob","blob","handleAddShape","type","push","handleZoomIn","newZoomLevel","style","transform","handleZoomOut","togglePenMode","handleToggleRubberMode","handleTogglePenMode","imageCanvasStyle","position","className","children","ref","onMouseDown","handleImageMouseDown","onMouseMove","handleImageMouseMove","onMouseUp","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onBrightnessChange","onContrastChange","onAddRectangle","onTogglePenMode","onToggleRubberMode","onPenColorChange","onPenThicknessChange","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const imageCanvasRef = useRef(null);\n    const drawingCanvasRef = useRef(null);\n    const [imageContext, setImageContext] = useState(null);\n    const [drawingContext, setDrawingContext] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [dragStartX, setDragStartX] = useState(0);\n    const [dragStartY, setDragStartY] = useState(0);\n    const [isResizing, setIsResizing] = useState(false);\n    const [resizeIndex, setResizeIndex] = useState(-1);\n    const [resizeStartX, setResizeStartX] = useState(0);\n    const [resizeStartY, setResizeStartY] = useState(0);\n    const [prevMouseX, setPrevMouseX] = useState(0);\n    const [prevMouseY, setPrevMouseY] = useState(0);\n    const [zoomLevel, setZoomLevel] = useState(1.0);\n\n    const [penMode, setPenMode] = useState(false);\n    const [rubberMode, setRubberMode] = useState(false);\n    const [penColor, setPenColor] = useState('#000000');\n    const [penThickness, setPenThickness] = useState(2);\n\n    const [imagePositionX, setImagePositionX] = useState(0);\n    const [imagePositionY, setImagePositionY] = useState(0);\n    const [isDraggingImage, setIsDraggingImage] = useState(false);\n    const [dragImageStartX, setDragImageStartX] = useState(0);\n    const [dragImageStartY, setDragImageStartY] = useState(0);\n    \n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const imageCanvas = imageCanvasRef.current;\n        const ctx = imageCanvas.getContext('2d');\n        setImageContext(ctx);\n    }, []);\n\n    useEffect(() => {\n        const drawingCanvas = drawingCanvasRef.current;\n        const ctx = drawingCanvas.getContext('2d');\n        setDrawingContext(ctx);\n    }, []);\n\n    useEffect(() => {\n        if (image && imageCanvasRef.current && drawingCanvasRef.current) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n                const img = new Image();\n                img.onload = () => {\n                    const { width, height } = img;\n                    const imageCanvas = imageCanvasRef.current;\n                    const drawingCanvas = drawingCanvasRef.current;\n                    const imageCtx = imageCanvas.getContext('2d');\n                    const drawingCtx = drawingCanvas.getContext('2d');\n                    \n                    imageCanvas.width = width;\n                    imageCanvas.height = height;\n                    drawingCanvas.width = width;\n                    drawingCanvas.height = height;\n                    \n                    setImageContext(imageCtx);\n                    setDrawingContext(drawingCtx);\n                    \n                    imageCtx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                    imageCtx.drawImage(img, 0, 0, width, height);\n                    \n                    shapes.forEach((shape, index) => {\n                        drawShape(drawingCtx, shape, index === selectedShapeIndex, index === resizeIndex);\n                    });\n                };\n                img.src = reader.result;\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n\n    const handleMouseDown = (e) => {\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = (e.clientX - rect.left) / zoomLevel;\n        const mouseY = (e.clientY - rect.top) / zoomLevel; \n\n        setIsDraggingImage(true);\n        setDragImageStartX(mouseX);\n        setDragImageStartY(mouseY);\n\n        if (penMode || rubberMode) {\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else {\n            let shapeSelected = false;\n            shapes.forEach((shape, index) => {\n                if (isPointInsideShape(mouseX, mouseY, shape)) {\n                    setSelectedShapeIndex(index);\n                    setIsDragging(true);\n                    setDragStartX(mouseX - shape.x);\n                    setDragStartY(mouseY - shape.y);\n                    setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n                    if (isResizing) {\n                        setResizeIndex(index);\n                        setResizeStartX(mouseX - shape.x);\n                        setResizeStartY(mouseY - shape.y);\n                    }\n                    shapeSelected = true;\n                }\n            });\n\n            if (!shapeSelected) {\n                setSelectedShapeIndex(null);\n            }\n        }\n    };\n\n    const handleMouseMove = (e) => {\n        if (!isDragging || (penMode && !rubberMode && !isDragging)) return;\n\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = (e.clientX - rect.left) / zoomLevel;\n        const mouseY = (e.clientY - rect.top) / zoomLevel;\n\n        const deltaX = mouseX - dragImageStartX;\n        const deltaY = mouseY - dragImageStartY;\n\n        setImagePositionX(prevX => prevX + deltaX);\n        setImagePositionY(prevY => prevY + deltaY);\n\n        setDragImageStartX(mouseX);\n        setDragImageStartY(mouseY);\n    \n        if (penMode) {\n            drawingContext.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n            drawingContext.lineWidth = penThickness;\n            drawingContext.lineCap = 'round';\n            drawingContext.beginPath();\n            drawingContext.moveTo(prevMouseX, prevMouseY);\n            drawingContext.lineTo(mouseX, mouseY);\n            drawingContext.stroke();\n            drawingContext.closePath();\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else if (rubberMode) {\n            drawingContext.globalCompositeOperation = 'destination-out';\n            drawingContext.beginPath();\n            drawingContext.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n            drawingContext.fill();\n        } else {\n            const newShapes = [...shapes];\n            const shape = newShapes[selectedShapeIndex];\n            if (!isResizing) {\n                shape.x = mouseX - dragStartX;\n                shape.y = mouseY - dragStartY;\n            } else {\n                const dx = mouseX - shape.x - resizeStartX;\n                const dy = mouseY - shape.y - resizeStartY;\n                shape.width += dx;\n                shape.height += dy;\n                setResizeStartX(mouseX - shape.x);\n                setResizeStartY(mouseY - shape.y);\n            }\n            setShapes(newShapes);\n        }\n    };\n\n    const handleImageMouseUp = () => {\n        setIsDraggingImage(false);\n    };\n\n    const handleMouseUp = () => {\n        setIsDragging(false);\n        setIsResizing(false);\n    };\n\n    const isResizingHandle = (x, y, shape) => {\n        return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width &&\n            y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n    };\n\n    const drawShape = (ctx, shape, isSelected, isResizing) => {\n        ctx.beginPath();\n        ctx.rect(shape.x, shape.y, shape.width, shape.height);\n        ctx.strokeStyle = isSelected ? 'red' : shape.color;\n        ctx.lineWidth = shape.lineWidth;\n        ctx.stroke();\n    };\n\n    const handleDeleteShape = () => {\n        if (selectedShapeIndex !== null) {\n            const newShapes = [...shapes];\n            newShapes.splice(selectedShapeIndex, 1);\n            setShapes(newShapes);\n            setSelectedShapeIndex(null);\n        }\n    };\n\n    const handleSave = () => {\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n        const mergedCanvas = document.createElement('canvas');\n        const mergedCtx = mergedCanvas.getContext('2d');\n        \n        mergedCanvas.width = imageCanvas.width;\n        mergedCanvas.height = imageCanvas.height;\n        \n        mergedCtx.drawImage(imageCanvas, 0, 0);\n        \n        mergedCtx.drawImage(drawingCanvas, 0, 0);\n        \n        mergedCanvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n\n    const handleAddShape = (type) => {\n        const newShapes = [...shapes];\n        if (type === 'square') {\n            newShapes.push({\n                type: 'square',\n                x: 100,\n                y: 100,\n                width: 50,\n                height: 50,\n                color: 'red',\n                lineWidth: 2,\n            });\n        } else if (type === 'rectangle') {\n            newShapes.push({\n                type: 'rectangle',\n                x: 200,\n                y: 200,\n                width: 80,\n                height: 40,\n                color: 'blue',\n                lineWidth: 2,\n            });\n        }\n        setShapes(newShapes);\n    };\n\n\n    const handleZoomIn = () => {\n        const newZoomLevel = zoomLevel * 1.2;\n        setZoomLevel(newZoomLevel);\n\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n\n        imageCanvas.style.transform = `scale(${newZoomLevel})`;\n        drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n    };\n\n    const handleZoomOut = () => {\n        const newZoomLevel = zoomLevel / 1.2;\n        setZoomLevel(newZoomLevel);\n\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n\n\n        imageCanvas.style.transform = `scale(${newZoomLevel})`;\n        drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n    };\n\n    \n\n    const togglePenMode = () => {\n        if (!penMode) {\n            setRubberMode(false); // Disable rubber mode when switching to pen mode\n            setIsDragging(false); // Reset dragging state\n            setPrevMouseX(0); // Reset prevMouseX\n            setPrevMouseY(0); // Reset prevMouseY\n    \n            // Reset canvas context settings\n            const canvas = drawingCanvasRef.current;\n            const ctx = canvas.getContext('2d');\n            ctx.globalCompositeOperation = 'source-over'; // Reset composite operation\n            ctx.strokeStyle = penColor; // Reset stroke color\n            ctx.lineWidth = penThickness; // Reset line width\n        }\n        setPenMode(!penMode); // Toggle pen mode\n    };\n\n    const handleToggleRubberMode = () => {\n        togglePenMode()\n        setRubberMode(!rubberMode);\n        setPenMode(false);\n    };\n    \n\n    const isPointInsideShape = (x, y, shape) => {\n        if (shape.type === 'rectangle') {\n            return x >= shape.x && x <= (shape.x + shape.width) &&\n                y >= shape.y && y <= (shape.y + shape.height);\n        } \n        return false;\n    };\n\n    const handleTogglePenMode = () => {\n        togglePenMode()\n        setPenMode(!penMode);\n        setRubberMode(false);\n    };\n\n    const imageCanvasStyle = {\n        position: 'absolute',\n        transform: `scale(${zoomLevel}) translate(${imagePositionX}px, ${imagePositionY}px)`\n    };\n    \n\n    return (\n        <div className=\"image-viewer\">\n            <canvas\n                ref={imageCanvasRef}\n                onMouseDown={handleImageMouseDown}\n                onMouseMove={handleImageMouseMove}\n                onMouseUp={handleImageMouseUp}\n                style={imageCanvasStyle}\n            />\n            <canvas\n                ref={drawingCanvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                style={{ position: 'absolute' }}\n            />\n            <div className=\"controls\">\n                <button onClick={handleZoomIn}>Zoom In</button>\n                <button onClick={handleZoomOut}>Zoom Out</button>\n                <button onClick={handleSave}>Save</button>\n                <button onClick={onClose}>Close</button>\n                {selectedShapeIndex !== null && (\n                    <button onClick={handleDeleteShape} style={{\n                        position: 'absolute',\n                        top: shapes[selectedShapeIndex].y - 50,\n                        left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n                    }}>X</button>\n                )}\n            </div>\n\n            <SideToolbar\n                onBrightnessChange={setBrightness}\n                onContrastChange={setContrast}\n                onAddRectangle={() => handleAddShape('rectangle')}\n                onTogglePenMode={handleTogglePenMode}\n                onToggleRubberMode={handleToggleRubberMode}\n                onPenColorChange={setPenColor}\n                onPenThicknessChange={setPenThickness}\n                penMode={penMode}\n                rubberMode={rubberMode}\n            />\n        </div>\n    );\n}\n\nexport default ImageViewer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,mBAAmB;AAC1B,OAAOC,WAAW,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,WAAWA,CAAC;EAAEC,KAAK;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC7C,MAAMC,cAAc,GAAGX,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMY,gBAAgB,GAAGZ,MAAM,CAAC,IAAI,CAAC;EACrC,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,GAAG,CAAC;EACjD,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,GAAG,CAAC;EAC7C,MAAM,CAACqB,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACuB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC2B,UAAU,EAAEC,aAAa,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAAC6B,UAAU,EAAEC,aAAa,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAAC+B,UAAU,EAAEC,aAAa,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACiC,WAAW,EAAEC,cAAc,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACmC,YAAY,EAAEC,eAAe,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACqC,YAAY,EAAEC,eAAe,CAAC,GAAGtC,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACuC,UAAU,EAAEC,aAAa,CAAC,GAAGxC,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACyC,UAAU,EAAEC,aAAa,CAAC,GAAG1C,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAAC2C,SAAS,EAAEC,YAAY,CAAC,GAAG5C,QAAQ,CAAC,GAAG,CAAC;EAE/C,MAAM,CAAC6C,OAAO,EAAEC,UAAU,CAAC,GAAG9C,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC+C,UAAU,EAAEC,aAAa,CAAC,GAAGhD,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACiD,QAAQ,EAAEC,WAAW,CAAC,GAAGlD,QAAQ,CAAC,SAAS,CAAC;EACnD,MAAM,CAACmD,YAAY,EAAEC,eAAe,CAAC,GAAGpD,QAAQ,CAAC,CAAC,CAAC;EAEnD,MAAM,CAACqD,cAAc,EAAEC,iBAAiB,CAAC,GAAGtD,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACuD,cAAc,EAAEC,iBAAiB,CAAC,GAAGxD,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACyD,eAAe,EAAEC,kBAAkB,CAAC,GAAG1D,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAAC2D,eAAe,EAAEC,kBAAkB,CAAC,GAAG5D,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAAC6D,eAAe,EAAEC,kBAAkB,CAAC,GAAG9D,QAAQ,CAAC,CAAC,CAAC;EAGzDD,SAAS,CAAC,MAAM;IACZ,IAAIM,KAAK,EAAE;MACP,MAAM0D,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM;QAClBjD,WAAW,CAAC+C,MAAM,CAACG,MAAM,CAAC;MAC9B,CAAC;MACDH,MAAM,CAACI,aAAa,CAAC9D,KAAK,CAAC;IAC/B;EACJ,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEXN,SAAS,CAAC,MAAM;IACZ,MAAMqE,WAAW,GAAG3D,cAAc,CAAC4D,OAAO;IAC1C,MAAMC,GAAG,GAAGF,WAAW,CAACG,UAAU,CAAC,IAAI,CAAC;IACxC3D,eAAe,CAAC0D,GAAG,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAENvE,SAAS,CAAC,MAAM;IACZ,MAAMyE,aAAa,GAAG9D,gBAAgB,CAAC2D,OAAO;IAC9C,MAAMC,GAAG,GAAGE,aAAa,CAACD,UAAU,CAAC,IAAI,CAAC;IAC1CzD,iBAAiB,CAACwD,GAAG,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAENvE,SAAS,CAAC,MAAM;IACZ,IAAIM,KAAK,IAAII,cAAc,CAAC4D,OAAO,IAAI3D,gBAAgB,CAAC2D,OAAO,EAAE;MAC7D,MAAMN,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM;QAClBjD,WAAW,CAAC+C,MAAM,CAACG,MAAM,CAAC;QAC1B,MAAMO,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;QACvBD,GAAG,CAACR,MAAM,GAAG,MAAM;UACf,MAAM;YAAEU,KAAK;YAAEC;UAAO,CAAC,GAAGH,GAAG;UAC7B,MAAML,WAAW,GAAG3D,cAAc,CAAC4D,OAAO;UAC1C,MAAMG,aAAa,GAAG9D,gBAAgB,CAAC2D,OAAO;UAC9C,MAAMQ,QAAQ,GAAGT,WAAW,CAACG,UAAU,CAAC,IAAI,CAAC;UAC7C,MAAMO,UAAU,GAAGN,aAAa,CAACD,UAAU,CAAC,IAAI,CAAC;UAEjDH,WAAW,CAACO,KAAK,GAAGA,KAAK;UACzBP,WAAW,CAACQ,MAAM,GAAGA,MAAM;UAC3BJ,aAAa,CAACG,KAAK,GAAGA,KAAK;UAC3BH,aAAa,CAACI,MAAM,GAAGA,MAAM;UAE7BhE,eAAe,CAACiE,QAAQ,CAAC;UACzB/D,iBAAiB,CAACgE,UAAU,CAAC;UAE7BD,QAAQ,CAACE,MAAM,GAAI,cAAa9D,UAAW,eAAcE,QAAS,IAAG;UACrE0D,QAAQ,CAACG,SAAS,CAACP,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEE,KAAK,EAAEC,MAAM,CAAC;UAE5CvD,MAAM,CAAC4D,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;YAC7BC,SAAS,CAACN,UAAU,EAAEI,KAAK,EAAEC,KAAK,KAAK5D,kBAAkB,EAAE4D,KAAK,KAAKlD,WAAW,CAAC;UACrF,CAAC,CAAC;QACN,CAAC;QACDwC,GAAG,CAACY,GAAG,GAAGtB,MAAM,CAACG,MAAM;MAC3B,CAAC;MACDH,MAAM,CAACI,aAAa,CAAC9D,KAAK,CAAC;IAC/B;EACJ,CAAC,EAAE,CAACA,KAAK,EAAEY,UAAU,EAAEE,QAAQ,EAAEE,MAAM,EAAEE,kBAAkB,EAAEU,WAAW,CAAC,CAAC;EAE1E,MAAMqD,eAAe,GAAIC,CAAC,IAAK;IAC3B,MAAMC,MAAM,GAAG9E,gBAAgB,CAAC2D,OAAO;IACvC,MAAMoB,IAAI,GAAGD,MAAM,CAACE,qBAAqB,CAAC,CAAC;IAC3C,MAAMC,MAAM,GAAG,CAACJ,CAAC,CAACK,OAAO,GAAGH,IAAI,CAACI,IAAI,IAAIlD,SAAS;IAClD,MAAMmD,MAAM,GAAG,CAACP,CAAC,CAACQ,OAAO,GAAGN,IAAI,CAACO,GAAG,IAAIrD,SAAS;IAEjDe,kBAAkB,CAAC,IAAI,CAAC;IACxBE,kBAAkB,CAAC+B,MAAM,CAAC;IAC1B7B,kBAAkB,CAACgC,MAAM,CAAC;IAE1B,IAAIjD,OAAO,IAAIE,UAAU,EAAE;MACvBrB,aAAa,CAAC,IAAI,CAAC;MACnBc,aAAa,CAACmD,MAAM,CAAC;MACrBjD,aAAa,CAACoD,MAAM,CAAC;IACzB,CAAC,MAAM;MACH,IAAIG,aAAa,GAAG,KAAK;MACzB5E,MAAM,CAAC4D,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QAC7B,IAAIe,kBAAkB,CAACP,MAAM,EAAEG,MAAM,EAAEZ,KAAK,CAAC,EAAE;UAC3C1D,qBAAqB,CAAC2D,KAAK,CAAC;UAC5BzD,aAAa,CAAC,IAAI,CAAC;UACnBE,aAAa,CAAC+D,MAAM,GAAGT,KAAK,CAACiB,CAAC,CAAC;UAC/BrE,aAAa,CAACgE,MAAM,GAAGZ,KAAK,CAACkB,CAAC,CAAC;UAC/BpE,aAAa,CAACqE,gBAAgB,CAACV,MAAM,EAAEG,MAAM,EAAEZ,KAAK,CAAC,CAAC;UACtD,IAAInD,UAAU,EAAE;YACZG,cAAc,CAACiD,KAAK,CAAC;YACrB/C,eAAe,CAACuD,MAAM,GAAGT,KAAK,CAACiB,CAAC,CAAC;YACjC7D,eAAe,CAACwD,MAAM,GAAGZ,KAAK,CAACkB,CAAC,CAAC;UACrC;UACAH,aAAa,GAAG,IAAI;QACxB;MACJ,CAAC,CAAC;MAEF,IAAI,CAACA,aAAa,EAAE;QAChBzE,qBAAqB,CAAC,IAAI,CAAC;MAC/B;IACJ;EACJ,CAAC;EAED,MAAM8E,eAAe,GAAIf,CAAC,IAAK;IAC3B,IAAI,CAAC9D,UAAU,IAAKoB,OAAO,IAAI,CAACE,UAAU,IAAI,CAACtB,UAAW,EAAE;IAE5D,MAAM+D,MAAM,GAAG9E,gBAAgB,CAAC2D,OAAO;IACvC,MAAMoB,IAAI,GAAGD,MAAM,CAACE,qBAAqB,CAAC,CAAC;IAC3C,MAAMC,MAAM,GAAG,CAACJ,CAAC,CAACK,OAAO,GAAGH,IAAI,CAACI,IAAI,IAAIlD,SAAS;IAClD,MAAMmD,MAAM,GAAG,CAACP,CAAC,CAACQ,OAAO,GAAGN,IAAI,CAACO,GAAG,IAAIrD,SAAS;IAEjD,MAAM4D,MAAM,GAAGZ,MAAM,GAAGhC,eAAe;IACvC,MAAM6C,MAAM,GAAGV,MAAM,GAAGjC,eAAe;IAEvCP,iBAAiB,CAACmD,KAAK,IAAIA,KAAK,GAAGF,MAAM,CAAC;IAC1C/C,iBAAiB,CAACkD,KAAK,IAAIA,KAAK,GAAGF,MAAM,CAAC;IAE1C5C,kBAAkB,CAAC+B,MAAM,CAAC;IAC1B7B,kBAAkB,CAACgC,MAAM,CAAC;IAE1B,IAAIjD,OAAO,EAAE;MACThC,cAAc,CAAC8F,WAAW,GAAG5D,UAAU,GAAG,SAAS,GAAGE,QAAQ;MAC9DpC,cAAc,CAAC+F,SAAS,GAAGzD,YAAY;MACvCtC,cAAc,CAACgG,OAAO,GAAG,OAAO;MAChChG,cAAc,CAACiG,SAAS,CAAC,CAAC;MAC1BjG,cAAc,CAACkG,MAAM,CAACxE,UAAU,EAAEE,UAAU,CAAC;MAC7C5B,cAAc,CAACmG,MAAM,CAACrB,MAAM,EAAEG,MAAM,CAAC;MACrCjF,cAAc,CAACoG,MAAM,CAAC,CAAC;MACvBpG,cAAc,CAACqG,SAAS,CAAC,CAAC;MAC1B1E,aAAa,CAACmD,MAAM,CAAC;MACrBjD,aAAa,CAACoD,MAAM,CAAC;IACzB,CAAC,MAAM,IAAI/C,UAAU,EAAE;MACnBlC,cAAc,CAACsG,wBAAwB,GAAG,iBAAiB;MAC3DtG,cAAc,CAACiG,SAAS,CAAC,CAAC;MAC1BjG,cAAc,CAACuG,GAAG,CAACzB,MAAM,EAAEG,MAAM,EAAE3C,YAAY,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAGkE,IAAI,CAACC,EAAE,CAAC;MACpEzG,cAAc,CAAC0G,IAAI,CAAC,CAAC;IACzB,CAAC,MAAM;MACH,MAAMC,SAAS,GAAG,CAAC,GAAGnG,MAAM,CAAC;MAC7B,MAAM6D,KAAK,GAAGsC,SAAS,CAACjG,kBAAkB,CAAC;MAC3C,IAAI,CAACQ,UAAU,EAAE;QACbmD,KAAK,CAACiB,CAAC,GAAGR,MAAM,GAAGhE,UAAU;QAC7BuD,KAAK,CAACkB,CAAC,GAAGN,MAAM,GAAGjE,UAAU;MACjC,CAAC,MAAM;QACH,MAAM4F,EAAE,GAAG9B,MAAM,GAAGT,KAAK,CAACiB,CAAC,GAAGhE,YAAY;QAC1C,MAAMuF,EAAE,GAAG5B,MAAM,GAAGZ,KAAK,CAACkB,CAAC,GAAG/D,YAAY;QAC1C6C,KAAK,CAACP,KAAK,IAAI8C,EAAE;QACjBvC,KAAK,CAACN,MAAM,IAAI8C,EAAE;QAClBtF,eAAe,CAACuD,MAAM,GAAGT,KAAK,CAACiB,CAAC,CAAC;QACjC7D,eAAe,CAACwD,MAAM,GAAGZ,KAAK,CAACkB,CAAC,CAAC;MACrC;MACA9E,SAAS,CAACkG,SAAS,CAAC;IACxB;EACJ,CAAC;EAED,MAAMG,kBAAkB,GAAGA,CAAA,KAAM;IAC7BjE,kBAAkB,CAAC,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMkE,aAAa,GAAGA,CAAA,KAAM;IACxBlG,aAAa,CAAC,KAAK,CAAC;IACpBM,aAAa,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,MAAMqE,gBAAgB,GAAGA,CAACF,CAAC,EAAEC,CAAC,EAAElB,KAAK,KAAK;IACtC,OAAOiB,CAAC,IAAIjB,KAAK,CAACiB,CAAC,GAAGjB,KAAK,CAACP,KAAK,GAAG,EAAE,IAAIwB,CAAC,IAAIjB,KAAK,CAACiB,CAAC,GAAGjB,KAAK,CAACP,KAAK,IAChEyB,CAAC,IAAIlB,KAAK,CAACkB,CAAC,GAAGlB,KAAK,CAACN,MAAM,GAAG,EAAE,IAAIwB,CAAC,IAAIlB,KAAK,CAACkB,CAAC,GAAGlB,KAAK,CAACN,MAAM;EACvE,CAAC;EAED,MAAMQ,SAAS,GAAGA,CAACd,GAAG,EAAEY,KAAK,EAAE2C,UAAU,EAAE9F,UAAU,KAAK;IACtDuC,GAAG,CAACwC,SAAS,CAAC,CAAC;IACfxC,GAAG,CAACmB,IAAI,CAACP,KAAK,CAACiB,CAAC,EAAEjB,KAAK,CAACkB,CAAC,EAAElB,KAAK,CAACP,KAAK,EAAEO,KAAK,CAACN,MAAM,CAAC;IACrDN,GAAG,CAACqC,WAAW,GAAGkB,UAAU,GAAG,KAAK,GAAG3C,KAAK,CAAC4C,KAAK;IAClDxD,GAAG,CAACsC,SAAS,GAAG1B,KAAK,CAAC0B,SAAS;IAC/BtC,GAAG,CAAC2C,MAAM,CAAC,CAAC;EAChB,CAAC;EAED,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,IAAIxG,kBAAkB,KAAK,IAAI,EAAE;MAC7B,MAAMiG,SAAS,GAAG,CAAC,GAAGnG,MAAM,CAAC;MAC7BmG,SAAS,CAACQ,MAAM,CAACzG,kBAAkB,EAAE,CAAC,CAAC;MACvCD,SAAS,CAACkG,SAAS,CAAC;MACpBhG,qBAAqB,CAAC,IAAI,CAAC;IAC/B;EACJ,CAAC;EAED,MAAMyG,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAM7D,WAAW,GAAG3D,cAAc,CAAC4D,OAAO;IAC1C,MAAMG,aAAa,GAAG9D,gBAAgB,CAAC2D,OAAO;IAC9C,MAAM6D,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IACrD,MAAMC,SAAS,GAAGH,YAAY,CAAC3D,UAAU,CAAC,IAAI,CAAC;IAE/C2D,YAAY,CAACvD,KAAK,GAAGP,WAAW,CAACO,KAAK;IACtCuD,YAAY,CAACtD,MAAM,GAAGR,WAAW,CAACQ,MAAM;IAExCyD,SAAS,CAACrD,SAAS,CAACZ,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;IAEtCiE,SAAS,CAACrD,SAAS,CAACR,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC;IAExC0D,YAAY,CAACI,MAAM,CAACC,IAAI,IAAI;MACxBhI,MAAM,CAACgI,IAAI,CAAC;IAChB,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC;EACvB,CAAC;EAED,MAAMC,cAAc,GAAIC,IAAI,IAAK;IAC7B,MAAMjB,SAAS,GAAG,CAAC,GAAGnG,MAAM,CAAC;IAC7B,IAAIoH,IAAI,KAAK,QAAQ,EAAE;MACnBjB,SAAS,CAACkB,IAAI,CAAC;QACXD,IAAI,EAAE,QAAQ;QACdtC,CAAC,EAAE,GAAG;QACNC,CAAC,EAAE,GAAG;QACNzB,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,EAAE;QACVkD,KAAK,EAAE,KAAK;QACZlB,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC,MAAM,IAAI6B,IAAI,KAAK,WAAW,EAAE;MAC7BjB,SAAS,CAACkB,IAAI,CAAC;QACXD,IAAI,EAAE,WAAW;QACjBtC,CAAC,EAAE,GAAG;QACNC,CAAC,EAAE,GAAG;QACNzB,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,EAAE;QACVkD,KAAK,EAAE,MAAM;QACblB,SAAS,EAAE;MACf,CAAC,CAAC;IACN;IACAtF,SAAS,CAACkG,SAAS,CAAC;EACxB,CAAC;EAGD,MAAMmB,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMC,YAAY,GAAGjG,SAAS,GAAG,GAAG;IACpCC,YAAY,CAACgG,YAAY,CAAC;IAE1B,MAAMxE,WAAW,GAAG3D,cAAc,CAAC4D,OAAO;IAC1C,MAAMG,aAAa,GAAG9D,gBAAgB,CAAC2D,OAAO;IAE9CD,WAAW,CAACyE,KAAK,CAACC,SAAS,GAAI,SAAQF,YAAa,GAAE;IACtDpE,aAAa,CAACqE,KAAK,CAACC,SAAS,GAAI,SAAQF,YAAa,GAAE;EAC5D,CAAC;EAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;IACxB,MAAMH,YAAY,GAAGjG,SAAS,GAAG,GAAG;IACpCC,YAAY,CAACgG,YAAY,CAAC;IAE1B,MAAMxE,WAAW,GAAG3D,cAAc,CAAC4D,OAAO;IAC1C,MAAMG,aAAa,GAAG9D,gBAAgB,CAAC2D,OAAO;IAG9CD,WAAW,CAACyE,KAAK,CAACC,SAAS,GAAI,SAAQF,YAAa,GAAE;IACtDpE,aAAa,CAACqE,KAAK,CAACC,SAAS,GAAI,SAAQF,YAAa,GAAE;EAC5D,CAAC;EAID,MAAMI,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACnG,OAAO,EAAE;MACVG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;MACtBtB,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;MACtBc,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;MAClBE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;;MAElB;MACA,MAAM8C,MAAM,GAAG9E,gBAAgB,CAAC2D,OAAO;MACvC,MAAMC,GAAG,GAAGkB,MAAM,CAACjB,UAAU,CAAC,IAAI,CAAC;MACnCD,GAAG,CAAC6C,wBAAwB,GAAG,aAAa,CAAC,CAAC;MAC9C7C,GAAG,CAACqC,WAAW,GAAG1D,QAAQ,CAAC,CAAC;MAC5BqB,GAAG,CAACsC,SAAS,GAAGzD,YAAY,CAAC,CAAC;IAClC;IACAL,UAAU,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,MAAMoG,sBAAsB,GAAGA,CAAA,KAAM;IACjCD,aAAa,CAAC,CAAC;IACfhG,aAAa,CAAC,CAACD,UAAU,CAAC;IAC1BD,UAAU,CAAC,KAAK,CAAC;EACrB,CAAC;EAGD,MAAMoD,kBAAkB,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAElB,KAAK,KAAK;IACxC,IAAIA,KAAK,CAACuD,IAAI,KAAK,WAAW,EAAE;MAC5B,OAAOtC,CAAC,IAAIjB,KAAK,CAACiB,CAAC,IAAIA,CAAC,IAAKjB,KAAK,CAACiB,CAAC,GAAGjB,KAAK,CAACP,KAAM,IAC/CyB,CAAC,IAAIlB,KAAK,CAACkB,CAAC,IAAIA,CAAC,IAAKlB,KAAK,CAACkB,CAAC,GAAGlB,KAAK,CAACN,MAAO;IACrD;IACA,OAAO,KAAK;EAChB,CAAC;EAED,MAAMsE,mBAAmB,GAAGA,CAAA,KAAM;IAC9BF,aAAa,CAAC,CAAC;IACflG,UAAU,CAAC,CAACD,OAAO,CAAC;IACpBG,aAAa,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,MAAMmG,gBAAgB,GAAG;IACrBC,QAAQ,EAAE,UAAU;IACpBN,SAAS,EAAG,SAAQnG,SAAU,eAAcU,cAAe,OAAME,cAAe;EACpF,CAAC;EAGD,oBACIpD,OAAA;IAAKkJ,SAAS,EAAC,cAAc;IAAAC,QAAA,gBACzBnJ,OAAA;MACIoJ,GAAG,EAAE9I,cAAe;MACpB+I,WAAW,EAAEC,oBAAqB;MAClCC,WAAW,EAAEC,oBAAqB;MAClCC,SAAS,EAAEjC,kBAAmB;MAC9BkB,KAAK,EAAEM;IAAiB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eACF7J,OAAA;MACIoJ,GAAG,EAAE7I,gBAAiB;MACtB8I,WAAW,EAAElE,eAAgB;MAC7BoE,WAAW,EAAEpD,eAAgB;MAC7BsD,SAAS,EAAEhC,aAAc;MACzBiB,KAAK,EAAE;QAAEO,QAAQ,EAAE;MAAW;IAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACF7J,OAAA;MAAKkJ,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACrBnJ,OAAA;QAAQ8J,OAAO,EAAEtB,YAAa;QAAAW,QAAA,EAAC;MAAO;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/C7J,OAAA;QAAQ8J,OAAO,EAAElB,aAAc;QAAAO,QAAA,EAAC;MAAQ;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjD7J,OAAA;QAAQ8J,OAAO,EAAEhC,UAAW;QAAAqB,QAAA,EAAC;MAAI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1C7J,OAAA;QAAQ8J,OAAO,EAAE3J,OAAQ;QAAAgJ,QAAA,EAAC;MAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACvCzI,kBAAkB,KAAK,IAAI,iBACxBpB,OAAA;QAAQ8J,OAAO,EAAElC,iBAAkB;QAACc,KAAK,EAAE;UACvCO,QAAQ,EAAE,UAAU;UACpBpD,GAAG,EAAE3E,MAAM,CAACE,kBAAkB,CAAC,CAAC6E,CAAC,GAAG,EAAE;UACtCP,IAAI,EAAExE,MAAM,CAACE,kBAAkB,CAAC,CAAC4E,CAAC,GAAG9E,MAAM,CAACE,kBAAkB,CAAC,CAACoD,KAAK,GAAG;QAC5E,CAAE;QAAA2E,QAAA,EAAC;MAAC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACf;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAEN7J,OAAA,CAACF,WAAW;MACRiK,kBAAkB,EAAEhJ,aAAc;MAClCiJ,gBAAgB,EAAE/I,WAAY;MAC9BgJ,cAAc,EAAEA,CAAA,KAAM5B,cAAc,CAAC,WAAW,CAAE;MAClD6B,eAAe,EAAEnB,mBAAoB;MACrCoB,kBAAkB,EAAErB,sBAAuB;MAC3CsB,gBAAgB,EAAErH,WAAY;MAC9BsH,oBAAoB,EAAEpH,eAAgB;MACtCP,OAAO,EAAEA,OAAQ;MACjBE,UAAU,EAAEA;IAAW;MAAA8G,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACxJ,EAAA,CA9WQJ,WAAW;AAAAqK,EAAA,GAAXrK,WAAW;AAgXpB,eAAeA,WAAW;AAAC,IAAAqK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}