{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeIndex, setResizeIndex] = useState(-1);\n  const [resizeStartX, setResizeStartX] = useState(0);\n  const [resizeStartY, setResizeStartY] = useState(0);\n  const [prevMouseX, setPrevMouseX] = useState(0);\n  const [prevMouseY, setPrevMouseY] = useState(0);\n  const [penMode, setPenMode] = useState(false);\n  const [rubberMode, setRubberMode] = useState(false);\n  const [penColor, setPenColor] = useState('#000000');\n  const [penThickness, setPenThickness] = useState(2);\n  const imageCanvasRef = useRef(null);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    setContext(ctx);\n    if (context && imageSrc) {\n      const img = new Image();\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n        ctx.drawImage(img, 0, 0);\n        shapes.forEach((shape, index) => {\n          drawShape(ctx, shape, index === selectedShapeIndex, index === resizeIndex);\n        });\n      };\n      img.src = imageSrc;\n    }\n  }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n  useEffect(() => {\n    const imageCanvas = imageCanvasRef.current;\n    const imageCtx = imageCanvas.getContext('2d');\n    if (imageSrc) {\n      const img = new Image();\n      img.onload = () => {\n        imageCanvas.width = img.width;\n        imageCanvas.height = img.height;\n        imageCtx.drawImage(img, 0, 0);\n      };\n      img.src = imageSrc;\n    }\n  }, [imageSrc]);\n  const handleMouseDown = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    if (penMode) {\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n      const ctx = canvas.getContext('2d');\n      ctx.globalCompositeOperation = 'destination-out';\n      ctx.strokeStyle = 'rgba(0,0,0,0)';\n      ctx.lineWidth = penThickness;\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else {\n      let shapeSelected = false;\n      shapes.forEach((shape, index) => {\n        if (isPointInsideShape(mouseX, mouseY, shape)) {\n          setSelectedShapeIndex(index);\n          setIsDragging(true);\n          setDragStartX(mouseX - shape.x);\n          setDragStartY(mouseY - shape.y);\n          setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n          if (isResizing) {\n            setResizeIndex(index);\n            setResizeStartX(mouseX - shape.x);\n            setResizeStartY(mouseY - shape.y);\n          }\n          shapeSelected = true;\n        }\n      });\n      if (!shapeSelected) {\n        setSelectedShapeIndex(null);\n      }\n    }\n  };\n  const handleMouseMove = (e, ctx) => {\n    if (!isDragging || penMode && !rubberMode && !isDragging) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    if (penMode) {\n      ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n      ctx.lineWidth = penThickness;\n      ctx.lineCap = 'round';\n      ctx.beginPath();\n      ctx.moveTo(prevMouseX, prevMouseY);\n      ctx.lineTo(mouseX, mouseY);\n      ctx.stroke();\n      ctx.closePath();\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n      ctx.globalCompositeOperation = 'destination-out'; // Set composite operation to erase existing shapes\n      ctx.beginPath();\n      ctx.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    } else {\n      const newShapes = [...shapes];\n      const shape = newShapes[selectedShapeIndex];\n      if (!isResizing) {\n        shape.x = mouseX - dragStartX;\n        shape.y = mouseY - dragStartY;\n      } else {\n        const dx = mouseX - shape.x - resizeStartX;\n        const dy = mouseY - shape.y - resizeStartY;\n        shape.width += dx;\n        shape.height += dy;\n        setResizeStartX(mouseX - shape.x);\n        setResizeStartY(mouseY - shape.y);\n      }\n      setShapes(newShapes);\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setIsResizing(false);\n  };\n  const isResizingHandle = (x, y, shape) => {\n    return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width && y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n  };\n  const drawShape = (ctx, shape, isSelected, isResizing) => {\n    ctx.beginPath();\n    ctx.rect(shape.x, shape.y, shape.width, shape.height);\n    ctx.strokeStyle = isSelected ? 'red' : shape.color;\n    ctx.lineWidth = shape.lineWidth;\n    ctx.stroke();\n  };\n  const handleDeleteShape = () => {\n    if (selectedShapeIndex !== null) {\n      const newShapes = [...shapes];\n      newShapes.splice(selectedShapeIndex, 1);\n      setShapes(newShapes);\n      setSelectedShapeIndex(null);\n    }\n  };\n  const handleSave = () => {\n    const canvas = canvasRef.current;\n    canvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n  const handleAddShape = type => {\n    const newShapes = [...shapes];\n    if (type === 'square') {\n      newShapes.push({\n        type: 'square',\n        x: 100,\n        y: 100,\n        width: 50,\n        height: 50,\n        color: 'red',\n        lineWidth: 2\n      });\n    } else if (type === 'rectangle') {\n      newShapes.push({\n        type: 'rectangle',\n        x: 200,\n        y: 200,\n        width: 80,\n        height: 40,\n        color: 'blue',\n        lineWidth: 2\n      });\n    }\n    setShapes(newShapes);\n  };\n  const handleZoomIn = () => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const zoomFactor = 1.1;\n    const newShapes = shapes.map(shape => {\n      if (shape.type === 'square' || shape.type === 'rectangle') {\n        shape.x = centerX + (shape.x - centerX) * zoomFactor;\n        shape.y = centerY + (shape.y - centerY) * zoomFactor;\n        shape.width *= zoomFactor;\n        shape.height *= zoomFactor;\n      } else if (shape.type === 'circle') {\n        shape.x = centerX + (shape.x - centerX) * zoomFactor;\n        shape.y = centerY + (shape.y - centerY) * zoomFactor;\n        shape.radius *= zoomFactor;\n      }\n      return shape;\n    });\n    setShapes(newShapes);\n  };\n  const handleZoomOut = () => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const zoomFactor = 0.9;\n    const newShapes = shapes.map(shape => {\n      shape.x = centerX + (shape.x - centerX) * zoomFactor;\n      shape.y = centerY + (shape.y - centerY) * zoomFactor;\n      shape.width *= zoomFactor;\n      shape.height *= zoomFactor;\n      return shape;\n    });\n    setShapes(newShapes);\n  };\n  const togglePenMode = () => {\n    setPenMode(!penMode);\n    setRubberMode(false); // Ensure rubber mode is turned off when switching to pen mode\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  };\n  const handleToggleRubberMode = () => {\n    setRubberMode(!rubberMode);\n    setPenMode(false); // Ensure pen mode is turned off when switching to rubber mode\n  };\n  const isPointInsideShape = (x, y, shape) => {\n    if (shape.type === 'square' || shape.type === 'rectangle') {\n      return x >= shape.x && x <= shape.x + shape.width && y >= shape.y && y <= shape.y + shape.height;\n    } else if (shape.type === 'circle') {\n      const dx = x - shape.x;\n      const dy = y - shape.y;\n      return dx * dx + dy * dy <= shape.radius * shape.radius;\n    }\n    return false;\n  };\n  const handleTogglePenMode = () => {\n    setPenMode(!penMode);\n    setRubberMode(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: e => handleMouseMove(e, context),\n      onMouseUp: handleMouseUp,\n      style: {\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        children: \"Zoom In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        children: \"Zoom Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePenMode,\n        children: penMode ? 'Switch to Eraser' : 'Switch to Pen'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }, this), selectedShapeIndex !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteShape,\n        style: {\n          position: 'absolute',\n          top: shapes[selectedShapeIndex].y - 50,\n          left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast,\n      onAddRectangle: () => handleAddShape('rectangle'),\n      onTogglePenMode: handleTogglePenMode,\n      onToggleRubberMode: handleToggleRubberMode // Pass handleToggleRubberMode as a prop\n      ,\n      onPenColorChange: setPenColor,\n      onPenThicknessChange: setPenThickness,\n      penMode: penMode,\n      rubberMode: rubberMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"v4BK0iGhMdrXZe8mly+dgX4Eq7A=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","canvasRef","context","setContext","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDragging","setIsDragging","dragStartX","setDragStartX","dragStartY","setDragStartY","isResizing","setIsResizing","resizeIndex","setResizeIndex","resizeStartX","setResizeStartX","resizeStartY","setResizeStartY","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","penMode","setPenMode","rubberMode","setRubberMode","penColor","setPenColor","penThickness","setPenThickness","imageCanvasRef","reader","FileReader","onload","result","readAsDataURL","canvas","current","ctx","getContext","img","Image","width","height","filter","drawImage","forEach","shape","index","drawShape","src","imageCanvas","imageCtx","handleMouseDown","e","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","globalCompositeOperation","strokeStyle","lineWidth","shapeSelected","isPointInsideShape","x","y","isResizingHandle","handleMouseMove","lineCap","beginPath","moveTo","lineTo","stroke","closePath","arc","Math","PI","fill","newShapes","dx","dy","handleMouseUp","isSelected","color","handleDeleteShape","splice","handleSave","toBlob","blob","handleAddShape","type","push","handleZoomIn","centerX","centerY","zoomFactor","map","radius","handleZoomOut","togglePenMode","clearCanvas","clearRect","handleToggleRubberMode","handleTogglePenMode","className","children","ref","onMouseDown","onMouseMove","onMouseUp","style","border","fileName","_jsxFileName","lineNumber","columnNumber","onClick","position","onBrightnessChange","onContrastChange","onAddRectangle","onTogglePenMode","onToggleRubberMode","onPenColorChange","onPenThicknessChange","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const canvasRef = useRef(null);\n    const [context, setContext] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [dragStartX, setDragStartX] = useState(0);\n    const [dragStartY, setDragStartY] = useState(0);\n    const [isResizing, setIsResizing] = useState(false);\n    const [resizeIndex, setResizeIndex] = useState(-1);\n    const [resizeStartX, setResizeStartX] = useState(0);\n    const [resizeStartY, setResizeStartY] = useState(0);\n    const [prevMouseX, setPrevMouseX] = useState(0);\n    const [prevMouseY, setPrevMouseY] = useState(0);\n\n    const [penMode, setPenMode] = useState(false);\n    const [rubberMode, setRubberMode] = useState(false);\n    const [penColor, setPenColor] = useState('#000000');\n    const [penThickness, setPenThickness] = useState(2);\n\n    const imageCanvasRef = useRef(null);\n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        setContext(ctx);\n        if (context && imageSrc) {\n            const img = new Image();\n            img.onload = () => {\n                canvas.width = img.width;\n                canvas.height = img.height;\n                ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                ctx.drawImage(img, 0, 0);\n                shapes.forEach((shape, index) => {\n                    drawShape(ctx, shape, index === selectedShapeIndex, index === resizeIndex);\n                });\n            };\n            img.src = imageSrc;\n        }\n    }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n\n    useEffect(() => {\n        const imageCanvas = imageCanvasRef.current;\n        const imageCtx = imageCanvas.getContext('2d');\n        if (imageSrc) {\n            const img = new Image();\n            img.onload = () => {\n                imageCanvas.width = img.width;\n                imageCanvas.height = img.height;\n                imageCtx.drawImage(img, 0, 0);\n            };\n            img.src = imageSrc;\n        }\n    }, [imageSrc]);\n\n    const handleMouseDown = (e) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        if (penMode) {\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else if (rubberMode) {\n            const ctx = canvas.getContext('2d');\n            ctx.globalCompositeOperation = 'destination-out';\n            ctx.strokeStyle = 'rgba(0,0,0,0)';\n            ctx.lineWidth = penThickness;\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else {\n            let shapeSelected = false;\n            shapes.forEach((shape, index) => {\n                if (isPointInsideShape(mouseX, mouseY, shape)) {\n                    setSelectedShapeIndex(index);\n                    setIsDragging(true);\n                    setDragStartX(mouseX - shape.x);\n                    setDragStartY(mouseY - shape.y);\n                    setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n                    if (isResizing) {\n                        setResizeIndex(index);\n                        setResizeStartX(mouseX - shape.x);\n                        setResizeStartY(mouseY - shape.y);\n                    }\n                    shapeSelected = true;\n                }\n            });\n\n            if (!shapeSelected) {\n                setSelectedShapeIndex(null);\n            }\n        }\n    };\n\n    const handleMouseMove = (e, ctx) => {\n        if (!isDragging || (penMode && !rubberMode && !isDragging)) return;\n\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n\n    if (penMode) {\n        ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n        ctx.lineWidth = penThickness;\n        ctx.lineCap = 'round';\n        ctx.beginPath();\n        ctx.moveTo(prevMouseX, prevMouseY);\n        ctx.lineTo(mouseX, mouseY);\n        ctx.stroke();\n        ctx.closePath();\n        setPrevMouseX(mouseX);\n        setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n        ctx.globalCompositeOperation = 'destination-out'; // Set composite operation to erase existing shapes\n        ctx.beginPath();\n        ctx.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n        ctx.fill();\n    } else {\n            const newShapes = [...shapes];\n            const shape = newShapes[selectedShapeIndex];\n            if (!isResizing) {\n                shape.x = mouseX - dragStartX;\n                shape.y = mouseY - dragStartY;\n            } else {\n                const dx = mouseX - shape.x - resizeStartX;\n                const dy = mouseY - shape.y - resizeStartY;\n                shape.width += dx;\n                shape.height += dy;\n                setResizeStartX(mouseX - shape.x);\n                setResizeStartY(mouseY - shape.y);\n            }\n            setShapes(newShapes);\n        }\n    };\n\n    const handleMouseUp = () => {\n        setIsDragging(false);\n        setIsResizing(false);\n    };\n\n    const isResizingHandle = (x, y, shape) => {\n        return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width &&\n            y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n    };\n\n    const drawShape = (ctx, shape, isSelected, isResizing) => {\n        ctx.beginPath();\n        ctx.rect(shape.x, shape.y, shape.width, shape.height);\n        ctx.strokeStyle = isSelected ? 'red' : shape.color;\n        ctx.lineWidth = shape.lineWidth;\n        ctx.stroke();\n    };\n\n    const handleDeleteShape = () => {\n        if (selectedShapeIndex !== null) {\n            const newShapes = [...shapes];\n            newShapes.splice(selectedShapeIndex, 1);\n            setShapes(newShapes);\n            setSelectedShapeIndex(null);\n        }\n    };\n\n    const handleSave = () => {\n        const canvas = canvasRef.current;\n        canvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n\n    const handleAddShape = (type) => {\n        const newShapes = [...shapes];\n        if (type === 'square') {\n            newShapes.push({\n                type: 'square',\n                x: 100,\n                y: 100,\n                width: 50,\n                height: 50,\n                color: 'red',\n                lineWidth: 2,\n            });\n        } else if (type === 'rectangle') {\n            newShapes.push({\n                type: 'rectangle',\n                x: 200,\n                y: 200,\n                width: 80,\n                height: 40,\n                color: 'blue',\n                lineWidth: 2,\n            });\n        }\n        setShapes(newShapes);\n    };\n\n    const handleZoomIn = () => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const zoomFactor = 1.1;\n        const newShapes = shapes.map(shape => {\n            if (shape.type === 'square' || shape.type === 'rectangle') {\n                shape.x = centerX + (shape.x - centerX) * zoomFactor;\n                shape.y = centerY + (shape.y - centerY) * zoomFactor;\n                shape.width *= zoomFactor;\n                shape.height *= zoomFactor;\n            } else if (shape.type === 'circle') {\n                shape.x = centerX + (shape.x - centerX) * zoomFactor;\n                shape.y = centerY + (shape.y - centerY) * zoomFactor;\n                shape.radius *= zoomFactor;\n            }\n            return shape;\n        });\n        setShapes(newShapes);\n    };\n\n    const handleZoomOut = () => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const zoomFactor = 0.9;\n        const newShapes = shapes.map(shape => {\n            shape.x = centerX + (shape.x - centerX) * zoomFactor;\n            shape.y = centerY + (shape.y - centerY) * zoomFactor;\n            shape.width *= zoomFactor;\n            shape.height *= zoomFactor;\n            return shape;\n        });\n        setShapes(newShapes);\n    };\n\n\n    const togglePenMode = () => {\n        setPenMode(!penMode);\n        setRubberMode(false); // Ensure rubber mode is turned off when switching to pen mode\n    };\n\n    const clearCanvas = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    const handleToggleRubberMode = () => {\n        setRubberMode(!rubberMode);\n        setPenMode(false); // Ensure pen mode is turned off when switching to rubber mode\n    };\n    \n\n    const isPointInsideShape = (x, y, shape) => {\n        if (shape.type === 'square' || shape.type === 'rectangle') {\n            return x >= shape.x && x <= (shape.x + shape.width) &&\n                y >= shape.y && y <= (shape.y + shape.height);\n        } else if (shape.type === 'circle') {\n            const dx = x - shape.x;\n            const dy = y - shape.y;\n            return dx * dx + dy * dy <= shape.radius * shape.radius;\n        }\n        return false;\n    };\n\n    const handleTogglePenMode = () => {\n        setPenMode(!penMode);\n        setRubberMode(false);\n    };\n    \n\n    return (\n        <div className=\"image-viewer\">\n            <canvas\n                ref={canvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={(e) => handleMouseMove(e, context)}\n                onMouseUp={handleMouseUp}\n                style={{border: '1px solid black'}}\n            />\n            <div className=\"controls\">\n                <button onClick={handleZoomIn}>Zoom In</button>\n                <button onClick={handleZoomOut}>Zoom Out</button>\n                <button onClick={handleSave}>Save</button>\n                <button onClick={onClose}>Close</button>\n                <button onClick={togglePenMode}>{penMode ? 'Switch to Eraser' : 'Switch to Pen'}</button>\n                <button onClick={clearCanvas}>Clear Canvas</button>\n                {selectedShapeIndex !== null && (\n                    <button onClick={handleDeleteShape} style={{\n                        position: 'absolute',\n                        top: shapes[selectedShapeIndex].y - 50,\n                        left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n                    }}>X</button>\n                )}\n            </div>\n\n            <SideToolbar\n                onBrightnessChange={setBrightness}\n                onContrastChange={setContrast}\n                onAddRectangle={() => handleAddShape('rectangle')}\n                onTogglePenMode={handleTogglePenMode}\n                onToggleRubberMode={handleToggleRubberMode} // Pass handleToggleRubberMode as a prop\n                onPenColorChange={setPenColor}\n                onPenThicknessChange={setPenThickness}\n                penMode={penMode}\n                rubberMode={rubberMode}\n            />\n\n\n\n        </div>\n    );\n}\n\nexport default ImageViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}