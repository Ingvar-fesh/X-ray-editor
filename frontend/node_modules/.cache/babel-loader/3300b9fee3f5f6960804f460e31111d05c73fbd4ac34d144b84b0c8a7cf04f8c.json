{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const imageCanvasRef = useRef(null);\n  const drawingCanvasRef = useRef(null);\n  const [imageContext, setImageContext] = useState(null);\n  const [drawingContext, setDrawingContext] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeIndex, setResizeIndex] = useState(-1);\n  const [resizeStartX, setResizeStartX] = useState(0);\n  const [resizeStartY, setResizeStartY] = useState(0);\n  const [prevMouseX, setPrevMouseX] = useState(0);\n  const [prevMouseY, setPrevMouseY] = useState(0);\n  const [penMode, setPenMode] = useState(false);\n  const [rubberMode, setRubberMode] = useState(false);\n  const [penColor, setPenColor] = useState('#000000');\n  const [penThickness, setPenThickness] = useState(2);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const imageCanvas = imageCanvasRef.current;\n    const ctx = imageCanvas.getContext('2d');\n    setImageContext(ctx);\n  }, []);\n  useEffect(() => {\n    const drawingCanvas = drawingCanvasRef.current;\n    const ctx = drawingCanvas.getContext('2d');\n    setDrawingContext(ctx);\n  }, []);\n  useEffect(() => {\n    if (imageContext && imageSrc) {\n      const img = new Image();\n      img.onload = () => {\n        imageContext.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n        imageContext.drawImage(img, 0, 0, img.width, img.height);\n      };\n      img.src = imageSrc;\n    }\n  }, [imageContext, imageSrc, brightness, contrast]);\n  const handleMouseDown = e => {\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    if (penMode) {\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n      const ctx = drawingContext;\n      ctx.globalCompositeOperation = 'destination-out';\n      ctx.strokeStyle = 'rgba(0,0,0,0)';\n      ctx.lineWidth = penThickness;\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else {\n      let shapeSelected = false;\n      shapes.forEach((shape, index) => {\n        if (isPointInsideShape(mouseX, mouseY, shape)) {\n          setSelectedShapeIndex(index);\n          setIsDragging(true);\n          setDragStartX(mouseX - shape.x);\n          setDragStartY(mouseY - shape.y);\n          setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n          if (isResizing) {\n            setResizeIndex(index);\n            setResizeStartX(mouseX - shape.x);\n            setResizeStartY(mouseY - shape.y);\n          }\n          shapeSelected = true;\n        }\n      });\n      if (!shapeSelected) {\n        setSelectedShapeIndex(null);\n      }\n    }\n  };\n  const handleMouseMove = (e, ctx) => {\n    if (!isDragging || penMode && !rubberMode && !isDragging) return;\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    if (penMode) {\n      ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n      ctx.lineWidth = penThickness;\n      ctx.lineCap = 'round';\n      ctx.beginPath();\n      ctx.moveTo(prevMouseX, prevMouseY);\n      ctx.lineTo(mouseX, mouseY);\n      ctx.stroke();\n      ctx.closePath();\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n      ctx.globalCompositeOperation = 'destination-out';\n      ctx.beginPath();\n      ctx.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    } else {\n      const newShapes = [...shapes];\n      const shape = newShapes[selectedShapeIndex];\n      if (!isResizing) {\n        shape.x = mouseX - dragStartX;\n        shape.y = mouseY - dragStartY;\n      } else {\n        const dx = mouseX - shape.x - resizeStartX;\n        const dy = mouseY - shape.y - resizeStartY;\n        shape.width += dx;\n        shape.height += dy;\n        setResizeStartX(mouseX - shape.x);\n        setResizeStartY(mouseY - shape.y);\n      }\n      setShapes(newShapes);\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setIsResizing(false);\n  };\n  const isResizingHandle = (x, y, shape) => {\n    return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width && y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n  };\n  const drawShape = (ctx, shape, isSelected, isResizing) => {\n    ctx.beginPath();\n    ctx.rect(shape.x, shape.y, shape.width, shape.height);\n    ctx.strokeStyle = isSelected ? 'red' : shape.color;\n    ctx.lineWidth = shape.lineWidth;\n    ctx.stroke();\n  };\n  const handleDeleteShape = () => {\n    if (selectedShapeIndex !== null) {\n      const newShapes = [...shapes];\n      newShapes.splice(selectedShapeIndex, 1);\n      setShapes(newShapes);\n      setSelectedShapeIndex(null);\n    }\n  };\n  const handleSave = () => {\n    const canvas = canvasRef.current;\n    canvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n  const handleAddShape = type => {\n    const newShapes = [...shapes];\n    if (type === 'square') {\n      newShapes.push({\n        type: 'square',\n        x: 100,\n        y: 100,\n        width: 50,\n        height: 50,\n        color: 'red',\n        lineWidth: 2\n      });\n    } else if (type === 'rectangle') {\n      newShapes.push({\n        type: 'rectangle',\n        x: 200,\n        y: 200,\n        width: 80,\n        height: 40,\n        color: 'blue',\n        lineWidth: 2\n      });\n    }\n    setShapes(newShapes);\n  };\n  const handleZoomIn = () => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const zoomFactor = 1.1;\n    const newShapes = shapes.map(shape => {\n      if (shape.type === 'square' || shape.type === 'rectangle') {\n        shape.x = centerX + (shape.x - centerX) * zoomFactor;\n        shape.y = centerY + (shape.y - centerY) * zoomFactor;\n        shape.width *= zoomFactor;\n        shape.height *= zoomFactor;\n      } else if (shape.type === 'circle') {\n        shape.x = centerX + (shape.x - centerX) * zoomFactor;\n        shape.y = centerY + (shape.y - centerY) * zoomFactor;\n        shape.radius *= zoomFactor;\n      }\n      return shape;\n    });\n    setShapes(newShapes);\n  };\n  const handleZoomOut = () => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const zoomFactor = 0.9;\n    const newShapes = shapes.map(shape => {\n      shape.x = centerX + (shape.x - centerX) * zoomFactor;\n      shape.y = centerY + (shape.y - centerY) * zoomFactor;\n      shape.width *= zoomFactor;\n      shape.height *= zoomFactor;\n      return shape;\n    });\n    setShapes(newShapes);\n  };\n  const togglePenMode = () => {\n    setPenMode(!penMode);\n    setRubberMode(false); // Ensure rubber mode is turned off when switching to pen mode\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  };\n  const handleToggleRubberMode = () => {\n    setRubberMode(!rubberMode);\n    setPenMode(false); // Ensure pen mode is turned off when switching to rubber mode\n  };\n  const isPointInsideShape = (x, y, shape) => {\n    if (shape.type === 'square' || shape.type === 'rectangle') {\n      return x >= shape.x && x <= shape.x + shape.width && y >= shape.y && y <= shape.y + shape.height;\n    } else if (shape.type === 'circle') {\n      const dx = x - shape.x;\n      const dy = y - shape.y;\n      return dx * dx + dy * dy <= shape.radius * shape.radius;\n    }\n    return false;\n  };\n  const handleTogglePenMode = () => {\n    setPenMode(!penMode);\n    setRubberMode(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: imageCanvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        pointerEvents: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: drawingCanvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      style: {\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        children: \"Zoom In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        children: \"Zoom Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePenMode,\n        children: penMode ? 'Switch to Eraser' : 'Switch to Pen'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this), selectedShapeIndex !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteShape,\n        style: {\n          position: 'absolute',\n          top: shapes[selectedShapeIndex].y - 50,\n          left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast,\n      onAddRectangle: () => handleAddShape('rectangle'),\n      onTogglePenMode: handleTogglePenMode,\n      onToggleRubberMode: handleToggleRubberMode // Pass handleToggleRubberMode as a prop\n      ,\n      onPenColorChange: setPenColor,\n      onPenThicknessChange: setPenThickness,\n      penMode: penMode,\n      rubberMode: rubberMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"giE0lqGxjIKULgfsmhoLYUwPXW8=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","imageCanvasRef","drawingCanvasRef","imageContext","setImageContext","drawingContext","setDrawingContext","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDragging","setIsDragging","dragStartX","setDragStartX","dragStartY","setDragStartY","isResizing","setIsResizing","resizeIndex","setResizeIndex","resizeStartX","setResizeStartX","resizeStartY","setResizeStartY","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","penMode","setPenMode","rubberMode","setRubberMode","penColor","setPenColor","penThickness","setPenThickness","reader","FileReader","onload","result","readAsDataURL","imageCanvas","current","ctx","getContext","drawingCanvas","img","Image","filter","drawImage","width","height","src","handleMouseDown","e","canvas","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","globalCompositeOperation","strokeStyle","lineWidth","shapeSelected","forEach","shape","index","isPointInsideShape","x","y","isResizingHandle","handleMouseMove","lineCap","beginPath","moveTo","lineTo","stroke","closePath","arc","Math","PI","fill","newShapes","dx","dy","handleMouseUp","drawShape","isSelected","color","handleDeleteShape","splice","handleSave","canvasRef","toBlob","blob","handleAddShape","type","push","handleZoomIn","centerX","centerY","zoomFactor","map","radius","handleZoomOut","togglePenMode","clearCanvas","clearRect","handleToggleRubberMode","handleTogglePenMode","className","children","ref","style","position","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseMove","onMouseUp","border","onClick","onBrightnessChange","onContrastChange","onAddRectangle","onTogglePenMode","onToggleRubberMode","onPenColorChange","onPenThicknessChange","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const imageCanvasRef = useRef(null);\n    const drawingCanvasRef = useRef(null);\n    const [imageContext, setImageContext] = useState(null);\n    const [drawingContext, setDrawingContext] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [dragStartX, setDragStartX] = useState(0);\n    const [dragStartY, setDragStartY] = useState(0);\n    const [isResizing, setIsResizing] = useState(false);\n    const [resizeIndex, setResizeIndex] = useState(-1);\n    const [resizeStartX, setResizeStartX] = useState(0);\n    const [resizeStartY, setResizeStartY] = useState(0);\n    const [prevMouseX, setPrevMouseX] = useState(0);\n    const [prevMouseY, setPrevMouseY] = useState(0);\n\n    const [penMode, setPenMode] = useState(false);\n    const [rubberMode, setRubberMode] = useState(false);\n    const [penColor, setPenColor] = useState('#000000');\n    const [penThickness, setPenThickness] = useState(2);\n    \n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const imageCanvas = imageCanvasRef.current;\n        const ctx = imageCanvas.getContext('2d');\n        setImageContext(ctx);\n    }, []);\n\n    useEffect(() => {\n        const drawingCanvas = drawingCanvasRef.current;\n        const ctx = drawingCanvas.getContext('2d');\n        setDrawingContext(ctx);\n    }, []);\n\n\n    useEffect(() => {\n        if (imageContext && imageSrc) {\n            const img = new Image();\n            img.onload = () => {\n                imageContext.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                imageContext.drawImage(img, 0, 0, img.width, img.height);\n            };\n            img.src = imageSrc;\n        }\n    }, [imageContext, imageSrc, brightness, contrast]);\n\n\n    const handleMouseDown = (e) => {\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        if (penMode) {\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else if (rubberMode) {\n            const ctx = drawingContext;\n            ctx.globalCompositeOperation = 'destination-out';\n            ctx.strokeStyle = 'rgba(0,0,0,0)';\n            ctx.lineWidth = penThickness;\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else {\n            let shapeSelected = false;\n            shapes.forEach((shape, index) => {\n                if (isPointInsideShape(mouseX, mouseY, shape)) {\n                    setSelectedShapeIndex(index);\n                    setIsDragging(true);\n                    setDragStartX(mouseX - shape.x);\n                    setDragStartY(mouseY - shape.y);\n                    setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n                    if (isResizing) {\n                        setResizeIndex(index);\n                        setResizeStartX(mouseX - shape.x);\n                        setResizeStartY(mouseY - shape.y);\n                    }\n                    shapeSelected = true;\n                }\n            });\n\n            if (!shapeSelected) {\n                setSelectedShapeIndex(null);\n            }\n        }\n    };\n\n    const handleMouseMove = (e, ctx) => {\n        if (!isDragging || (penMode && !rubberMode && !isDragging)) return;\n\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n    \n        if (penMode) {\n            ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n            ctx.lineWidth = penThickness;\n            ctx.lineCap = 'round';\n            ctx.beginPath();\n            ctx.moveTo(prevMouseX, prevMouseY);\n            ctx.lineTo(mouseX, mouseY);\n            ctx.stroke();\n            ctx.closePath();\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else if (rubberMode) {\n            ctx.globalCompositeOperation = 'destination-out';\n            ctx.beginPath();\n            ctx.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n            ctx.fill();\n        } else {\n            const newShapes = [...shapes];\n            const shape = newShapes[selectedShapeIndex];\n            if (!isResizing) {\n                shape.x = mouseX - dragStartX;\n                shape.y = mouseY - dragStartY;\n            } else {\n                const dx = mouseX - shape.x - resizeStartX;\n                const dy = mouseY - shape.y - resizeStartY;\n                shape.width += dx;\n                shape.height += dy;\n                setResizeStartX(mouseX - shape.x);\n                setResizeStartY(mouseY - shape.y);\n            }\n            setShapes(newShapes);\n        }\n    };\n\n    const handleMouseUp = () => {\n        setIsDragging(false);\n        setIsResizing(false);\n    };\n\n\n    const isResizingHandle = (x, y, shape) => {\n        return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width &&\n            y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n    };\n\n    const drawShape = (ctx, shape, isSelected, isResizing) => {\n        ctx.beginPath();\n        ctx.rect(shape.x, shape.y, shape.width, shape.height);\n        ctx.strokeStyle = isSelected ? 'red' : shape.color;\n        ctx.lineWidth = shape.lineWidth;\n        ctx.stroke();\n    };\n\n    const handleDeleteShape = () => {\n        if (selectedShapeIndex !== null) {\n            const newShapes = [...shapes];\n            newShapes.splice(selectedShapeIndex, 1);\n            setShapes(newShapes);\n            setSelectedShapeIndex(null);\n        }\n    };\n\n    const handleSave = () => {\n        const canvas = canvasRef.current;\n        canvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n\n    const handleAddShape = (type) => {\n        const newShapes = [...shapes];\n        if (type === 'square') {\n            newShapes.push({\n                type: 'square',\n                x: 100,\n                y: 100,\n                width: 50,\n                height: 50,\n                color: 'red',\n                lineWidth: 2,\n            });\n        } else if (type === 'rectangle') {\n            newShapes.push({\n                type: 'rectangle',\n                x: 200,\n                y: 200,\n                width: 80,\n                height: 40,\n                color: 'blue',\n                lineWidth: 2,\n            });\n        }\n        setShapes(newShapes);\n    };\n\n    const handleZoomIn = () => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const zoomFactor = 1.1;\n        const newShapes = shapes.map(shape => {\n            if (shape.type === 'square' || shape.type === 'rectangle') {\n                shape.x = centerX + (shape.x - centerX) * zoomFactor;\n                shape.y = centerY + (shape.y - centerY) * zoomFactor;\n                shape.width *= zoomFactor;\n                shape.height *= zoomFactor;\n            } else if (shape.type === 'circle') {\n                shape.x = centerX + (shape.x - centerX) * zoomFactor;\n                shape.y = centerY + (shape.y - centerY) * zoomFactor;\n                shape.radius *= zoomFactor;\n            }\n            return shape;\n        });\n        setShapes(newShapes);\n    };\n\n    const handleZoomOut = () => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const zoomFactor = 0.9;\n        const newShapes = shapes.map(shape => {\n            shape.x = centerX + (shape.x - centerX) * zoomFactor;\n            shape.y = centerY + (shape.y - centerY) * zoomFactor;\n            shape.width *= zoomFactor;\n            shape.height *= zoomFactor;\n            return shape;\n        });\n        setShapes(newShapes);\n    };\n\n\n    const togglePenMode = () => {\n        setPenMode(!penMode);\n        setRubberMode(false); // Ensure rubber mode is turned off when switching to pen mode\n    };\n\n    const clearCanvas = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    const handleToggleRubberMode = () => {\n        setRubberMode(!rubberMode);\n        setPenMode(false); // Ensure pen mode is turned off when switching to rubber mode\n    };\n    \n\n    const isPointInsideShape = (x, y, shape) => {\n        if (shape.type === 'square' || shape.type === 'rectangle') {\n            return x >= shape.x && x <= (shape.x + shape.width) &&\n                y >= shape.y && y <= (shape.y + shape.height);\n        } else if (shape.type === 'circle') {\n            const dx = x - shape.x;\n            const dy = y - shape.y;\n            return dx * dx + dy * dy <= shape.radius * shape.radius;\n        }\n        return false;\n    };\n\n    const handleTogglePenMode = () => {\n        setPenMode(!penMode);\n        setRubberMode(false);\n    };\n    \n\n    return (\n        <div className=\"image-viewer\">\n            <canvas\n                ref={imageCanvasRef}\n                style={{ position: 'absolute', top: 0, left: 0, pointerEvents: 'none' }}\n            />\n            <canvas\n                ref={drawingCanvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                style={{ border: '1px solid black' }}\n            />\n            <div className=\"controls\">\n                <button onClick={handleZoomIn}>Zoom In</button>\n                <button onClick={handleZoomOut}>Zoom Out</button>\n                <button onClick={handleSave}>Save</button>\n                <button onClick={onClose}>Close</button>\n                <button onClick={togglePenMode}>{penMode ? 'Switch to Eraser' : 'Switch to Pen'}</button>\n                <button onClick={clearCanvas}>Clear Canvas</button>\n                {selectedShapeIndex !== null && (\n                    <button onClick={handleDeleteShape} style={{\n                        position: 'absolute',\n                        top: shapes[selectedShapeIndex].y - 50,\n                        left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n                    }}>X</button>\n                )}\n            </div>\n\n            <SideToolbar\n                onBrightnessChange={setBrightness}\n                onContrastChange={setContrast}\n                onAddRectangle={() => handleAddShape('rectangle')}\n                onTogglePenMode={handleTogglePenMode}\n                onToggleRubberMode={handleToggleRubberMode} // Pass handleToggleRubberMode as a prop\n                onPenColorChange={setPenColor}\n                onPenThicknessChange={setPenThickness}\n                penMode={penMode}\n                rubberMode={rubberMode}\n            />\n\n\n\n        </div>\n    );\n}\n\nexport default ImageViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}