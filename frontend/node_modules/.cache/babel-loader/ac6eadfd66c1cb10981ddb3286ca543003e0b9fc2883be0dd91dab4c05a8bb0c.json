{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeIndex, setResizeIndex] = useState(-1);\n  const [resizeStartX, setResizeStartX] = useState(0);\n  const [resizeStartY, setResizeStartY] = useState(0);\n  const [prevMouseX, setPrevMouseX] = useState(0); // New state variable\n  const [prevMouseY, setPrevMouseY] = useState(0); // New state variable\n\n  const [penMode, setPenMode] = useState(false);\n  const [rubberMode, setRubberMode] = useState(false);\n  const [penColor, setPenColor] = useState('#000000');\n  const [penThickness, setPenThickness] = useState(2);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    setContext(ctx);\n    if (context && imageSrc) {\n      const img = new Image();\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n        ctx.drawImage(img, 0, 0);\n        shapes.forEach((shape, index) => {\n          drawShape(ctx, shape, index === selectedShapeIndex, index === resizeIndex);\n        });\n      };\n      img.src = imageSrc;\n    }\n  }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n  const handleMouseDown = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n\n    // Check if the click occurred inside the canvas\n    if (mouseX < 0 || mouseY < 0 || mouseX >= canvas.width || mouseY >= canvas.height) {\n      return;\n    }\n    if (penMode) {\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else {\n      let shapeSelected = false;\n      shapes.forEach((shape, index) => {\n        if (isPointInsideShape(mouseX, mouseY, shape)) {\n          setSelectedShapeIndex(index);\n          setIsDragging(true);\n          setDragStartX(mouseX - shape.x);\n          setDragStartY(mouseY - shape.y);\n          setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n          if (isResizing) {\n            setResizeIndex(index);\n            setResizeStartX(mouseX - (shape.x + shape.width));\n            setResizeStartY(mouseY - (shape.y + shape.height));\n          }\n          shapeSelected = true;\n        }\n      });\n      if (!shapeSelected) {\n        setSelectedShapeIndex(null);\n      }\n    }\n  };\n  const handleMouseMove = e => {\n    if (!isDragging || penMode && !rubberMode && selectedShapeIndex === null) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    if (penMode && !rubberMode) {\n      const ctx = canvas.getContext('2d');\n      ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n      ctx.lineWidth = penThickness;\n      ctx.lineCap = 'round';\n      ctx.beginPath();\n      ctx.moveTo(prevMouseX, prevMouseY);\n      ctx.lineTo(mouseX, mouseY);\n      ctx.stroke();\n      ctx.closePath();\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else {\n      const newShapes = [...shapes];\n      const shape = newShapes[selectedShapeIndex];\n      if (!isResizing) {\n        shape.x = mouseX - dragStartX;\n        shape.y = mouseY - dragStartY;\n      } else {\n        shape.width = mouseX - shape.x + resizeStartX;\n        shape.height = mouseY - shape.y + resizeStartY;\n      }\n      setShapes(newShapes);\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setIsResizing(false);\n  };\n  const isResizingHandle = (x, y, shape) => {\n    return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width && y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n  };\n  const drawPenLine = (startX, startY, endX, endY) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n    ctx.lineWidth = penThickness;\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.moveTo(startX, startY);\n    ctx.lineTo(endX, endY);\n    ctx.stroke();\n    ctx.closePath();\n  };\n  const drawShape = (ctx, shape, isSelected, isResizing) => {\n    ctx.beginPath();\n    ctx.rect(shape.x, shape.y, shape.width, shape.height);\n    ctx.strokeStyle = isSelected ? 'red' : shape.color;\n    ctx.lineWidth = shape.lineWidth;\n    ctx.stroke();\n  };\n  const handleDeleteShape = () => {\n    if (selectedShapeIndex !== null) {\n      const newShapes = [...shapes];\n      newShapes.splice(selectedShapeIndex, 1);\n      setShapes(newShapes);\n      setSelectedShapeIndex(null);\n    }\n  };\n  const handleSave = () => {\n    const canvas = canvasRef.current;\n    canvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n  const handleAddShape = type => {\n    const newShapes = [...shapes];\n    if (type === 'square') {\n      newShapes.push({\n        type: 'square',\n        x: 100,\n        y: 100,\n        width: 50,\n        height: 50,\n        color: 'red',\n        lineWidth: 2\n      });\n    } else if (type === 'rectangle') {\n      newShapes.push({\n        type: 'rectangle',\n        x: 200,\n        y: 200,\n        width: 80,\n        height: 40,\n        color: 'blue',\n        lineWidth: 2\n      });\n    }\n    // Include drawn lines in the new shape\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    newShapes[newShapes.length - 1].imageData = imageData;\n    setShapes(newShapes);\n  };\n  const handlePenModeChange = mode => {\n    setPenMode(mode);\n  };\n  const handleRubberModeChange = mode => {\n    setRubberMode(mode);\n  };\n  const isPointInsideShape = (x, y, shape) => {\n    if (shape.type === 'square' || shape.type === 'rectangle') {\n      return x >= shape.x && x <= shape.x + shape.width && y >= shape.y && y <= shape.y + shape.height;\n    } else if (shape.type === 'circle') {\n      const dx = x - shape.x;\n      const dy = y - shape.y;\n      return dx * dx + dy * dy <= shape.radius * shape.radius;\n    }\n    return false;\n  };\n  const handleZoomIn = () => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const zoomFactor = 1.1;\n    const newShapes = shapes.map(shape => {\n      if (shape.type === 'square' || shape.type === 'rectangle') {\n        shape.x = centerX + (shape.x - centerX) * zoomFactor;\n        shape.y = centerY + (shape.y - centerY) * zoomFactor;\n        shape.width *= zoomFactor;\n        shape.height *= zoomFactor;\n      } else if (shape.type === 'circle') {\n        shape.x = centerX + (shape.x - centerX) * zoomFactor;\n        shape.y = centerY + (shape.y - centerY) * zoomFactor;\n        shape.radius *= zoomFactor;\n      }\n      return shape;\n    });\n    setShapes(newShapes);\n  };\n  const handleZoomOut = () => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const zoomFactor = 0.9;\n    const newShapes = shapes.map(shape => {\n      shape.x = centerX + (shape.x - centerX) * zoomFactor;\n      shape.y = centerY + (shape.y - centerY) * zoomFactor;\n      shape.width *= zoomFactor;\n      shape.height *= zoomFactor;\n      return shape;\n    });\n    setShapes(newShapes);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      style: {\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        children: \"Zoom In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        children: \"Zoom Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this), selectedShapeIndex !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteShape,\n        style: {\n          position: 'absolute',\n          top: shapes[selectedShapeIndex].y - 50,\n          left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast,\n      onAddRectangle: () => handleAddShape('rectangle'),\n      onPenModeChange: handlePenModeChange,\n      onRubberModeChange: handleRubberModeChange,\n      onPenColorChange: setPenColor // Pass the function to set pen color\n      ,\n      onPenThicknessChange: setPenThickness // Pass the function to set pen thickness\n      ,\n      penMode: penMode,\n      rubberMode: rubberMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"iplDGJPaFNiM7sHaz7JUYuVTr5w=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","canvasRef","context","setContext","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDragging","setIsDragging","dragStartX","setDragStartX","dragStartY","setDragStartY","isResizing","setIsResizing","resizeIndex","setResizeIndex","resizeStartX","setResizeStartX","resizeStartY","setResizeStartY","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","penMode","setPenMode","rubberMode","setRubberMode","penColor","setPenColor","penThickness","setPenThickness","reader","FileReader","onload","result","readAsDataURL","canvas","current","ctx","getContext","img","Image","width","height","filter","drawImage","forEach","shape","index","drawShape","src","handleMouseDown","e","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","shapeSelected","isPointInsideShape","x","y","isResizingHandle","handleMouseMove","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","closePath","newShapes","handleMouseUp","drawPenLine","startX","startY","endX","endY","isSelected","color","handleDeleteShape","splice","handleSave","toBlob","blob","handleAddShape","type","push","imageData","getImageData","length","handlePenModeChange","mode","handleRubberModeChange","dx","dy","radius","handleZoomIn","centerX","centerY","zoomFactor","map","handleZoomOut","className","children","ref","onMouseDown","onMouseMove","onMouseUp","style","border","fileName","_jsxFileName","lineNumber","columnNumber","onClick","position","onBrightnessChange","onContrastChange","onAddRectangle","onPenModeChange","onRubberModeChange","onPenColorChange","onPenThicknessChange","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const canvasRef = useRef(null);\n    const [context, setContext] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [dragStartX, setDragStartX] = useState(0);\n    const [dragStartY, setDragStartY] = useState(0);\n    const [isResizing, setIsResizing] = useState(false);\n    const [resizeIndex, setResizeIndex] = useState(-1);\n    const [resizeStartX, setResizeStartX] = useState(0);\n    const [resizeStartY, setResizeStartY] = useState(0);\n\n    const [prevMouseX, setPrevMouseX] = useState(0); // New state variable\n    const [prevMouseY, setPrevMouseY] = useState(0); // New state variable\n\n    const [penMode, setPenMode] = useState(false);\n    const [rubberMode, setRubberMode] = useState(false);\n    const [penColor, setPenColor] = useState('#000000');\n    const [penThickness, setPenThickness] = useState(2);\n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        setContext(ctx);\n        if (context && imageSrc) {\n            const img = new Image();\n            img.onload = () => {\n                canvas.width = img.width;\n                canvas.height = img.height;\n                ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                ctx.drawImage(img, 0, 0);\n                shapes.forEach((shape, index) => {\n                    drawShape(ctx, shape, index === selectedShapeIndex, index === resizeIndex);\n                });\n            };\n            img.src = imageSrc;\n        }\n    }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n\n    const handleMouseDown = (e) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        // Check if the click occurred inside the canvas\n        if (mouseX < 0 || mouseY < 0 || mouseX >= canvas.width || mouseY >= canvas.height) {\n            return;\n        }\n\n        if (penMode) {\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else {\n            let shapeSelected = false;\n            shapes.forEach((shape, index) => {\n                if (isPointInsideShape(mouseX, mouseY, shape)) {\n                    setSelectedShapeIndex(index);\n                    setIsDragging(true);\n                    setDragStartX(mouseX - shape.x);\n                    setDragStartY(mouseY - shape.y);\n                    setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n                    if (isResizing) {\n                        setResizeIndex(index);\n                        setResizeStartX(mouseX - (shape.x + shape.width));\n                        setResizeStartY(mouseY - (shape.y + shape.height));\n                    }\n                    shapeSelected = true;\n                }\n            });\n\n            if (!shapeSelected) {\n                setSelectedShapeIndex(null);\n            }\n        }\n    };\n\n    const handleMouseMove = (e) => {\n        if (!isDragging || (penMode && !rubberMode && selectedShapeIndex === null)) return;\n\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        if (penMode && !rubberMode) {\n            const ctx = canvas.getContext('2d');\n            ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n            ctx.lineWidth = penThickness;\n            ctx.lineCap = 'round';\n            ctx.beginPath();\n            ctx.moveTo(prevMouseX, prevMouseY);\n            ctx.lineTo(mouseX, mouseY);\n            ctx.stroke();\n            ctx.closePath();\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else {\n            const newShapes = [...shapes];\n            const shape = newShapes[selectedShapeIndex];\n            if (!isResizing) {\n                shape.x = mouseX - dragStartX;\n                shape.y = mouseY - dragStartY;\n            } else {\n                shape.width = mouseX - shape.x + resizeStartX;\n                shape.height = mouseY - shape.y + resizeStartY;\n            }\n            setShapes(newShapes);\n        }\n    };\n\n\n    const handleMouseUp = () => {\n        setIsDragging(false);\n        setIsResizing(false);\n    };\n\n\n    const isResizingHandle = (x, y, shape) => {\n        return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width &&\n            y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n    };\n\n    const drawPenLine = (startX, startY, endX, endY) => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n        ctx.lineWidth = penThickness;\n        ctx.lineCap = 'round';\n        ctx.beginPath();\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n        ctx.closePath();\n    };\n\n    const drawShape = (ctx, shape, isSelected, isResizing) => {\n        ctx.beginPath();\n        ctx.rect(shape.x, shape.y, shape.width, shape.height);\n        ctx.strokeStyle = isSelected ? 'red' : shape.color;\n        ctx.lineWidth = shape.lineWidth;\n        ctx.stroke();\n    };\n\n\n    const handleDeleteShape = () => {\n        if (selectedShapeIndex !== null) {\n            const newShapes = [...shapes];\n            newShapes.splice(selectedShapeIndex, 1);\n            setShapes(newShapes);\n            setSelectedShapeIndex(null);\n        }\n    };\n\n\n\n    const handleSave = () => {\n        const canvas = canvasRef.current;\n        canvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n\n    const handleAddShape = (type) => {\n        const newShapes = [...shapes];\n        if (type === 'square') {\n            newShapes.push({\n                type: 'square',\n                x: 100,\n                y: 100,\n                width: 50,\n                height: 50,\n                color: 'red',\n                lineWidth: 2,\n            });\n        } else if (type === 'rectangle') {\n            newShapes.push({\n                type: 'rectangle',\n                x: 200,\n                y: 200,\n                width: 80,\n                height: 40,\n                color: 'blue',\n                lineWidth: 2,\n            });\n        }\n        // Include drawn lines in the new shape\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        newShapes[newShapes.length - 1].imageData = imageData;\n\n        setShapes(newShapes);\n    };\n\n\n    const handlePenModeChange = (mode) => {\n        setPenMode(mode);\n    };\n\n    const handleRubberModeChange = (mode) => {\n        setRubberMode(mode);\n    };\n\n\n    const isPointInsideShape = (x, y, shape) => {\n        if (shape.type === 'square' || shape.type === 'rectangle') {\n            return x >= shape.x && x <= (shape.x + shape.width) &&\n                y >= shape.y && y <= (shape.y + shape.height);\n        } else if (shape.type === 'circle') {\n            const dx = x - shape.x;\n            const dy = y - shape.y;\n            return dx * dx + dy * dy <= shape.radius * shape.radius;\n        }\n        return false;\n    };\n\n\n    const handleZoomIn = () => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const zoomFactor = 1.1;\n        const newShapes = shapes.map(shape => {\n            if (shape.type === 'square' || shape.type === 'rectangle') {\n                shape.x = centerX + (shape.x - centerX) * zoomFactor;\n                shape.y = centerY + (shape.y - centerY) * zoomFactor;\n                shape.width *= zoomFactor;\n                shape.height *= zoomFactor;\n            } else if (shape.type === 'circle') {\n                shape.x = centerX + (shape.x - centerX) * zoomFactor;\n                shape.y = centerY + (shape.y - centerY) * zoomFactor;\n                shape.radius *= zoomFactor;\n            }\n            return shape;\n        });\n        setShapes(newShapes);\n    };\n\n    const handleZoomOut = () => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const zoomFactor = 0.9;\n        const newShapes = shapes.map(shape => {\n            shape.x = centerX + (shape.x - centerX) * zoomFactor;\n            shape.y = centerY + (shape.y - centerY) * zoomFactor;\n            shape.width *= zoomFactor;\n            shape.height *= zoomFactor;\n            return shape;\n        });\n        setShapes(newShapes);\n    };\n\n    return (\n        <div className=\"image-viewer\">\n            <canvas\n                ref={canvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                style={{border: '1px solid black'}}\n            />\n            <div className=\"controls\">\n                <button onClick={handleZoomIn}>Zoom In</button>\n                <button onClick={handleZoomOut}>Zoom Out</button>\n                <button onClick={handleSave}>Save</button>\n                <button onClick={onClose}>Close</button>\n                {selectedShapeIndex !== null && (\n                    <button onClick={handleDeleteShape} style={{\n                        position: 'absolute',\n                        top: shapes[selectedShapeIndex].y - 50,\n                        left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n                    }}>X</button>\n                )}\n            </div>\n\n            <SideToolbar\n                onBrightnessChange={setBrightness}\n                onContrastChange={setContrast}\n                onAddRectangle={() => handleAddShape('rectangle')}\n                onPenModeChange={handlePenModeChange}\n                onRubberModeChange={handleRubberModeChange}\n                onPenColorChange={setPenColor} // Pass the function to set pen color\n                onPenThicknessChange={setPenThickness} // Pass the function to set pen thickness\n                penMode={penMode}\n                rubberMode={rubberMode}\n            />\n        </div>\n    );\n}\n\nexport default ImageViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}