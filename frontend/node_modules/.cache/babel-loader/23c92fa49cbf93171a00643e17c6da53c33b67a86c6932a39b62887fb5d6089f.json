{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const imageCanvasRef = useRef(null);\n  const drawingCanvasRef = useRef(null);\n  const [imageContext, setImageContext] = useState(null);\n  const [drawingContext, setDrawingContext] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeIndex, setResizeIndex] = useState(-1);\n  const [resizeStartX, setResizeStartX] = useState(0);\n  const [resizeStartY, setResizeStartY] = useState(0);\n  const [prevMouseX, setPrevMouseX] = useState(0);\n  const [prevMouseY, setPrevMouseY] = useState(0);\n  const [penMode, setPenMode] = useState(false);\n  const [rubberMode, setRubberMode] = useState(false);\n  const [penColor, setPenColor] = useState('#000000');\n  const [penThickness, setPenThickness] = useState(2);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const imageCanvas = imageCanvasRef.current;\n    const ctx = imageCanvas.getContext('2d');\n    setImageContext(ctx);\n  }, []);\n  useEffect(() => {\n    const drawingCanvas = drawingCanvasRef.current;\n    const ctx = drawingCanvas.getContext('2d');\n    setDrawingContext(ctx);\n  }, []);\n  useEffect(() => {\n    if (imageContext && imageSrc) {\n      const img = new Image();\n      img.onload = () => {\n        imageContext.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n        imageContext.drawImage(img, 0, 0, img.width, img.height);\n      };\n      img.src = imageSrc;\n    }\n  }, [imageContext, imageSrc, brightness, contrast]);\n  const handleMouseDown = e => {\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    if (penMode || rubberMode) {\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else {\n      let shapeSelected = false;\n      shapes.forEach((shape, index) => {\n        if (isPointInsideShape(mouseX, mouseY, shape)) {\n          setSelectedShapeIndex(index);\n          setIsDragging(true);\n          setDragStartX(mouseX - shape.x);\n          setDragStartY(mouseY - shape.y);\n          setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n          if (isResizing) {\n            setResizeIndex(index);\n            setResizeStartX(mouseX - shape.x);\n            setResizeStartY(mouseY - shape.y);\n          }\n          shapeSelected = true;\n        }\n      });\n      if (!shapeSelected) {\n        setSelectedShapeIndex(null);\n      }\n    }\n  };\n  const handleMouseMove = e => {\n    if (!isDragging || !penMode && !rubberMode) return;\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    const ctx = drawingContext;\n    if (penMode) {\n      ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n      ctx.lineWidth = penThickness;\n      ctx.lineCap = 'round';\n      ctx.beginPath();\n      ctx.moveTo(prevMouseX, prevMouseY);\n      ctx.lineTo(mouseX, mouseY);\n      ctx.stroke();\n      ctx.closePath();\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n      ctx.globalCompositeOperation = 'destination-out';\n      ctx.beginPath();\n      ctx.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    } else {\n      const newShapes = [...shapes];\n      const shape = newShapes[selectedShapeIndex];\n      if (!isResizing) {\n        shape.x = mouseX - dragStartX;\n        shape.y = mouseY - dragStartY;\n      } else {\n        const dx = mouseX - shape.x - resizeStartX;\n        const dy = mouseY - shape.y - resizeStartY;\n        shape.width += dx;\n        shape.height += dy;\n        setResizeStartX(mouseX - shape.x);\n        setResizeStartY(mouseY - shape.y);\n      }\n      setShapes(newShapes);\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setIsResizing(false);\n  };\n  const isResizingHandle = (x, y, shape) => {\n    return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width && y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n  };\n  const isPointInsideShape = (x, y, shape) => {\n    if (shape.type === 'square' || shape.type === 'rectangle') {\n      return x >= shape.x && x <= shape.x + shape.width && y >= shape.y && y <= shape.y + shape.height;\n    } else if (shape.type === 'circle') {\n      const dx = x - shape.x;\n      const dy = y - shape.y;\n      return dx * dx + dy * dy <= shape.radius * shape.radius;\n    }\n    return false;\n  };\n  const handleZoomIn = () => {\n    const canvas = imageCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const zoomFactor = 1.1;\n    const newShapes = shapes.map(shape => {\n      if (shape.type === 'square' || shape.type === 'rectangle') {\n        shape.x = centerX + (shape.x - centerX) * zoomFactor;\n        shape.y = centerY + (shape.y - centerY) * zoomFactor;\n        shape.width *= zoomFactor;\n        shape.height *= zoomFactor;\n      } else if (shape.type === 'circle') {\n        shape.x = centerX + (shape.x - centerX) * zoomFactor;\n        shape.y = centerY + (shape.y - centerY) * zoomFactor;\n        shape.radius *= zoomFactor;\n      }\n      return shape;\n    });\n    setShapes(newShapes);\n  };\n  const handleZoomOut = () => {\n    const canvas = imageCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const zoomFactor = 0.9;\n    const newShapes = shapes.map(shape => {\n      shape.x = centerX + (shape.x - centerX) * zoomFactor;\n      shape.y = centerY + (shape.y - centerY) * zoomFactor;\n      shape.width *= zoomFactor;\n      shape.height *= zoomFactor;\n      return shape;\n    });\n    setShapes(newShapes);\n  };\n  const handleSave = () => {\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    const mergedCanvas = document.createElement('canvas');\n    const mergedCtx = mergedCanvas.getContext('2d');\n\n    // Set the dimensions of the merged canvas\n    mergedCanvas.width = Math.max(imageCanvas.width, drawingCanvas.width);\n    mergedCanvas.height = Math.max(imageCanvas.height, drawingCanvas.height);\n\n    // Draw the image canvas onto the merged canvas\n    mergedCtx.drawImage(imageCanvas, 0, 0);\n\n    // Draw the drawing canvas onto the merged canvas\n    mergedCtx.drawImage(drawingCanvas, 0, 0);\n\n    // Convert the merged canvas to a blob and save it\n    mergedCanvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: imageCanvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        pointerEvents: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: drawingCanvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      style: {\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        children: \"Zoom In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        children: \"Zoom Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePenMode,\n        children: penMode ? 'Switch to Eraser' : 'Switch to Pen'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }, this), selectedShapeIndex !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteShape,\n        style: {\n          position: 'absolute',\n          top: shapes[selectedShapeIndex].y - 50,\n          left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast,\n      onAddRectangle: () => handleAddShape('rectangle'),\n      onTogglePenMode: handleTogglePenMode,\n      onToggleRubberMode: handleToggleRubberMode // Pass handleToggleRubberMode as a prop\n      ,\n      onPenColorChange: setPenColor,\n      onPenThicknessChange: setPenThickness,\n      penMode: penMode,\n      rubberMode: rubberMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"giE0lqGxjIKULgfsmhoLYUwPXW8=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","imageCanvasRef","drawingCanvasRef","imageContext","setImageContext","drawingContext","setDrawingContext","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDragging","setIsDragging","dragStartX","setDragStartX","dragStartY","setDragStartY","isResizing","setIsResizing","resizeIndex","setResizeIndex","resizeStartX","setResizeStartX","resizeStartY","setResizeStartY","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","penMode","setPenMode","rubberMode","setRubberMode","penColor","setPenColor","penThickness","setPenThickness","reader","FileReader","onload","result","readAsDataURL","imageCanvas","current","ctx","getContext","drawingCanvas","img","Image","filter","drawImage","width","height","src","handleMouseDown","e","canvas","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","shapeSelected","forEach","shape","index","isPointInsideShape","x","y","isResizingHandle","handleMouseMove","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","closePath","globalCompositeOperation","arc","Math","PI","fill","newShapes","dx","dy","handleMouseUp","type","radius","handleZoomIn","centerX","centerY","zoomFactor","map","handleZoomOut","handleSave","mergedCanvas","document","createElement","mergedCtx","max","toBlob","blob","className","children","ref","style","position","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseMove","onMouseUp","border","onClick","togglePenMode","clearCanvas","handleDeleteShape","onBrightnessChange","onContrastChange","onAddRectangle","handleAddShape","onTogglePenMode","handleTogglePenMode","onToggleRubberMode","handleToggleRubberMode","onPenColorChange","onPenThicknessChange","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const imageCanvasRef = useRef(null);\n    const drawingCanvasRef = useRef(null);\n    const [imageContext, setImageContext] = useState(null);\n    const [drawingContext, setDrawingContext] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [dragStartX, setDragStartX] = useState(0);\n    const [dragStartY, setDragStartY] = useState(0);\n    const [isResizing, setIsResizing] = useState(false);\n    const [resizeIndex, setResizeIndex] = useState(-1);\n    const [resizeStartX, setResizeStartX] = useState(0);\n    const [resizeStartY, setResizeStartY] = useState(0);\n    const [prevMouseX, setPrevMouseX] = useState(0);\n    const [prevMouseY, setPrevMouseY] = useState(0);\n\n    const [penMode, setPenMode] = useState(false);\n    const [rubberMode, setRubberMode] = useState(false);\n    const [penColor, setPenColor] = useState('#000000');\n    const [penThickness, setPenThickness] = useState(2);\n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const imageCanvas = imageCanvasRef.current;\n        const ctx = imageCanvas.getContext('2d');\n        setImageContext(ctx);\n    }, []);\n\n    useEffect(() => {\n        const drawingCanvas = drawingCanvasRef.current;\n        const ctx = drawingCanvas.getContext('2d');\n        setDrawingContext(ctx);\n    }, []);\n\n    useEffect(() => {\n        if (imageContext && imageSrc) {\n            const img = new Image();\n            img.onload = () => {\n                imageContext.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                imageContext.drawImage(img, 0, 0, img.width, img.height);\n            };\n            img.src = imageSrc;\n        }\n    }, [imageContext, imageSrc, brightness, contrast]);\n\n    const handleMouseDown = (e) => {\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        if (penMode || rubberMode) {\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else {\n            let shapeSelected = false;\n            shapes.forEach((shape, index) => {\n                if (isPointInsideShape(mouseX, mouseY, shape)) {\n                    setSelectedShapeIndex(index);\n                    setIsDragging(true);\n                    setDragStartX(mouseX - shape.x);\n                    setDragStartY(mouseY - shape.y);\n                    setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n                    if (isResizing) {\n                        setResizeIndex(index);\n                        setResizeStartX(mouseX - shape.x);\n                        setResizeStartY(mouseY - shape.y);\n                    }\n                    shapeSelected = true;\n                }\n            });\n\n            if (!shapeSelected) {\n                setSelectedShapeIndex(null);\n            }\n        }\n    };\n\n    const handleMouseMove = (e) => {\n        if (!isDragging || (!penMode && !rubberMode)) return;\n\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        const ctx = drawingContext;\n\n        if (penMode) {\n            ctx.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n            ctx.lineWidth = penThickness;\n            ctx.lineCap = 'round';\n            ctx.beginPath();\n            ctx.moveTo(prevMouseX, prevMouseY);\n            ctx.lineTo(mouseX, mouseY);\n            ctx.stroke();\n            ctx.closePath();\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else if (rubberMode) {\n            ctx.globalCompositeOperation = 'destination-out';\n            ctx.beginPath();\n            ctx.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n            ctx.fill();\n        } else {\n            const newShapes = [...shapes];\n            const shape = newShapes[selectedShapeIndex];\n            if (!isResizing) {\n                shape.x = mouseX - dragStartX;\n                shape.y = mouseY - dragStartY;\n            } else {\n                const dx = mouseX - shape.x - resizeStartX;\n                const dy = mouseY - shape.y - resizeStartY;\n                shape.width += dx;\n                shape.height += dy;\n                setResizeStartX(mouseX - shape.x);\n                setResizeStartY(mouseY - shape.y);\n            }\n            setShapes(newShapes);\n        }\n    };\n\n    const handleMouseUp = () => {\n        setIsDragging(false);\n        setIsResizing(false);\n    };\n\n    const isResizingHandle = (x, y, shape) => {\n        return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width &&\n            y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n    };\n\n    const isPointInsideShape = (x, y, shape) => {\n        if (shape.type === 'square' || shape.type === 'rectangle') {\n            return x >= shape.x && x <= (shape.x + shape.width) &&\n                y >= shape.y && y <= (shape.y + shape.height);\n        } else if (shape.type === 'circle') {\n            const dx = x - shape.x;\n            const dy = y - shape.y;\n            return dx * dx + dy * dy <= shape.radius * shape.radius;\n        }\n        return false;\n    };\n\n    const handleZoomIn = () => {\n        const canvas = imageCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const zoomFactor = 1.1;\n        const newShapes = shapes.map(shape => {\n            if (shape.type === 'square' || shape.type === 'rectangle') {\n                shape.x = centerX + (shape.x - centerX) * zoomFactor;\n                shape.y = centerY + (shape.y - centerY) * zoomFactor;\n                shape.width *= zoomFactor;\n                shape.height *= zoomFactor;\n            } else if (shape.type === 'circle') {\n                shape.x = centerX + (shape.x - centerX) * zoomFactor;\n                shape.y = centerY + (shape.y - centerY) * zoomFactor;\n                shape.radius *= zoomFactor;\n            }\n            return shape;\n        });\n        setShapes(newShapes);\n    };\n\n    const handleZoomOut = () => {\n        const canvas = imageCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const zoomFactor = 0.9;\n        const newShapes = shapes.map(shape => {\n            shape.x = centerX + (shape.x - centerX) * zoomFactor;\n            shape.y = centerY + (shape.y - centerY) * zoomFactor;\n            shape.width *= zoomFactor;\n            shape.height *= zoomFactor;\n            return shape;\n        });\n        setShapes(newShapes);\n    };\n\n\n    const handleSave = () => {\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n        \n        const mergedCanvas = document.createElement('canvas');\n        const mergedCtx = mergedCanvas.getContext('2d');\n        \n        // Set the dimensions of the merged canvas\n        mergedCanvas.width = Math.max(imageCanvas.width, drawingCanvas.width);\n        mergedCanvas.height = Math.max(imageCanvas.height, drawingCanvas.height);\n        \n        // Draw the image canvas onto the merged canvas\n        mergedCtx.drawImage(imageCanvas, 0, 0);\n        \n        // Draw the drawing canvas onto the merged canvas\n        mergedCtx.drawImage(drawingCanvas, 0, 0);\n        \n        // Convert the merged canvas to a blob and save it\n        mergedCanvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n    \n    \n    \n\n    return (\n        <div className=\"image-viewer\">\n        <canvas\n            ref={imageCanvasRef}\n            style={{ position: 'absolute', top: 0, left: 0, pointerEvents: 'none' }}\n        />\n        <canvas\n            ref={drawingCanvasRef}\n            onMouseDown={handleMouseDown}\n            onMouseMove={handleMouseMove}\n            onMouseUp={handleMouseUp}\n            style={{ border: '1px solid black' }}\n        />\n        <div className=\"controls\">\n            <button onClick={handleZoomIn}>Zoom In</button>\n            <button onClick={handleZoomOut}>Zoom Out</button>\n            <button onClick={handleSave}>Save</button>\n            <button onClick={onClose}>Close</button>\n            <button onClick={togglePenMode}>{penMode ? 'Switch to Eraser' : 'Switch to Pen'}</button>\n            <button onClick={clearCanvas}>Clear Canvas</button>\n            {selectedShapeIndex !== null && (\n                <button onClick={handleDeleteShape} style={{\n                    position: 'absolute',\n                    top: shapes[selectedShapeIndex].y - 50,\n                    left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n                }}>X</button>\n            )}\n        </div>\n\n        <SideToolbar\n            onBrightnessChange={setBrightness}\n            onContrastChange={setContrast}\n            onAddRectangle={() => handleAddShape('rectangle')}\n            onTogglePenMode={handleTogglePenMode}\n            onToggleRubberMode={handleToggleRubberMode} // Pass handleToggleRubberMode as a prop\n            onPenColorChange={setPenColor}\n            onPenThicknessChange={setPenThickness}\n            penMode={penMode}\n            rubberMode={rubberMode}\n        />\n\n    </div>\n    );\n}\n\nexport default ImageViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}