{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [prevMouseX, setPrevMouseX] = useState(0);\n  const [prevMouseY, setPrevMouseY] = useState(0);\n  const [penColor, setPenColor] = useState('#000000');\n  const [penThickness, setPenThickness] = useState(2);\n  const [eraserMode, setEraserMode] = useState(false);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    setContext(ctx);\n    if (context && imageSrc) {\n      const img = new Image();\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n        ctx.drawImage(img, 0, 0);\n        shapes.forEach((shape, index) => {\n          drawShape(ctx, shape, index === selectedShapeIndex);\n        });\n      };\n      img.src = imageSrc;\n    }\n  }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex]);\n  const handleMouseDown = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    setIsDrawing(true);\n    setPrevMouseX(mouseX);\n    setPrevMouseY(mouseY);\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    const ctx = context;\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = eraserMode ? '#FFFFFF' : penColor;\n    ctx.lineWidth = penThickness;\n    ctx.beginPath();\n    ctx.moveTo(prevMouseX, prevMouseY);\n    ctx.lineTo(mouseX, mouseY);\n    ctx.stroke();\n    ctx.closePath();\n    setPrevMouseX(mouseX);\n    setPrevMouseY(mouseY);\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n  };\n  const drawShape = (ctx, shape, isSelected) => {\n    ctx.beginPath();\n    ctx.rect(shape.x, shape.y, shape.width, shape.height);\n    ctx.strokeStyle = isSelected ? 'red' : shape.color;\n    ctx.lineWidth = shape.lineWidth;\n    ctx.stroke();\n  };\n  const handleDeleteShape = () => {\n    if (selectedShapeIndex !== null) {\n      const newShapes = [...shapes];\n      newShapes.splice(selectedShapeIndex, 1);\n      setShapes(newShapes);\n      setSelectedShapeIndex(null);\n    }\n  };\n  const handleSave = () => {\n    const canvas = canvasRef.current;\n    canvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n  const handlePenColorChange = color => {\n    setPenColor(color);\n    setEraserMode(false); // Turn off eraser mode when changing pen color\n  };\n  const handleEraserModeToggle = () => {\n    setEraserMode(!eraserMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      style: {\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), selectedShapeIndex !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteShape,\n        style: {\n          position: 'absolute',\n          top: shapes[selectedShapeIndex].y - 50,\n          left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast,\n      onPenColorChange: handlePenColorChange,\n      onPenThicknessChange: setPenThickness,\n      onEraserModeToggle: handleEraserModeToggle,\n      eraserMode: eraserMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"YKnyyRoSAb4kRw7rL32lodJu1t0=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","canvasRef","context","setContext","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDrawing","setIsDrawing","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","penColor","setPenColor","penThickness","setPenThickness","eraserMode","setEraserMode","reader","FileReader","onload","result","readAsDataURL","canvas","current","ctx","getContext","img","Image","width","height","filter","drawImage","forEach","shape","index","drawShape","src","handleMouseDown","e","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","handleMouseMove","lineCap","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","closePath","handleMouseUp","isSelected","x","y","color","handleDeleteShape","newShapes","splice","handleSave","toBlob","blob","handlePenColorChange","handleEraserModeToggle","className","children","ref","onMouseDown","onMouseMove","onMouseUp","style","border","fileName","_jsxFileName","lineNumber","columnNumber","onClick","position","onBrightnessChange","onContrastChange","onPenColorChange","onPenThicknessChange","onEraserModeToggle","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const canvasRef = useRef(null);\n    const [context, setContext] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [prevMouseX, setPrevMouseX] = useState(0);\n    const [prevMouseY, setPrevMouseY] = useState(0);\n    const [penColor, setPenColor] = useState('#000000');\n    const [penThickness, setPenThickness] = useState(2);\n    const [eraserMode, setEraserMode] = useState(false);\n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        setContext(ctx);\n        if (context && imageSrc) {\n            const img = new Image();\n            img.onload = () => {\n                canvas.width = img.width;\n                canvas.height = img.height;\n                ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                ctx.drawImage(img, 0, 0);\n                shapes.forEach((shape, index) => {\n                    drawShape(ctx, shape, index === selectedShapeIndex);\n                });\n            };\n            img.src = imageSrc;\n        }\n    }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex]);\n\n    const handleMouseDown = (e) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n        setIsDrawing(true);\n        setPrevMouseX(mouseX);\n        setPrevMouseY(mouseY);\n    };\n\n    const handleMouseMove = (e) => {\n        if (!isDrawing) return;\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n        const ctx = context;\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = eraserMode ? '#FFFFFF' : penColor;\n        ctx.lineWidth = penThickness;\n        ctx.beginPath();\n        ctx.moveTo(prevMouseX, prevMouseY);\n        ctx.lineTo(mouseX, mouseY);\n        ctx.stroke();\n        ctx.closePath();\n        setPrevMouseX(mouseX);\n        setPrevMouseY(mouseY);\n    };\n\n    const handleMouseUp = () => {\n        setIsDrawing(false);\n    };\n\n    const drawShape = (ctx, shape, isSelected) => {\n        ctx.beginPath();\n        ctx.rect(shape.x, shape.y, shape.width, shape.height);\n        ctx.strokeStyle = isSelected ? 'red' : shape.color;\n        ctx.lineWidth = shape.lineWidth;\n        ctx.stroke();\n    };\n\n    const handleDeleteShape = () => {\n        if (selectedShapeIndex !== null) {\n            const newShapes = [...shapes];\n            newShapes.splice(selectedShapeIndex, 1);\n            setShapes(newShapes);\n            setSelectedShapeIndex(null);\n        }\n    };\n\n    const handleSave = () => {\n        const canvas = canvasRef.current;\n        canvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n\n    const handlePenColorChange = (color) => {\n        setPenColor(color);\n        setEraserMode(false); // Turn off eraser mode when changing pen color\n    };\n\n    const handleEraserModeToggle = () => {\n        setEraserMode(!eraserMode);\n    };\n\n    return (\n        <div className=\"image-viewer\">\n            <canvas\n                ref={canvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                style={{border: '1px solid black'}}\n            />\n            <div className=\"controls\">\n                <button onClick={handleSave}>Save</button>\n                <button onClick={onClose}>Close</button>\n                {selectedShapeIndex !== null && (\n                    <button onClick={handleDeleteShape} style={{\n                        position: 'absolute',\n                        top: shapes[selectedShapeIndex].y - 50,\n                        left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n                    }}>X</button>\n                )}\n            </div>\n\n            <SideToolbar\n                onBrightnessChange={setBrightness}\n                onContrastChange={setContrast}\n                onPenColorChange={handlePenColorChange}\n                onPenThicknessChange={setPenThickness}\n                onEraserModeToggle={handleEraserModeToggle}\n                eraserMode={eraserMode}\n            />\n        </div>\n    );\n}\n\nexport default ImageViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}