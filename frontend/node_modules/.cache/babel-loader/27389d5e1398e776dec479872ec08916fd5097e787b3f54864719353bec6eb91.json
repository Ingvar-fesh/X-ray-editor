{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { drawShape } from './utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeIndex, setResizeIndex] = useState(-1);\n  const [resizeStartX, setResizeStartX] = useState(0);\n  const [resizeStartY, setResizeStartY] = useState(0);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    setContext(ctx);\n    if (context && imageSrc) {\n      const img = new Image();\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n        ctx.drawImage(img, 0, 0);\n        shapes.forEach((shape, index) => {\n          drawShape(ctx, shape, index === selectedShapeIndex, index === resizeIndex);\n        });\n      };\n      img.src = imageSrc;\n    }\n  }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n  const handleSave = () => {\n    const canvas = canvasRef.current;\n    canvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n\n  // Handle adding shapes\n  const handleAddShape = newShape => {\n    setShapes([...shapes, newShape]);\n  };\n\n  // Handle selecting a shape\n  const handleShapeSelect = index => {\n    setSelectedShapeIndex(index);\n  };\n\n  // Handle resizing a shape\n  const handleShapeResizeStart = (index, e) => {\n    setResizeIndex(index);\n    setIsResizing(true);\n    setResizeStartX(e.clientX);\n    setResizeStartY(e.clientY);\n  };\n  const handleShapeResize = e => {\n    if (!isResizing || resizeIndex === -1) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    const newShapes = [...shapes];\n    const shape = newShapes[resizeIndex];\n    const dx = mouseX - resizeStartX;\n    const dy = mouseY - resizeStartY;\n\n    // Adjust shape size based on mouse movement\n    if (shape.type === 'square' || shape.type === 'rectangle') {\n      shape.width += dx;\n      shape.height += dy;\n    } else if (shape.type === 'circle') {\n      const diameter = Math.max(shape.radius + dx, 0) * 2;\n      shape.radius = diameter / 2;\n    }\n    setShapes(newShapes);\n    setResizeStartX(mouseX);\n    setResizeStartY(mouseY);\n  };\n  const handleShapeResizeEnd = () => {\n    setIsResizing(false);\n    setResizeIndex(-1);\n  };\n\n  // Other mouse event handlers for dragging, etc.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      style: {\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast,\n      onAddShape: handleAddShape,\n      onShapeSelect: handleShapeSelect,\n      onShapeResizeStart: handleShapeResizeStart,\n      onShapeResizeEnd: handleShapeResizeEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"V40u11Pq5CWpSyY+MMyr618PY4s=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","drawShape","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","canvasRef","context","setContext","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDragging","setIsDragging","dragStartX","setDragStartX","dragStartY","setDragStartY","isResizing","setIsResizing","resizeIndex","setResizeIndex","resizeStartX","setResizeStartX","resizeStartY","setResizeStartY","reader","FileReader","onload","result","readAsDataURL","canvas","current","ctx","getContext","img","Image","width","height","filter","drawImage","forEach","shape","index","src","handleSave","toBlob","blob","handleAddShape","newShape","handleShapeSelect","handleShapeResizeStart","e","clientX","clientY","handleShapeResize","rect","getBoundingClientRect","mouseX","left","mouseY","top","newShapes","dx","dy","type","diameter","Math","max","radius","handleShapeResizeEnd","className","children","ref","onMouseDown","handleMouseDown","onMouseMove","handleMouseMove","onMouseUp","handleMouseUp","style","border","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onBrightnessChange","onContrastChange","onAddShape","onShapeSelect","onShapeResizeStart","onShapeResizeEnd","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { drawShape } from './utilities';\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const canvasRef = useRef(null);\n    const [context, setContext] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [dragStartX, setDragStartX] = useState(0);\n    const [dragStartY, setDragStartY] = useState(0);\n    const [isResizing, setIsResizing] = useState(false);\n    const [resizeIndex, setResizeIndex] = useState(-1);\n    const [resizeStartX, setResizeStartX] = useState(0);\n    const [resizeStartY, setResizeStartY] = useState(0);\n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        setContext(ctx);\n        if (context && imageSrc) {\n            const img = new Image();\n            img.onload = () => {\n                canvas.width = img.width;\n                canvas.height = img.height;\n                ctx.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                ctx.drawImage(img, 0, 0);\n                shapes.forEach((shape, index) => {\n                    drawShape(ctx, shape, index === selectedShapeIndex, index === resizeIndex);\n                });\n            };\n            img.src = imageSrc;\n        }\n    }, [context, imageSrc, brightness, contrast, shapes, selectedShapeIndex, resizeIndex]);\n\n    const handleSave = () => {\n        const canvas = canvasRef.current;\n        canvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n\n    // Handle adding shapes\n    const handleAddShape = (newShape) => {\n        setShapes([...shapes, newShape]);\n    };\n\n    // Handle selecting a shape\n    const handleShapeSelect = (index) => {\n        setSelectedShapeIndex(index);\n    };\n\n    // Handle resizing a shape\n    const handleShapeResizeStart = (index, e) => {\n        setResizeIndex(index);\n        setIsResizing(true);\n        setResizeStartX(e.clientX);\n        setResizeStartY(e.clientY);\n    };\n\n    const handleShapeResize = (e) => {\n        if (!isResizing || resizeIndex === -1) return;\n\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        const newShapes = [...shapes];\n        const shape = newShapes[resizeIndex];\n        const dx = mouseX - resizeStartX;\n        const dy = mouseY - resizeStartY;\n\n        // Adjust shape size based on mouse movement\n        if (shape.type === 'square' || shape.type === 'rectangle') {\n            shape.width += dx;\n            shape.height += dy;\n        } else if (shape.type === 'circle') {\n            const diameter = Math.max(shape.radius + dx, 0) * 2;\n            shape.radius = diameter / 2;\n        }\n\n        setShapes(newShapes);\n        setResizeStartX(mouseX);\n        setResizeStartY(mouseY);\n    };\n\n    const handleShapeResizeEnd = () => {\n        setIsResizing(false);\n        setResizeIndex(-1);\n    };\n\n    // Other mouse event handlers for dragging, etc.\n\n    return (\n        <div className=\"image-viewer\">\n            <canvas\n                ref={canvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                style={{ border: '1px solid black' }}\n            />\n            <div className=\"controls\">\n                <button onClick={handleSave}>Save</button>\n                <button onClick={onClose}>Close</button>\n            </div>\n            <SideToolbar\n                onBrightnessChange={setBrightness}\n                onContrastChange={setContrast}\n                onAddShape={handleAddShape}\n                onShapeSelect={handleShapeSelect}\n                onShapeResizeStart={handleShapeResizeStart}\n                onShapeResizeEnd={handleShapeResizeEnd}\n            />\n        </div>\n    );\n}\n\nexport default ImageViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}