{"ast":null,"code":"var _jsxFileName = \"/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer({\n  image,\n  onClose,\n  onSave\n}) {\n  _s();\n  const imageCanvasRef = useRef(null);\n  const drawingCanvasRef = useRef(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brightness, setBrightness] = useState(100);\n  const [contrast, setContrast] = useState(100);\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeStartX, setResizeStartX] = useState(0);\n  const [resizeStartY, setResizeStartY] = useState(0);\n  const [prevMouseX, setPrevMouseX] = useState(0);\n  const [prevMouseY, setPrevMouseY] = useState(0);\n  const [zoomLevel, setZoomLevel] = useState(1.0);\n  const [penMode, setPenMode] = useState(false);\n  const [rubberMode, setRubberMode] = useState(false);\n  const [penColor, setPenColor] = useState('#000000');\n  const [penThickness, setPenThickness] = useState(2);\n  useEffect(() => {\n    if (image) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImageSrc(reader.result);\n      };\n      reader.readAsDataURL(image);\n    }\n  }, [image]);\n  useEffect(() => {\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    const imageCtx = imageCanvas.getContext('2d');\n    const drawingCtx = drawingCanvas.getContext('2d');\n    setImageSrc(image);\n    setImageContext(imageCtx);\n    setDrawingContext(drawingCtx);\n    return () => {\n      setImageContext(null);\n      setDrawingContext(null);\n    };\n  }, []);\n  useEffect(() => {\n    if (imageContext && drawingContext && imageSrc) {\n      const img = new Image();\n      img.onload = () => {\n        const {\n          width,\n          height\n        } = img;\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n        imageCanvas.width = width;\n        imageCanvas.height = height;\n        drawingCanvas.width = width;\n        drawingCanvas.height = height;\n        imageContext.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n        imageContext.drawImage(img, 0, 0, width, height);\n        shapes.forEach((shape, index) => {\n          drawShape(drawingContext, shape, index === selectedShapeIndex);\n        });\n      };\n      img.src = URL.createObjectURL(imageSrc);\n    }\n  }, [imageContext, drawingContext, imageSrc, brightness, contrast, shapes, selectedShapeIndex]);\n  const handleMouseDown = e => {\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    if (penMode) {\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n      const ctx = canvas.getContext('2d');\n      ctx.globalCompositeOperation = 'destination-out';\n      ctx.strokeStyle = 'rgba(0,0,0,0)';\n      ctx.lineWidth = penThickness;\n      setIsDragging(true);\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else {\n      let shapeSelected = false;\n      shapes.forEach((shape, index) => {\n        if (isPointInsideShape(mouseX, mouseY, shape)) {\n          setSelectedShapeIndex(index);\n          setIsDragging(true);\n          setDragStartX(mouseX - shape.x);\n          setDragStartY(mouseY - shape.y);\n          setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n          if (isResizing) {\n            setResizeStartX(mouseX - shape.x);\n            setResizeStartY(mouseY - shape.y);\n          }\n          shapeSelected = true;\n        }\n      });\n      if (!shapeSelected) {\n        setSelectedShapeIndex(null);\n      }\n    }\n  };\n  const handleMouseMove = e => {\n    if (!isDragging || penMode && !rubberMode) return;\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    if (penMode) {\n      drawingContext.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n      drawingContext.lineWidth = penThickness;\n      drawingContext.lineCap = 'round';\n      drawingContext.beginPath();\n      drawingContext.moveTo(prevMouseX, prevMouseY);\n      drawingContext.lineTo(mouseX, mouseY);\n      drawingContext.stroke();\n      drawingContext.closePath();\n      setPrevMouseX(mouseX);\n      setPrevMouseY(mouseY);\n    } else if (rubberMode) {\n      drawingContext.globalCompositeOperation = 'destination-out';\n      drawingContext.beginPath();\n      drawingContext.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n      drawingContext.fill();\n    } else {\n      const newShapes = [...shapes];\n      const shape = newShapes[selectedShapeIndex];\n      if (!isResizing) {\n        shape.x = mouseX - dragStartX;\n        shape.y = mouseY - dragStartY;\n      } else {\n        const dx = mouseX - shape.x - resizeStartX;\n        const dy = mouseY - shape.y - resizeStartY;\n        shape.width += dx;\n        shape.height += dy;\n        setResizeStartX(mouseX - shape.x);\n        setResizeStartY(mouseY - shape.y);\n      }\n      setShapes(newShapes);\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setIsResizing(false);\n  };\n  const isResizingHandle = (x, y, shape) => {\n    return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width && y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n  };\n  const drawShape = (ctx, shape, isSelected) => {\n    ctx.beginPath();\n    ctx.rect(shape.x, shape.y, shape.width, shape.height);\n    ctx.strokeStyle = isSelected ? 'red' : shape.color;\n    ctx.lineWidth = shape.lineWidth;\n    ctx.stroke();\n  };\n  const handleDeleteShape = () => {\n    if (selectedShapeIndex !== null) {\n      const newShapes = [...shapes];\n      newShapes.splice(selectedShapeIndex, 1);\n      setShapes(newShapes);\n      setSelectedShapeIndex(null);\n    }\n  };\n  const handleSave = () => {\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    const mergedCanvas = document.createElement('canvas');\n    const mergedCtx = mergedCanvas.getContext('2d');\n    mergedCanvas.width = imageCanvas.width;\n    mergedCanvas.height = imageCanvas.height;\n    mergedCtx.drawImage(imageCanvas, 0, 0);\n    mergedCtx.drawImage(drawingCanvas, 0, 0);\n    mergedCanvas.toBlob(blob => {\n      onSave(blob);\n    }, 'image/jpeg', 1);\n  };\n  const handleAddShape = type => {\n    const newShapes = [...shapes];\n    if (type === 'square') {\n      newShapes.push({\n        type: 'square',\n        x: 100,\n        y: 100,\n        width: 50,\n        height: 50,\n        color: 'red',\n        lineWidth: 2\n      });\n    } else if (type === 'rectangle') {\n      newShapes.push({\n        type: 'rectangle',\n        x: 200,\n        y: 200,\n        width: 80,\n        height: 40,\n        color: 'blue',\n        lineWidth: 2\n      });\n    }\n    setShapes(newShapes);\n  };\n  const handleZoomIn = () => {\n    const newZoomLevel = zoomLevel * 1.2;\n    setZoomLevel(newZoomLevel);\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    imageCanvas.style.transform = `scale(${newZoomLevel})`;\n    drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n  };\n  const handleZoomOut = () => {\n    const newZoomLevel = zoomLevel / 1.2;\n    setZoomLevel(newZoomLevel);\n    const imageCanvas = imageCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    imageCanvas.style.transform = `scale(${newZoomLevel})`;\n    drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n  };\n  const togglePenMode = () => {\n    setPenMode(!penMode);\n    setRubberMode(false);\n  };\n  const clearCanvas = () => {\n    const canvas = drawingCanvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  };\n  const handleToggleRubberMode = () => {\n    setRubberMode(!rubberMode);\n    setPenMode(false);\n  };\n  const isPointInsideShape = (x, y, shape) => {\n    if (shape.type === 'rectangle') {\n      return x >= shape.x && x <= shape.x + shape.width && y >= shape.y && y <= shape.y + shape.height;\n    }\n    return false;\n  };\n  const handleTogglePenMode = () => {\n    setPenMode(!penMode);\n    setRubberMode(false);\n    setIsDragging(false); // Reset isDragging state\n    setPrevMouseX(0); // Reset prevMouseX\n    setPrevMouseY(0); // Reset prevMouseY\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: imageCanvasRef,\n      style: {\n        position: 'absolute'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: drawingCanvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      style: {\n        position: 'absolute'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        children: \"Zoom In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        children: \"Zoom Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this), selectedShapeIndex !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteShape,\n        style: {\n          position: 'absolute',\n          top: shapes[selectedShapeIndex].y - 50,\n          left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideToolbar, {\n      onBrightnessChange: setBrightness,\n      onContrastChange: setContrast,\n      onAddRectangle: () => handleAddShape('rectangle'),\n      onTogglePenMode: handleTogglePenMode,\n      onToggleRubberMode: handleToggleRubberMode,\n      onPenColorChange: setPenColor,\n      onPenThicknessChange: setPenThickness,\n      penMode: penMode,\n      rubberMode: rubberMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"Qcf8D8kAOLj3jo/PMdqFz0TdTfM=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SideToolbar","jsxDEV","_jsxDEV","ImageViewer","image","onClose","onSave","_s","imageCanvasRef","drawingCanvasRef","imageSrc","setImageSrc","brightness","setBrightness","contrast","setContrast","shapes","setShapes","selectedShapeIndex","setSelectedShapeIndex","isDragging","setIsDragging","dragStartX","setDragStartX","dragStartY","setDragStartY","isResizing","setIsResizing","resizeStartX","setResizeStartX","resizeStartY","setResizeStartY","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","zoomLevel","setZoomLevel","penMode","setPenMode","rubberMode","setRubberMode","penColor","setPenColor","penThickness","setPenThickness","reader","FileReader","onload","result","readAsDataURL","imageCanvas","current","drawingCanvas","imageCtx","getContext","drawingCtx","setImageContext","setDrawingContext","imageContext","drawingContext","img","Image","width","height","filter","drawImage","forEach","shape","index","drawShape","src","URL","createObjectURL","handleMouseDown","e","canvas","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","ctx","globalCompositeOperation","strokeStyle","lineWidth","shapeSelected","isPointInsideShape","x","y","isResizingHandle","handleMouseMove","lineCap","beginPath","moveTo","lineTo","stroke","closePath","arc","Math","PI","fill","newShapes","dx","dy","handleMouseUp","isSelected","color","handleDeleteShape","splice","handleSave","mergedCanvas","document","createElement","mergedCtx","toBlob","blob","handleAddShape","type","push","handleZoomIn","newZoomLevel","style","transform","handleZoomOut","togglePenMode","clearCanvas","clearRect","handleToggleRubberMode","handleTogglePenMode","className","children","ref","position","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseMove","onMouseUp","onClick","onBrightnessChange","onContrastChange","onAddRectangle","onTogglePenMode","onToggleRubberMode","onPenColorChange","onPenThicknessChange","_c","$RefreshReg$"],"sources":["/Users/igorfesenko/Desktop/xray-editor/src/ImageViewer/ImageViewer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './ImageViewer.css';\nimport SideToolbar from '../SideToolbar/SideToolbar';\n\nfunction ImageViewer({ image, onClose, onSave }) {\n    const imageCanvasRef = useRef(null);\n    const drawingCanvasRef = useRef(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [brightness, setBrightness] = useState(100);\n    const [contrast, setContrast] = useState(100);\n    const [shapes, setShapes] = useState([]);\n    const [selectedShapeIndex, setSelectedShapeIndex] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [dragStartX, setDragStartX] = useState(0);\n    const [dragStartY, setDragStartY] = useState(0);\n    const [isResizing, setIsResizing] = useState(false);\n    const [resizeStartX, setResizeStartX] = useState(0);\n    const [resizeStartY, setResizeStartY] = useState(0);\n    const [prevMouseX, setPrevMouseX] = useState(0);\n    const [prevMouseY, setPrevMouseY] = useState(0);\n    const [zoomLevel, setZoomLevel] = useState(1.0);\n\n    const [penMode, setPenMode] = useState(false);\n    const [rubberMode, setRubberMode] = useState(false);\n    const [penColor, setPenColor] = useState('#000000');\n    const [penThickness, setPenThickness] = useState(2);\n\n    useEffect(() => {\n        if (image) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setImageSrc(reader.result);\n            };\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    useEffect(() => {\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n        const imageCtx = imageCanvas.getContext('2d');\n        const drawingCtx = drawingCanvas.getContext('2d');\n\n        setImageSrc(image);\n        setImageContext(imageCtx);\n        setDrawingContext(drawingCtx);\n\n        return () => {\n            setImageContext(null);\n            setDrawingContext(null);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (imageContext && drawingContext && imageSrc) {\n            const img = new Image();\n            img.onload = () => {\n                const { width, height } = img;\n                const imageCanvas = imageCanvasRef.current;\n                const drawingCanvas = drawingCanvasRef.current;\n\n                imageCanvas.width = width;\n                imageCanvas.height = height;\n                drawingCanvas.width = width;\n                drawingCanvas.height = height;\n\n                imageContext.filter = `brightness(${brightness}%) contrast(${contrast}%)`;\n                imageContext.drawImage(img, 0, 0, width, height);\n\n                shapes.forEach((shape, index) => {\n                    drawShape(drawingContext, shape, index === selectedShapeIndex);\n                });\n            };\n            img.src = URL.createObjectURL(imageSrc);\n        }\n    }, [imageContext, drawingContext, imageSrc, brightness, contrast, shapes, selectedShapeIndex]);\n\n    const handleMouseDown = (e) => {\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        if (penMode) {\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else if (rubberMode) {\n            const ctx = canvas.getContext('2d');\n            ctx.globalCompositeOperation = 'destination-out';\n            ctx.strokeStyle = 'rgba(0,0,0,0)';\n            ctx.lineWidth = penThickness;\n            setIsDragging(true);\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else {\n            let shapeSelected = false;\n            shapes.forEach((shape, index) => {\n                if (isPointInsideShape(mouseX, mouseY, shape)) {\n                    setSelectedShapeIndex(index);\n                    setIsDragging(true);\n                    setDragStartX(mouseX - shape.x);\n                    setDragStartY(mouseY - shape.y);\n                    setIsResizing(isResizingHandle(mouseX, mouseY, shape));\n                    if (isResizing) {\n                        setResizeStartX(mouseX - shape.x);\n                        setResizeStartY(mouseY - shape.y);\n                    }\n                    shapeSelected = true;\n                }\n            });\n\n            if (!shapeSelected) {\n                setSelectedShapeIndex(null);\n            }\n        }\n    };\n\n    const handleMouseMove = (e) => {\n        if (!isDragging || (penMode && !rubberMode)) return;\n\n        const canvas = drawingCanvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        if (penMode) {\n            drawingContext.strokeStyle = rubberMode ? '#FFFFFF' : penColor;\n            drawingContext.lineWidth = penThickness;\n            drawingContext.lineCap = 'round';\n            drawingContext.beginPath();\n            drawingContext.moveTo(prevMouseX, prevMouseY);\n            drawingContext.lineTo(mouseX, mouseY);\n            drawingContext.stroke();\n            drawingContext.closePath();\n            setPrevMouseX(mouseX);\n            setPrevMouseY(mouseY);\n        } else if (rubberMode) {\n            drawingContext.globalCompositeOperation = 'destination-out';\n            drawingContext.beginPath();\n            drawingContext.arc(mouseX, mouseY, penThickness / 2, 0, 2 * Math.PI);\n            drawingContext.fill();\n        } else {\n            const newShapes = [...shapes];\n            const shape = newShapes[selectedShapeIndex];\n            if (!isResizing) {\n                shape.x = mouseX - dragStartX;\n                shape.y = mouseY - dragStartY;\n            } else {\n                const dx = mouseX - shape.x - resizeStartX;\n                const dy = mouseY - shape.y - resizeStartY;\n                shape.width += dx;\n                shape.height += dy;\n                setResizeStartX(mouseX - shape.x);\n                setResizeStartY(mouseY - shape.y);\n            }\n            setShapes(newShapes);\n        }\n    };\n\n    const handleMouseUp = () => {\n        setIsDragging(false);\n        setIsResizing(false);\n    };\n\n    const isResizingHandle = (x, y, shape) => {\n        return x >= shape.x + shape.width - 10 && x <= shape.x + shape.width &&\n            y >= shape.y + shape.height - 10 && y <= shape.y + shape.height;\n    };\n\n    const drawShape = (ctx, shape, isSelected) => {\n        ctx.beginPath();\n        ctx.rect(shape.x, shape.y, shape.width, shape.height);\n        ctx.strokeStyle = isSelected ? 'red' : shape.color;\n        ctx.lineWidth = shape.lineWidth;\n        ctx.stroke();\n    };\n\n    const handleDeleteShape = () => {\n        if (selectedShapeIndex !== null) {\n            const newShapes = [...shapes];\n            newShapes.splice(selectedShapeIndex, 1);\n            setShapes(newShapes);\n            setSelectedShapeIndex(null);\n        }\n    };\n\n    const handleSave = () => {\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n        const mergedCanvas = document.createElement('canvas');\n        const mergedCtx = mergedCanvas.getContext('2d');\n\n        mergedCanvas.width = imageCanvas.width;\n        mergedCanvas.height = imageCanvas.height;\n\n        mergedCtx.drawImage(imageCanvas, 0, 0);\n        mergedCtx.drawImage(drawingCanvas, 0, 0);\n\n        mergedCanvas.toBlob(blob => {\n            onSave(blob);\n        }, 'image/jpeg', 1);\n    };\n\n    const handleAddShape = (type) => {\n        const newShapes = [...shapes];\n        if (type === 'square') {\n            newShapes.push({\n                type: 'square',\n                x: 100,\n                y: 100,\n                width: 50,\n                height: 50,\n                color: 'red',\n                lineWidth: 2,\n            });\n        } else if (type === 'rectangle') {\n            newShapes.push({\n                type: 'rectangle',\n                x: 200,\n                y: 200,\n                width: 80,\n                height: 40,\n                color: 'blue',\n                lineWidth: 2,\n            });\n        }\n        setShapes(newShapes);\n    };\n\n    const handleZoomIn = () => {\n        const newZoomLevel = zoomLevel * 1.2;\n        setZoomLevel(newZoomLevel);\n\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n\n        imageCanvas.style.transform = `scale(${newZoomLevel})`;\n        drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n    };\n\n    const handleZoomOut = () => {\n        const newZoomLevel = zoomLevel / 1.2;\n        setZoomLevel(newZoomLevel);\n\n        const imageCanvas = imageCanvasRef.current;\n        const drawingCanvas = drawingCanvasRef.current;\n\n        imageCanvas.style.transform = `scale(${newZoomLevel})`;\n        drawingCanvas.style.transform = `scale(${newZoomLevel})`;\n    };\n\n    const togglePenMode = () => {\n        setPenMode(!penMode);\n        setRubberMode(false);\n    };\n\n    const clearCanvas = () => {\n        const canvas = drawingCanvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    const handleToggleRubberMode = () => {\n        setRubberMode(!rubberMode);\n        setPenMode(false);\n    };\n\n    const isPointInsideShape = (x, y, shape) => {\n        if (shape.type === 'rectangle') {\n            return x >= shape.x && x <= (shape.x + shape.width) &&\n                y >= shape.y && y <= (shape.y + shape.height);\n        }\n        return false;\n    };\n\n    const handleTogglePenMode = () => {\n        setPenMode(!penMode);\n        setRubberMode(false);\n        setIsDragging(false); // Reset isDragging state\n        setPrevMouseX(0); // Reset prevMouseX\n        setPrevMouseY(0); // Reset prevMouseY\n    };\n\n    return (\n        <div className=\"image-viewer\">\n            <canvas\n                ref={imageCanvasRef}\n                style={{ position: 'absolute' }}\n            />\n            <canvas\n                ref={drawingCanvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                style={{ position: 'absolute' }}\n            />\n            <div className=\"controls\">\n                <button onClick={handleZoomIn}>Zoom In</button>\n                <button onClick={handleZoomOut}>Zoom Out</button>\n                <button onClick={handleSave}>Save</button>\n                <button onClick={onClose}>Close</button>\n                {selectedShapeIndex !== null && (\n                    <button onClick={handleDeleteShape} style={{\n                        position: 'absolute',\n                        top: shapes[selectedShapeIndex].y - 50,\n                        left: shapes[selectedShapeIndex].x + shapes[selectedShapeIndex].width - 420\n                    }}>X</button>\n                )}\n            </div>\n\n            <SideToolbar\n                onBrightnessChange={setBrightness}\n                onContrastChange={setContrast}\n                onAddRectangle={() => handleAddShape('rectangle')}\n                onTogglePenMode={handleTogglePenMode}\n                onToggleRubberMode={handleToggleRubberMode}\n                onPenColorChange={setPenColor}\n                onPenThicknessChange={setPenThickness}\n                penMode={penMode}\n                rubberMode={rubberMode}\n            />\n        </div>\n    );\n}\n\nexport default ImageViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}